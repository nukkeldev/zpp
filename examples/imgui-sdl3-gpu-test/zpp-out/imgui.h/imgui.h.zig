// This file was auto-generated by github:nukkeldev/zpp; I wouldn't recommend editing it.

fn refAllDecls(comptime T: type) void {
    inline for (comptime @import("std").meta.declarations(T)) |decl| {
        _ = &@field(T, decl.name);
    }
}

pub const ImVec2 = extern struct {
    x: f32,
    y: f32,
    comptime {
        if (@sizeOf(@This()) != 8 or @alignOf(@This()) != 4) {
            @compileLog(@import("std").fmt.comptimePrint("Expected type 'ImVec2' to be 8 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                @sizeOf(@This()),
                @alignOf(@This()),
            }));

            const this: @This() = undefined;

            const T_x = @TypeOf(this.x);
            if (@sizeOf(T_x) != 4 or @alignOf(T_x) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'x' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_x),
                    @alignOf(T_x),
                }));
            }
            const T_y = @TypeOf(this.y);
            if (@sizeOf(T_y) != 4 or @alignOf(T_y) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'y' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_y),
                    @alignOf(T_y),
                }));
            }
        }
    }
};

pub const ImVec4 = extern struct {
    x: f32,
    y: f32,
    z: f32,
    w: f32,
    comptime {
        if (@sizeOf(@This()) != 16 or @alignOf(@This()) != 4) {
            @compileLog(@import("std").fmt.comptimePrint("Expected type 'ImVec4' to be 16 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                @sizeOf(@This()),
                @alignOf(@This()),
            }));

            const this: @This() = undefined;

            const T_x = @TypeOf(this.x);
            if (@sizeOf(T_x) != 4 or @alignOf(T_x) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'x' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_x),
                    @alignOf(T_x),
                }));
            }
            const T_y = @TypeOf(this.y);
            if (@sizeOf(T_y) != 4 or @alignOf(T_y) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'y' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_y),
                    @alignOf(T_y),
                }));
            }
            const T_z = @TypeOf(this.z);
            if (@sizeOf(T_z) != 4 or @alignOf(T_z) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'z' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_z),
                    @alignOf(T_z),
                }));
            }
            const T_w = @TypeOf(this.w);
            if (@sizeOf(T_w) != 4 or @alignOf(T_w) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'w' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_w),
                    @alignOf(T_w),
                }));
            }
        }
    }
};

pub const ImTextureRef = extern struct {
    _TexData: [*c]ImTextureData,
    _TexID: u64,
    comptime {
        if (@sizeOf(@This()) != 16 or @alignOf(@This()) != 8) {
            @compileLog(@import("std").fmt.comptimePrint("Expected type 'ImTextureRef' to be 16 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                @sizeOf(@This()),
                @alignOf(@This()),
            }));

            const this: @This() = undefined;

            const T__TexData = @TypeOf(this._TexData);
            if (@sizeOf(T__TexData) != 8 or @alignOf(T__TexData) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field '_TexData' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T__TexData),
                    @alignOf(T__TexData),
                }));
            }
            const T__TexID = @TypeOf(this._TexID);
            if (@sizeOf(T__TexID) != 8 or @alignOf(T__TexID) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field '_TexID' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T__TexID),
                    @alignOf(T__TexID),
                }));
            }
        }
    }
};

pub const ImGui = struct {
    pub const CreateContext = CreateContext__9c317cc3bbd69792;
    extern fn CreateContext__9c317cc3bbd69792(shared_font_atlas: [*c]ImFontAtlas) callconv(.c) [*c]ImGuiContext;

    pub const DestroyContext = DestroyContext__33355240a3c270a1;
    extern fn DestroyContext__33355240a3c270a1(ctx: [*c]ImGuiContext) callconv(.c) void;

    pub const GetCurrentContext = GetCurrentContext__bfcbdecf32b4f9ee;
    extern fn GetCurrentContext__bfcbdecf32b4f9ee() callconv(.c) [*c]ImGuiContext;

    pub const SetCurrentContext = SetCurrentContext__cf8edc56a4c808a8;
    extern fn SetCurrentContext__cf8edc56a4c808a8(ctx: [*c]ImGuiContext) callconv(.c) void;

    pub const GetIO = GetIO__867c1837c428c2c0;
    extern fn GetIO__867c1837c428c2c0() callconv(.c) *ImGuiIO;

    pub const GetPlatformIO = GetPlatformIO__2abb1642f8d692ff;
    extern fn GetPlatformIO__2abb1642f8d692ff() callconv(.c) *ImGuiPlatformIO;

    pub const GetStyle = GetStyle__ce2435ddf1d8bbdc;
    extern fn GetStyle__ce2435ddf1d8bbdc() callconv(.c) *ImGuiStyle;

    pub const NewFrame = NewFrame__c7eb4c9ef72f9a92;
    extern fn NewFrame__c7eb4c9ef72f9a92() callconv(.c) void;

    pub const EndFrame = EndFrame__85cb800eb2d049e1;
    extern fn EndFrame__85cb800eb2d049e1() callconv(.c) void;

    pub const Render = Render__d74f51afaad3bb45;
    extern fn Render__d74f51afaad3bb45() callconv(.c) void;

    pub const GetDrawData = GetDrawData__75b329a9337a4684;
    extern fn GetDrawData__75b329a9337a4684() callconv(.c) [*c]ImDrawData;

    pub const ShowDemoWindow = ShowDemoWindow__bf3697c59b1e3f56;
    extern fn ShowDemoWindow__bf3697c59b1e3f56(p_open: [*c]bool) callconv(.c) void;

    pub const ShowMetricsWindow = ShowMetricsWindow__1b1d940fa8fb0d3;
    extern fn ShowMetricsWindow__1b1d940fa8fb0d3(p_open: [*c]bool) callconv(.c) void;

    pub const ShowDebugLogWindow = ShowDebugLogWindow__61c59fe9a4ee63dd;
    extern fn ShowDebugLogWindow__61c59fe9a4ee63dd(p_open: [*c]bool) callconv(.c) void;

    pub const ShowIDStackToolWindow = ShowIDStackToolWindow__3f55c4ebf0c26a3d;
    extern fn ShowIDStackToolWindow__3f55c4ebf0c26a3d(p_open: [*c]bool) callconv(.c) void;

    pub const ShowAboutWindow = ShowAboutWindow__8e94b4fe17f9480a;
    extern fn ShowAboutWindow__8e94b4fe17f9480a(p_open: [*c]bool) callconv(.c) void;

    pub const ShowStyleEditor = ShowStyleEditor__9295e9c397962dd9;
    extern fn ShowStyleEditor__9295e9c397962dd9(ref: [*c]ImGuiStyle) callconv(.c) void;

    pub const ShowStyleSelector = ShowStyleSelector__15aa917f33eeee46;
    extern fn ShowStyleSelector__15aa917f33eeee46(label: [*c]const i8) callconv(.c) bool;

    pub const ShowFontSelector = ShowFontSelector__7279f694874f3f6f;
    extern fn ShowFontSelector__7279f694874f3f6f(label: [*c]const i8) callconv(.c) void;

    pub const ShowUserGuide = ShowUserGuide__b7066157174a867a;
    extern fn ShowUserGuide__b7066157174a867a() callconv(.c) void;

    pub const GetVersion = GetVersion__6769da60bc608dcb;
    extern fn GetVersion__6769da60bc608dcb() callconv(.c) [*c]const i8;

    pub const StyleColorsDark = StyleColorsDark__f3026e652fa5a3d4;
    extern fn StyleColorsDark__f3026e652fa5a3d4(dst: [*c]ImGuiStyle) callconv(.c) void;

    pub const StyleColorsLight = StyleColorsLight__cbe762f272234e68;
    extern fn StyleColorsLight__cbe762f272234e68(dst: [*c]ImGuiStyle) callconv(.c) void;

    pub const StyleColorsClassic = StyleColorsClassic__ec37fdbb560abf49;
    extern fn StyleColorsClassic__ec37fdbb560abf49(dst: [*c]ImGuiStyle) callconv(.c) void;

    pub const Begin = Begin__5ca733c608c9f722;
    extern fn Begin__5ca733c608c9f722(name: [*c]const i8, p_open: [*c]bool, flags: i32) callconv(.c) bool;

    pub const End = End__891dd9019e6ec9af;
    extern fn End__891dd9019e6ec9af() callconv(.c) void;

    pub const BeginChild = BeginChild__b62a89170c85f9f4;
    extern fn BeginChild__b62a89170c85f9f4(str_id: [*c]const i8, size: *const ImVec2, child_flags: i32, window_flags: i32) callconv(.c) bool;

    pub const BeginChild_1 = BeginChild__b62a89170c85f9f4_1;
    extern fn BeginChild__b62a89170c85f9f4_1(id: u32, size: *const ImVec2, child_flags: i32, window_flags: i32) callconv(.c) bool;

    pub const EndChild = EndChild__748a79294f8d079c;
    extern fn EndChild__748a79294f8d079c() callconv(.c) void;

    pub const IsWindowAppearing = IsWindowAppearing__d8ef0284b9adfaf3;
    extern fn IsWindowAppearing__d8ef0284b9adfaf3() callconv(.c) bool;

    pub const IsWindowCollapsed = IsWindowCollapsed__70e65449d3ca41a3;
    extern fn IsWindowCollapsed__70e65449d3ca41a3() callconv(.c) bool;

    pub const IsWindowFocused = IsWindowFocused__3f96fdfb44995054;
    extern fn IsWindowFocused__3f96fdfb44995054(flags: i32) callconv(.c) bool;

    pub const IsWindowHovered = IsWindowHovered__9aa3442dcec331b0;
    extern fn IsWindowHovered__9aa3442dcec331b0(flags: i32) callconv(.c) bool;

    pub const GetWindowDrawList = GetWindowDrawList__d62b561ccc2f14a5;
    extern fn GetWindowDrawList__d62b561ccc2f14a5() callconv(.c) [*c]ImDrawList;

    pub const GetWindowPos = GetWindowPos__9c3da571577684d9;
    extern fn GetWindowPos__9c3da571577684d9(zpp_out: *ImVec2) callconv(.c) void;

    pub const GetWindowSize = GetWindowSize__d07ac5451ca160a6;
    extern fn GetWindowSize__d07ac5451ca160a6(zpp_out: *ImVec2) callconv(.c) void;

    pub const GetWindowWidth = GetWindowWidth__1ec35a8c320310f;
    extern fn GetWindowWidth__1ec35a8c320310f() callconv(.c) f32;

    pub const GetWindowHeight = GetWindowHeight__87734b279d1f95ed;
    extern fn GetWindowHeight__87734b279d1f95ed() callconv(.c) f32;

    pub const SetNextWindowPos = SetNextWindowPos__f0b25f79948ac461;
    extern fn SetNextWindowPos__f0b25f79948ac461(pos: *const ImVec2, cond: i32, pivot: *const ImVec2) callconv(.c) void;

    pub const SetNextWindowSize = SetNextWindowSize__793a40bb853049cc;
    extern fn SetNextWindowSize__793a40bb853049cc(size: *const ImVec2, cond: i32) callconv(.c) void;

    pub const SetNextWindowSizeConstraints = SetNextWindowSizeConstraints__96ea5ee82c357b37;
    extern fn SetNextWindowSizeConstraints__96ea5ee82c357b37(size_min: *const ImVec2, size_max: *const ImVec2, custom_callback: [*c]*const fn ([*c]ImGuiSizeCallbackData) callconv(.c) void, custom_callback_data: *void) callconv(.c) void;

    pub const SetNextWindowContentSize = SetNextWindowContentSize__8a51bfd3137dc3df;
    extern fn SetNextWindowContentSize__8a51bfd3137dc3df(size: *const ImVec2) callconv(.c) void;

    pub const SetNextWindowCollapsed = SetNextWindowCollapsed__2761348ab0ff9f09;
    extern fn SetNextWindowCollapsed__2761348ab0ff9f09(collapsed: bool, cond: i32) callconv(.c) void;

    pub const SetNextWindowFocus = SetNextWindowFocus__83b1465119475af;
    extern fn SetNextWindowFocus__83b1465119475af() callconv(.c) void;

    pub const SetNextWindowScroll = SetNextWindowScroll__bb3b6dc045ee5fcd;
    extern fn SetNextWindowScroll__bb3b6dc045ee5fcd(scroll: *const ImVec2) callconv(.c) void;

    pub const SetNextWindowBgAlpha = SetNextWindowBgAlpha__7c4214955c599924;
    extern fn SetNextWindowBgAlpha__7c4214955c599924(alpha: f32) callconv(.c) void;

    pub const SetWindowPos = SetWindowPos__ca231277021bb406;
    extern fn SetWindowPos__ca231277021bb406(pos: *const ImVec2, cond: i32) callconv(.c) void;

    pub const SetWindowSize = SetWindowSize__73f4884420006287;
    extern fn SetWindowSize__73f4884420006287(size: *const ImVec2, cond: i32) callconv(.c) void;

    pub const SetWindowCollapsed = SetWindowCollapsed__f8b42d292820f5f5;
    extern fn SetWindowCollapsed__f8b42d292820f5f5(collapsed: bool, cond: i32) callconv(.c) void;

    pub const SetWindowFocus = SetWindowFocus__e3dec7b29fcf4747;
    extern fn SetWindowFocus__e3dec7b29fcf4747() callconv(.c) void;

    pub const SetWindowPos_1 = SetWindowPos__ca231277021bb406_1;
    extern fn SetWindowPos__ca231277021bb406_1(name: [*c]const i8, pos: *const ImVec2, cond: i32) callconv(.c) void;

    pub const SetWindowSize_1 = SetWindowSize__73f4884420006287_1;
    extern fn SetWindowSize__73f4884420006287_1(name: [*c]const i8, size: *const ImVec2, cond: i32) callconv(.c) void;

    pub const SetWindowCollapsed_1 = SetWindowCollapsed__f8b42d292820f5f5_1;
    extern fn SetWindowCollapsed__f8b42d292820f5f5_1(name: [*c]const i8, collapsed: bool, cond: i32) callconv(.c) void;

    pub const SetWindowFocus_1 = SetWindowFocus__e3dec7b29fcf4747_1;
    extern fn SetWindowFocus__e3dec7b29fcf4747_1(name: [*c]const i8) callconv(.c) void;

    pub const GetScrollX = GetScrollX__84968e0c6bdcd61b;
    extern fn GetScrollX__84968e0c6bdcd61b() callconv(.c) f32;

    pub const GetScrollY = GetScrollY__d1cf11a9dca5eea5;
    extern fn GetScrollY__d1cf11a9dca5eea5() callconv(.c) f32;

    pub const SetScrollX = SetScrollX__5a55f048357054ad;
    extern fn SetScrollX__5a55f048357054ad(scroll_x: f32) callconv(.c) void;

    pub const SetScrollY = SetScrollY__6c7ff2b3c6eacd5b;
    extern fn SetScrollY__6c7ff2b3c6eacd5b(scroll_y: f32) callconv(.c) void;

    pub const GetScrollMaxX = GetScrollMaxX__314d38c641ba3a5a;
    extern fn GetScrollMaxX__314d38c641ba3a5a() callconv(.c) f32;

    pub const GetScrollMaxY = GetScrollMaxY__629cefd1030bceb9;
    extern fn GetScrollMaxY__629cefd1030bceb9() callconv(.c) f32;

    pub const SetScrollHereX = SetScrollHereX__d18377632477bfc8;
    extern fn SetScrollHereX__d18377632477bfc8(center_x_ratio: f32) callconv(.c) void;

    pub const SetScrollHereY = SetScrollHereY__b0041332a8430e31;
    extern fn SetScrollHereY__b0041332a8430e31(center_y_ratio: f32) callconv(.c) void;

    pub const SetScrollFromPosX = SetScrollFromPosX__73b6c80d834f33b2;
    extern fn SetScrollFromPosX__73b6c80d834f33b2(local_x: f32, center_x_ratio: f32) callconv(.c) void;

    pub const SetScrollFromPosY = SetScrollFromPosY__ef44d3f321cca53a;
    extern fn SetScrollFromPosY__ef44d3f321cca53a(local_y: f32, center_y_ratio: f32) callconv(.c) void;

    pub const PushFont = PushFont__57a48dfb3f59b615;
    extern fn PushFont__57a48dfb3f59b615(font: [*c]ImFont, font_size_base_unscaled: f32) callconv(.c) void;

    pub const PopFont = PopFont__e69ab332756a54c9;
    extern fn PopFont__e69ab332756a54c9() callconv(.c) void;

    pub const GetFont = GetFont__c886c34a5d91fad9;
    extern fn GetFont__c886c34a5d91fad9() callconv(.c) [*c]ImFont;

    pub const GetFontSize = GetFontSize__b261006d1784e993;
    extern fn GetFontSize__b261006d1784e993() callconv(.c) f32;

    pub const GetFontBaked = GetFontBaked__3f06989c0a78b9d3;
    extern fn GetFontBaked__3f06989c0a78b9d3() callconv(.c) [*c]ImFontBaked;

    pub const PushStyleColor = PushStyleColor__87b647a88ff97a78;
    extern fn PushStyleColor__87b647a88ff97a78(idx: i32, col: u32) callconv(.c) void;

    pub const PushStyleColor_1 = PushStyleColor__87b647a88ff97a78_1;
    extern fn PushStyleColor__87b647a88ff97a78_1(idx: i32, col: *const ImVec4) callconv(.c) void;

    pub const PopStyleColor = PopStyleColor__b8867429a4a3514e;
    extern fn PopStyleColor__b8867429a4a3514e(count: i32) callconv(.c) void;

    pub const PushStyleVar = PushStyleVar__3d7496da947837c5;
    extern fn PushStyleVar__3d7496da947837c5(idx: i32, val: f32) callconv(.c) void;

    pub const PushStyleVar_1 = PushStyleVar__3d7496da947837c5_1;
    extern fn PushStyleVar__3d7496da947837c5_1(idx: i32, val: *const ImVec2) callconv(.c) void;

    pub const PushStyleVarX = PushStyleVarX__e1edf590a5efc94d;
    extern fn PushStyleVarX__e1edf590a5efc94d(idx: i32, val_x: f32) callconv(.c) void;

    pub const PushStyleVarY = PushStyleVarY__9a47e6fce2470943;
    extern fn PushStyleVarY__9a47e6fce2470943(idx: i32, val_y: f32) callconv(.c) void;

    pub const PopStyleVar = PopStyleVar__133858151c313dfc;
    extern fn PopStyleVar__133858151c313dfc(count: i32) callconv(.c) void;

    pub const PushItemFlag = PushItemFlag__ac157aa2a70e24a5;
    extern fn PushItemFlag__ac157aa2a70e24a5(option: i32, enabled: bool) callconv(.c) void;

    pub const PopItemFlag = PopItemFlag__2bd31c7dc71b28a9;
    extern fn PopItemFlag__2bd31c7dc71b28a9() callconv(.c) void;

    pub const PushItemWidth = PushItemWidth__8a4b1e33423001bf;
    extern fn PushItemWidth__8a4b1e33423001bf(item_width: f32) callconv(.c) void;

    pub const PopItemWidth = PopItemWidth__a460714259b22669;
    extern fn PopItemWidth__a460714259b22669() callconv(.c) void;

    pub const SetNextItemWidth = SetNextItemWidth__dd36b3db0cbfbee8;
    extern fn SetNextItemWidth__dd36b3db0cbfbee8(item_width: f32) callconv(.c) void;

    pub const CalcItemWidth = CalcItemWidth__70ec92cb8051a755;
    extern fn CalcItemWidth__70ec92cb8051a755() callconv(.c) f32;

    pub const PushTextWrapPos = PushTextWrapPos__87f1f983d508839f;
    extern fn PushTextWrapPos__87f1f983d508839f(wrap_local_pos_x: f32) callconv(.c) void;

    pub const PopTextWrapPos = PopTextWrapPos__aab213687042221b;
    extern fn PopTextWrapPos__aab213687042221b() callconv(.c) void;

    pub const GetFontTexUvWhitePixel = GetFontTexUvWhitePixel__d4cfaebda0fb1871;
    extern fn GetFontTexUvWhitePixel__d4cfaebda0fb1871(zpp_out: *ImVec2) callconv(.c) void;

    pub const GetColorU32 = GetColorU32__6c8565e89ac391a;
    extern fn GetColorU32__6c8565e89ac391a(idx: i32, alpha_mul: f32) callconv(.c) u32;

    pub const GetColorU32_1 = GetColorU32__6c8565e89ac391a_1;
    extern fn GetColorU32__6c8565e89ac391a_1(col: *const ImVec4) callconv(.c) u32;

    pub const GetColorU32_2 = GetColorU32__6c8565e89ac391a_2;
    extern fn GetColorU32__6c8565e89ac391a_2(col: u32, alpha_mul: f32) callconv(.c) u32;

    pub const GetStyleColorVec4 = GetStyleColorVec4__5c8f7f462421a3ef;
    extern fn GetStyleColorVec4__5c8f7f462421a3ef(idx: i32) callconv(.c) *const ImVec4;

    pub const GetCursorScreenPos = GetCursorScreenPos__d51c49a91c35dfd8;
    extern fn GetCursorScreenPos__d51c49a91c35dfd8(zpp_out: *ImVec2) callconv(.c) void;

    pub const SetCursorScreenPos = SetCursorScreenPos__b9044e0998623734;
    extern fn SetCursorScreenPos__b9044e0998623734(pos: *const ImVec2) callconv(.c) void;

    pub const GetContentRegionAvail = GetContentRegionAvail__c0e1c737c8050afd;
    extern fn GetContentRegionAvail__c0e1c737c8050afd(zpp_out: *ImVec2) callconv(.c) void;

    pub const GetCursorPos = GetCursorPos__3f9edd37baa45304;
    extern fn GetCursorPos__3f9edd37baa45304(zpp_out: *ImVec2) callconv(.c) void;

    pub const GetCursorPosX = GetCursorPosX__b2a3841e1222fce1;
    extern fn GetCursorPosX__b2a3841e1222fce1() callconv(.c) f32;

    pub const GetCursorPosY = GetCursorPosY__2edbcf99dd193efe;
    extern fn GetCursorPosY__2edbcf99dd193efe() callconv(.c) f32;

    pub const SetCursorPos = SetCursorPos__b128b896f245bd95;
    extern fn SetCursorPos__b128b896f245bd95(local_pos: *const ImVec2) callconv(.c) void;

    pub const SetCursorPosX = SetCursorPosX__97ad7c67ea44b428;
    extern fn SetCursorPosX__97ad7c67ea44b428(local_x: f32) callconv(.c) void;

    pub const SetCursorPosY = SetCursorPosY__fa5a7e361476b9b8;
    extern fn SetCursorPosY__fa5a7e361476b9b8(local_y: f32) callconv(.c) void;

    pub const GetCursorStartPos = GetCursorStartPos__c7930fa4bf3886b;
    extern fn GetCursorStartPos__c7930fa4bf3886b(zpp_out: *ImVec2) callconv(.c) void;

    pub const Separator = Separator__ef50d635e9b2c5da;
    extern fn Separator__ef50d635e9b2c5da() callconv(.c) void;

    pub const SameLine = SameLine__19388aad62c2dfcf;
    extern fn SameLine__19388aad62c2dfcf(offset_from_start_x: f32, spacing: f32) callconv(.c) void;

    pub const NewLine = NewLine__d04a7caa9a9f89c8;
    extern fn NewLine__d04a7caa9a9f89c8() callconv(.c) void;

    pub const Spacing = Spacing__173d4916acba51a5;
    extern fn Spacing__173d4916acba51a5() callconv(.c) void;

    pub const Dummy = Dummy__25db99e558deb632;
    extern fn Dummy__25db99e558deb632(size: *const ImVec2) callconv(.c) void;

    pub const Indent = Indent__6247f93594279607;
    extern fn Indent__6247f93594279607(indent_w: f32) callconv(.c) void;

    pub const Unindent = Unindent__42ea795e352a8ac4;
    extern fn Unindent__42ea795e352a8ac4(indent_w: f32) callconv(.c) void;

    pub const BeginGroup = BeginGroup__2fdce6f84c57ba7;
    extern fn BeginGroup__2fdce6f84c57ba7() callconv(.c) void;

    pub const EndGroup = EndGroup__ab8c40173d0e8caf;
    extern fn EndGroup__ab8c40173d0e8caf() callconv(.c) void;

    pub const AlignTextToFramePadding = AlignTextToFramePadding__72c39acb262c8946;
    extern fn AlignTextToFramePadding__72c39acb262c8946() callconv(.c) void;

    pub const GetTextLineHeight = GetTextLineHeight__1b5674cc51da2dda;
    extern fn GetTextLineHeight__1b5674cc51da2dda() callconv(.c) f32;

    pub const GetTextLineHeightWithSpacing = GetTextLineHeightWithSpacing__18a388dc29f73481;
    extern fn GetTextLineHeightWithSpacing__18a388dc29f73481() callconv(.c) f32;

    pub const GetFrameHeight = GetFrameHeight__c1b4a6f8a6f600cf;
    extern fn GetFrameHeight__c1b4a6f8a6f600cf() callconv(.c) f32;

    pub const GetFrameHeightWithSpacing = GetFrameHeightWithSpacing__2618fb3737ae118;
    extern fn GetFrameHeightWithSpacing__2618fb3737ae118() callconv(.c) f32;

    pub const PushID = PushID__c1f47dc30561eb97;
    extern fn PushID__c1f47dc30561eb97(str_id: [*c]const i8) callconv(.c) void;

    pub const PushID_1 = PushID__c1f47dc30561eb97_1;
    extern fn PushID__c1f47dc30561eb97_1(str_id_begin: [*c]const i8, str_id_end: [*c]const i8) callconv(.c) void;

    pub const PushID_2 = PushID__c1f47dc30561eb97_2;
    extern fn PushID__c1f47dc30561eb97_2(ptr_id: *const void) callconv(.c) void;

    pub const PushID_3 = PushID__c1f47dc30561eb97_3;
    extern fn PushID__c1f47dc30561eb97_3(int_id: i32) callconv(.c) void;

    pub const PopID = PopID__f836dcff58c09f7a;
    extern fn PopID__f836dcff58c09f7a() callconv(.c) void;

    pub const GetID = GetID__3c6145040d727c96;
    extern fn GetID__3c6145040d727c96(str_id: [*c]const i8) callconv(.c) u32;

    pub const GetID_1 = GetID__3c6145040d727c96_1;
    extern fn GetID__3c6145040d727c96_1(str_id_begin: [*c]const i8, str_id_end: [*c]const i8) callconv(.c) u32;

    pub const GetID_2 = GetID__3c6145040d727c96_2;
    extern fn GetID__3c6145040d727c96_2(ptr_id: *const void) callconv(.c) u32;

    pub const GetID_3 = GetID__3c6145040d727c96_3;
    extern fn GetID__3c6145040d727c96_3(int_id: i32) callconv(.c) u32;

    pub const TextUnformatted = TextUnformatted__a7b97b5a7ebce722;
    extern fn TextUnformatted__a7b97b5a7ebce722(text: [*c]const i8, text_end: [*c]const i8) callconv(.c) void;

    pub const Text = Text__5e98d1ef5d3f41bd;
    extern fn Text__5e98d1ef5d3f41bd(fmt: [*c]const i8, ...) callconv(.c) void;

    pub const TextV = TextV__2c72c613835cffdf;
    extern fn TextV__2c72c613835cffdf(fmt: [*c]const i8, args: [*c]i8) callconv(.c) void;

    pub const TextColored = TextColored__49b349d1af96e43e;
    extern fn TextColored__49b349d1af96e43e(col: *const ImVec4, fmt: [*c]const i8, ...) callconv(.c) void;

    pub const TextColoredV = TextColoredV__5b9a62df7a068eb3;
    extern fn TextColoredV__5b9a62df7a068eb3(col: *const ImVec4, fmt: [*c]const i8, args: [*c]i8) callconv(.c) void;

    pub const TextDisabled = TextDisabled__92ec324b4be7a6f2;
    extern fn TextDisabled__92ec324b4be7a6f2(fmt: [*c]const i8, ...) callconv(.c) void;

    pub const TextDisabledV = TextDisabledV__50d5260b03138928;
    extern fn TextDisabledV__50d5260b03138928(fmt: [*c]const i8, args: [*c]i8) callconv(.c) void;

    pub const TextWrapped = TextWrapped__ed4a12dc9ab5f371;
    extern fn TextWrapped__ed4a12dc9ab5f371(fmt: [*c]const i8, ...) callconv(.c) void;

    pub const TextWrappedV = TextWrappedV__d77e855d2ecbecb2;
    extern fn TextWrappedV__d77e855d2ecbecb2(fmt: [*c]const i8, args: [*c]i8) callconv(.c) void;

    pub const LabelText = LabelText__1c776b0da8834f2a;
    extern fn LabelText__1c776b0da8834f2a(label: [*c]const i8, fmt: [*c]const i8, ...) callconv(.c) void;

    pub const LabelTextV = LabelTextV__3d1b1739b4df6cf6;
    extern fn LabelTextV__3d1b1739b4df6cf6(label: [*c]const i8, fmt: [*c]const i8, args: [*c]i8) callconv(.c) void;

    pub const BulletText = BulletText__ff1531d7aa2f61e4;
    extern fn BulletText__ff1531d7aa2f61e4(fmt: [*c]const i8, ...) callconv(.c) void;

    pub const BulletTextV = BulletTextV__aadf1dfd679856c6;
    extern fn BulletTextV__aadf1dfd679856c6(fmt: [*c]const i8, args: [*c]i8) callconv(.c) void;

    pub const SeparatorText = SeparatorText__73af9b61ffe008a9;
    extern fn SeparatorText__73af9b61ffe008a9(label: [*c]const i8) callconv(.c) void;

    pub const Button = Button__e28abe15ad2a7be8;
    extern fn Button__e28abe15ad2a7be8(label: [*c]const i8, size: *const ImVec2) callconv(.c) bool;

    pub const SmallButton = SmallButton__6812ee491c7f6878;
    extern fn SmallButton__6812ee491c7f6878(label: [*c]const i8) callconv(.c) bool;

    pub const InvisibleButton = InvisibleButton__7affb17028b1cc7;
    extern fn InvisibleButton__7affb17028b1cc7(str_id: [*c]const i8, size: *const ImVec2, flags: i32) callconv(.c) bool;

    pub const ArrowButton = ArrowButton__87f42cbc97fe4d85;
    extern fn ArrowButton__87f42cbc97fe4d85(str_id: [*c]const i8, dir: ImGuiDir) callconv(.c) bool;

    pub const Checkbox = Checkbox__3499a6c7b80278b8;
    extern fn Checkbox__3499a6c7b80278b8(label: [*c]const i8, v: [*c]bool) callconv(.c) bool;

    pub const CheckboxFlags = CheckboxFlags__42b093e3a3e5aa3;
    extern fn CheckboxFlags__42b093e3a3e5aa3(label: [*c]const i8, flags: [*c]i32, flags_value: i32) callconv(.c) bool;

    pub const CheckboxFlags_1 = CheckboxFlags__42b093e3a3e5aa3_1;
    extern fn CheckboxFlags__42b093e3a3e5aa3_1(label: [*c]const i8, flags: [*c]u32, flags_value: u32) callconv(.c) bool;

    pub const RadioButton = RadioButton__fee2fe660618d769;
    extern fn RadioButton__fee2fe660618d769(label: [*c]const i8, active: bool) callconv(.c) bool;

    pub const RadioButton_1 = RadioButton__fee2fe660618d769_1;
    extern fn RadioButton__fee2fe660618d769_1(label: [*c]const i8, v: [*c]i32, v_button: i32) callconv(.c) bool;

    pub const ProgressBar = ProgressBar__3871449f79d4c768;
    extern fn ProgressBar__3871449f79d4c768(fraction: f32, size_arg: *const ImVec2, overlay: [*c]const i8) callconv(.c) void;

    pub const Bullet = Bullet__157dc592949a90fe;
    extern fn Bullet__157dc592949a90fe() callconv(.c) void;

    pub const TextLink = TextLink__b7377a716215da2c;
    extern fn TextLink__b7377a716215da2c(label: [*c]const i8) callconv(.c) bool;

    pub const TextLinkOpenURL = TextLinkOpenURL__2d673e51a68188b8;
    extern fn TextLinkOpenURL__2d673e51a68188b8(label: [*c]const i8, url: [*c]const i8) callconv(.c) bool;

    pub const Image = Image__342c5ebe2ac95d69;
    extern fn Image__342c5ebe2ac95d69(tex_ref: ImTextureRef, image_size: *const ImVec2, uv0: *const ImVec2, uv1: *const ImVec2) callconv(.c) void;

    pub const ImageWithBg = ImageWithBg__b8052ea7f43c19e6;
    extern fn ImageWithBg__b8052ea7f43c19e6(tex_ref: ImTextureRef, image_size: *const ImVec2, uv0: *const ImVec2, uv1: *const ImVec2, bg_col: *const ImVec4, tint_col: *const ImVec4) callconv(.c) void;

    pub const ImageButton = ImageButton__603286a5b208ba3a;
    extern fn ImageButton__603286a5b208ba3a(str_id: [*c]const i8, tex_ref: ImTextureRef, image_size: *const ImVec2, uv0: *const ImVec2, uv1: *const ImVec2, bg_col: *const ImVec4, tint_col: *const ImVec4) callconv(.c) bool;

    pub const BeginCombo = BeginCombo__982eb6157ae00543;
    extern fn BeginCombo__982eb6157ae00543(label: [*c]const i8, preview_value: [*c]const i8, flags: i32) callconv(.c) bool;

    pub const EndCombo = EndCombo__7b85c20ecad8113c;
    extern fn EndCombo__7b85c20ecad8113c() callconv(.c) void;

    pub const Combo = Combo__33b7a8c5bbd21f1c;
    extern fn Combo__33b7a8c5bbd21f1c(label: [*c]const i8, current_item: [*c]i32, items: [*]const [*c]const i8, items_count: i32, popup_max_height_in_items: i32) callconv(.c) bool;

    pub const Combo_1 = Combo__33b7a8c5bbd21f1c_1;
    extern fn Combo__33b7a8c5bbd21f1c_1(label: [*c]const i8, current_item: [*c]i32, items_separated_by_zeros: [*c]const i8, popup_max_height_in_items: i32) callconv(.c) bool;

    pub const Combo_2 = Combo__33b7a8c5bbd21f1c_2;
    extern fn Combo__33b7a8c5bbd21f1c_2(label: [*c]const i8, current_item: [*c]i32, getter: [*c]*const fn (*void, i32) callconv(.c) [*c]const i8, user_data: *void, items_count: i32, popup_max_height_in_items: i32) callconv(.c) bool;

    pub const DragFloat = DragFloat__2dc3ae63ba4838e5;
    extern fn DragFloat__2dc3ae63ba4838e5(label: [*c]const i8, v: [*c]f32, v_speed: f32, v_min: f32, v_max: f32, format: [*c]const i8, flags: i32) callconv(.c) bool;

    pub const DragFloat2 = DragFloat2__8d9fe5eb1a30b1ed;
    extern fn DragFloat2__8d9fe5eb1a30b1ed(label: [*c]const i8, v: [*]f32, v_speed: f32, v_min: f32, v_max: f32, format: [*c]const i8, flags: i32) callconv(.c) bool;

    pub const DragFloat3 = DragFloat3__50571b34758bde05;
    extern fn DragFloat3__50571b34758bde05(label: [*c]const i8, v: [*]f32, v_speed: f32, v_min: f32, v_max: f32, format: [*c]const i8, flags: i32) callconv(.c) bool;

    pub const DragFloat4 = DragFloat4__6b7a71b0474266f;
    extern fn DragFloat4__6b7a71b0474266f(label: [*c]const i8, v: [*]f32, v_speed: f32, v_min: f32, v_max: f32, format: [*c]const i8, flags: i32) callconv(.c) bool;

    pub const DragFloatRange2 = DragFloatRange2__dc5350ec4962166;
    extern fn DragFloatRange2__dc5350ec4962166(label: [*c]const i8, v_current_min: [*c]f32, v_current_max: [*c]f32, v_speed: f32, v_min: f32, v_max: f32, format: [*c]const i8, format_max: [*c]const i8, flags: i32) callconv(.c) bool;

    pub const DragInt = DragInt__48968c18374e6155;
    extern fn DragInt__48968c18374e6155(label: [*c]const i8, v: [*c]i32, v_speed: f32, v_min: i32, v_max: i32, format: [*c]const i8, flags: i32) callconv(.c) bool;

    pub const DragInt2 = DragInt2__4a9cbfee33f542eb;
    extern fn DragInt2__4a9cbfee33f542eb(label: [*c]const i8, v: [*]i32, v_speed: f32, v_min: i32, v_max: i32, format: [*c]const i8, flags: i32) callconv(.c) bool;

    pub const DragInt3 = DragInt3__acb39df9ce4ad4ee;
    extern fn DragInt3__acb39df9ce4ad4ee(label: [*c]const i8, v: [*]i32, v_speed: f32, v_min: i32, v_max: i32, format: [*c]const i8, flags: i32) callconv(.c) bool;

    pub const DragInt4 = DragInt4__2ce7c23c675dc127;
    extern fn DragInt4__2ce7c23c675dc127(label: [*c]const i8, v: [*]i32, v_speed: f32, v_min: i32, v_max: i32, format: [*c]const i8, flags: i32) callconv(.c) bool;

    pub const DragIntRange2 = DragIntRange2__4bd494b56354a8db;
    extern fn DragIntRange2__4bd494b56354a8db(label: [*c]const i8, v_current_min: [*c]i32, v_current_max: [*c]i32, v_speed: f32, v_min: i32, v_max: i32, format: [*c]const i8, format_max: [*c]const i8, flags: i32) callconv(.c) bool;

    pub const DragScalar = DragScalar__6f89f343e11e6509;
    extern fn DragScalar__6f89f343e11e6509(label: [*c]const i8, data_type: i32, p_data: *void, v_speed: f32, p_min: *const void, p_max: *const void, format: [*c]const i8, flags: i32) callconv(.c) bool;

    pub const DragScalarN = DragScalarN__ed4b5a615065148d;
    extern fn DragScalarN__ed4b5a615065148d(label: [*c]const i8, data_type: i32, p_data: *void, components: i32, v_speed: f32, p_min: *const void, p_max: *const void, format: [*c]const i8, flags: i32) callconv(.c) bool;

    pub const SliderFloat = SliderFloat__8399777afcd36ad4;
    extern fn SliderFloat__8399777afcd36ad4(label: [*c]const i8, v: [*c]f32, v_min: f32, v_max: f32, format: [*c]const i8, flags: i32) callconv(.c) bool;

    pub const SliderFloat2 = SliderFloat2__2919a8fede815d44;
    extern fn SliderFloat2__2919a8fede815d44(label: [*c]const i8, v: [*]f32, v_min: f32, v_max: f32, format: [*c]const i8, flags: i32) callconv(.c) bool;

    pub const SliderFloat3 = SliderFloat3__29272244e3ee6130;
    extern fn SliderFloat3__29272244e3ee6130(label: [*c]const i8, v: [*]f32, v_min: f32, v_max: f32, format: [*c]const i8, flags: i32) callconv(.c) bool;

    pub const SliderFloat4 = SliderFloat4__f8d7b5965b0e3d6c;
    extern fn SliderFloat4__f8d7b5965b0e3d6c(label: [*c]const i8, v: [*]f32, v_min: f32, v_max: f32, format: [*c]const i8, flags: i32) callconv(.c) bool;

    pub const SliderAngle = SliderAngle__e2ef2656c22a6e81;
    extern fn SliderAngle__e2ef2656c22a6e81(label: [*c]const i8, v_rad: [*c]f32, v_degrees_min: f32, v_degrees_max: f32, format: [*c]const i8, flags: i32) callconv(.c) bool;

    pub const SliderInt = SliderInt__b28ef1af6824a1e3;
    extern fn SliderInt__b28ef1af6824a1e3(label: [*c]const i8, v: [*c]i32, v_min: i32, v_max: i32, format: [*c]const i8, flags: i32) callconv(.c) bool;

    pub const SliderInt2 = SliderInt2__271097e76dee05c6;
    extern fn SliderInt2__271097e76dee05c6(label: [*c]const i8, v: [*]i32, v_min: i32, v_max: i32, format: [*c]const i8, flags: i32) callconv(.c) bool;

    pub const SliderInt3 = SliderInt3__87cf89f9012a5f5a;
    extern fn SliderInt3__87cf89f9012a5f5a(label: [*c]const i8, v: [*]i32, v_min: i32, v_max: i32, format: [*c]const i8, flags: i32) callconv(.c) bool;

    pub const SliderInt4 = SliderInt4__f1cc04f2b79d4aa0;
    extern fn SliderInt4__f1cc04f2b79d4aa0(label: [*c]const i8, v: [*]i32, v_min: i32, v_max: i32, format: [*c]const i8, flags: i32) callconv(.c) bool;

    pub const SliderScalar = SliderScalar__b382a45ea0a95840;
    extern fn SliderScalar__b382a45ea0a95840(label: [*c]const i8, data_type: i32, p_data: *void, p_min: *const void, p_max: *const void, format: [*c]const i8, flags: i32) callconv(.c) bool;

    pub const SliderScalarN = SliderScalarN__11edf311ba51a3e4;
    extern fn SliderScalarN__11edf311ba51a3e4(label: [*c]const i8, data_type: i32, p_data: *void, components: i32, p_min: *const void, p_max: *const void, format: [*c]const i8, flags: i32) callconv(.c) bool;

    pub const VSliderFloat = VSliderFloat__a024399e5bb6641b;
    extern fn VSliderFloat__a024399e5bb6641b(label: [*c]const i8, size: *const ImVec2, v: [*c]f32, v_min: f32, v_max: f32, format: [*c]const i8, flags: i32) callconv(.c) bool;

    pub const VSliderInt = VSliderInt__a09b40107a01af8e;
    extern fn VSliderInt__a09b40107a01af8e(label: [*c]const i8, size: *const ImVec2, v: [*c]i32, v_min: i32, v_max: i32, format: [*c]const i8, flags: i32) callconv(.c) bool;

    pub const VSliderScalar = VSliderScalar__bd3c9c10bbffc6d6;
    extern fn VSliderScalar__bd3c9c10bbffc6d6(label: [*c]const i8, size: *const ImVec2, data_type: i32, p_data: *void, p_min: *const void, p_max: *const void, format: [*c]const i8, flags: i32) callconv(.c) bool;

    pub const InputText = InputText__fb724d96c0a5a49f;
    extern fn InputText__fb724d96c0a5a49f(label: [*c]const i8, buf: [*c]i8, buf_size: u64, flags: i32, callback: [*c]*const fn ([*c]ImGuiInputTextCallbackData) callconv(.c) i32, user_data: *void) callconv(.c) bool;

    pub const InputTextMultiline = InputTextMultiline__5c703f04cb39e5b7;
    extern fn InputTextMultiline__5c703f04cb39e5b7(label: [*c]const i8, buf: [*c]i8, buf_size: u64, size: *const ImVec2, flags: i32, callback: [*c]*const fn ([*c]ImGuiInputTextCallbackData) callconv(.c) i32, user_data: *void) callconv(.c) bool;

    pub const InputTextWithHint = InputTextWithHint__be7651508dbae4e5;
    extern fn InputTextWithHint__be7651508dbae4e5(label: [*c]const i8, hint: [*c]const i8, buf: [*c]i8, buf_size: u64, flags: i32, callback: [*c]*const fn ([*c]ImGuiInputTextCallbackData) callconv(.c) i32, user_data: *void) callconv(.c) bool;

    pub const InputFloat = InputFloat__2f9ccf037b725ed1;
    extern fn InputFloat__2f9ccf037b725ed1(label: [*c]const i8, v: [*c]f32, step: f32, step_fast: f32, format: [*c]const i8, flags: i32) callconv(.c) bool;

    pub const InputFloat2 = InputFloat2__8ab44e1eae8baa7c;
    extern fn InputFloat2__8ab44e1eae8baa7c(label: [*c]const i8, v: [*]f32, format: [*c]const i8, flags: i32) callconv(.c) bool;

    pub const InputFloat3 = InputFloat3__4c27204fb850b1fa;
    extern fn InputFloat3__4c27204fb850b1fa(label: [*c]const i8, v: [*]f32, format: [*c]const i8, flags: i32) callconv(.c) bool;

    pub const InputFloat4 = InputFloat4__fe6d60c91b449b3;
    extern fn InputFloat4__fe6d60c91b449b3(label: [*c]const i8, v: [*]f32, format: [*c]const i8, flags: i32) callconv(.c) bool;

    pub const InputInt = InputInt__97f2b8e96dff3897;
    extern fn InputInt__97f2b8e96dff3897(label: [*c]const i8, v: [*c]i32, step: i32, step_fast: i32, flags: i32) callconv(.c) bool;

    pub const InputInt2 = InputInt2__6e8e822a289682b6;
    extern fn InputInt2__6e8e822a289682b6(label: [*c]const i8, v: [*]i32, flags: i32) callconv(.c) bool;

    pub const InputInt3 = InputInt3__9f57243a13b3dac3;
    extern fn InputInt3__9f57243a13b3dac3(label: [*c]const i8, v: [*]i32, flags: i32) callconv(.c) bool;

    pub const InputInt4 = InputInt4__277bec0a8ee60136;
    extern fn InputInt4__277bec0a8ee60136(label: [*c]const i8, v: [*]i32, flags: i32) callconv(.c) bool;

    pub const InputDouble = InputDouble__8f499ad741e36516;
    extern fn InputDouble__8f499ad741e36516(label: [*c]const i8, v: [*c]f64, step: f64, step_fast: f64, format: [*c]const i8, flags: i32) callconv(.c) bool;

    pub const InputScalar = InputScalar__7d1e21d8a7b17e92;
    extern fn InputScalar__7d1e21d8a7b17e92(label: [*c]const i8, data_type: i32, p_data: *void, p_step: *const void, p_step_fast: *const void, format: [*c]const i8, flags: i32) callconv(.c) bool;

    pub const InputScalarN = InputScalarN__6a41d1d3d997cf9b;
    extern fn InputScalarN__6a41d1d3d997cf9b(label: [*c]const i8, data_type: i32, p_data: *void, components: i32, p_step: *const void, p_step_fast: *const void, format: [*c]const i8, flags: i32) callconv(.c) bool;

    pub const ColorEdit3 = ColorEdit3__a241faa37c3a725c;
    extern fn ColorEdit3__a241faa37c3a725c(label: [*c]const i8, col: [*]f32, flags: i32) callconv(.c) bool;

    pub const ColorEdit4 = ColorEdit4__37f67f5756b3920e;
    extern fn ColorEdit4__37f67f5756b3920e(label: [*c]const i8, col: [*]f32, flags: i32) callconv(.c) bool;

    pub const ColorPicker3 = ColorPicker3__48ebd68e4816d1a6;
    extern fn ColorPicker3__48ebd68e4816d1a6(label: [*c]const i8, col: [*]f32, flags: i32) callconv(.c) bool;

    pub const ColorPicker4 = ColorPicker4__26de24f880244bc2;
    extern fn ColorPicker4__26de24f880244bc2(label: [*c]const i8, col: [*]f32, flags: i32, ref_col: [*c]const f32) callconv(.c) bool;

    pub const ColorButton = ColorButton__ba849f85186e6fcc;
    extern fn ColorButton__ba849f85186e6fcc(desc_id: [*c]const i8, col: *const ImVec4, flags: i32, size: *const ImVec2) callconv(.c) bool;

    pub const SetColorEditOptions = SetColorEditOptions__1e2d52cd718e6e29;
    extern fn SetColorEditOptions__1e2d52cd718e6e29(flags: i32) callconv(.c) void;

    pub const TreeNode = TreeNode__80a9c1696e07455c;
    extern fn TreeNode__80a9c1696e07455c(label: [*c]const i8) callconv(.c) bool;

    pub const TreeNode_1 = TreeNode__80a9c1696e07455c_1;
    extern fn TreeNode__80a9c1696e07455c_1(str_id: [*c]const i8, fmt: [*c]const i8, ...) callconv(.c) bool;

    pub const TreeNode_2 = TreeNode__80a9c1696e07455c_2;
    extern fn TreeNode__80a9c1696e07455c_2(ptr_id: *const void, fmt: [*c]const i8, ...) callconv(.c) bool;

    pub const TreeNodeV = TreeNodeV__3c21e2484267a68a;
    extern fn TreeNodeV__3c21e2484267a68a(str_id: [*c]const i8, fmt: [*c]const i8, args: [*c]i8) callconv(.c) bool;

    pub const TreeNodeV_1 = TreeNodeV__3c21e2484267a68a_1;
    extern fn TreeNodeV__3c21e2484267a68a_1(ptr_id: *const void, fmt: [*c]const i8, args: [*c]i8) callconv(.c) bool;

    pub const TreeNodeEx = TreeNodeEx__42a1e2acbf282485;
    extern fn TreeNodeEx__42a1e2acbf282485(label: [*c]const i8, flags: i32) callconv(.c) bool;

    pub const TreeNodeEx_1 = TreeNodeEx__42a1e2acbf282485_1;
    extern fn TreeNodeEx__42a1e2acbf282485_1(str_id: [*c]const i8, flags: i32, fmt: [*c]const i8, ...) callconv(.c) bool;

    pub const TreeNodeEx_2 = TreeNodeEx__42a1e2acbf282485_2;
    extern fn TreeNodeEx__42a1e2acbf282485_2(ptr_id: *const void, flags: i32, fmt: [*c]const i8, ...) callconv(.c) bool;

    pub const TreeNodeExV = TreeNodeExV__ffd3bf7a0e94717d;
    extern fn TreeNodeExV__ffd3bf7a0e94717d(str_id: [*c]const i8, flags: i32, fmt: [*c]const i8, args: [*c]i8) callconv(.c) bool;

    pub const TreeNodeExV_1 = TreeNodeExV__ffd3bf7a0e94717d_1;
    extern fn TreeNodeExV__ffd3bf7a0e94717d_1(ptr_id: *const void, flags: i32, fmt: [*c]const i8, args: [*c]i8) callconv(.c) bool;

    pub const TreePush = TreePush__dea7774114d872d0;
    extern fn TreePush__dea7774114d872d0(str_id: [*c]const i8) callconv(.c) void;

    pub const TreePush_1 = TreePush__dea7774114d872d0_1;
    extern fn TreePush__dea7774114d872d0_1(ptr_id: *const void) callconv(.c) void;

    pub const TreePop = TreePop__4e7b0e88a0b90cd9;
    extern fn TreePop__4e7b0e88a0b90cd9() callconv(.c) void;

    pub const GetTreeNodeToLabelSpacing = GetTreeNodeToLabelSpacing__ce241a94d50dd4a4;
    extern fn GetTreeNodeToLabelSpacing__ce241a94d50dd4a4() callconv(.c) f32;

    pub const CollapsingHeader = CollapsingHeader__e8c045bc87177fd1;
    extern fn CollapsingHeader__e8c045bc87177fd1(label: [*c]const i8, flags: i32) callconv(.c) bool;

    pub const CollapsingHeader_1 = CollapsingHeader__e8c045bc87177fd1_1;
    extern fn CollapsingHeader__e8c045bc87177fd1_1(label: [*c]const i8, p_visible: [*c]bool, flags: i32) callconv(.c) bool;

    pub const SetNextItemOpen = SetNextItemOpen__418247d9e1902364;
    extern fn SetNextItemOpen__418247d9e1902364(is_open: bool, cond: i32) callconv(.c) void;

    pub const SetNextItemStorageID = SetNextItemStorageID__f2ee1ba9a88e5f7e;
    extern fn SetNextItemStorageID__f2ee1ba9a88e5f7e(storage_id: u32) callconv(.c) void;

    pub const Selectable = Selectable__23766c4a0e015856;
    extern fn Selectable__23766c4a0e015856(label: [*c]const i8, selected: bool, flags: i32, size: *const ImVec2) callconv(.c) bool;

    pub const Selectable_1 = Selectable__23766c4a0e015856_1;
    extern fn Selectable__23766c4a0e015856_1(label: [*c]const i8, p_selected: [*c]bool, flags: i32, size: *const ImVec2) callconv(.c) bool;

    pub const BeginMultiSelect = BeginMultiSelect__200a20f6d0e19c98;
    extern fn BeginMultiSelect__200a20f6d0e19c98(flags: i32, selection_size: i32, items_count: i32) callconv(.c) [*c]ImGuiMultiSelectIO;

    pub const EndMultiSelect = EndMultiSelect__9dc309364baed42f;
    extern fn EndMultiSelect__9dc309364baed42f() callconv(.c) [*c]ImGuiMultiSelectIO;

    pub const SetNextItemSelectionUserData = SetNextItemSelectionUserData__d280e461897b7eb0;
    extern fn SetNextItemSelectionUserData__d280e461897b7eb0(selection_user_data: i64) callconv(.c) void;

    pub const IsItemToggledSelection = IsItemToggledSelection__63c4439a14e13650;
    extern fn IsItemToggledSelection__63c4439a14e13650() callconv(.c) bool;

    pub const BeginListBox = BeginListBox__7e6694cd16075fa5;
    extern fn BeginListBox__7e6694cd16075fa5(label: [*c]const i8, size: *const ImVec2) callconv(.c) bool;

    pub const EndListBox = EndListBox__b7ccb453c404411c;
    extern fn EndListBox__b7ccb453c404411c() callconv(.c) void;

    pub const ListBox = ListBox__1fb0d4c51b313761;
    extern fn ListBox__1fb0d4c51b313761(label: [*c]const i8, current_item: [*c]i32, items: [*]const [*c]const i8, items_count: i32, height_in_items: i32) callconv(.c) bool;

    pub const ListBox_1 = ListBox__1fb0d4c51b313761_1;
    extern fn ListBox__1fb0d4c51b313761_1(label: [*c]const i8, current_item: [*c]i32, getter: [*c]*const fn (*void, i32) callconv(.c) [*c]const i8, user_data: *void, items_count: i32, height_in_items: i32) callconv(.c) bool;

    pub const PlotLines = PlotLines__40060fba323f9778;
    extern fn PlotLines__40060fba323f9778(label: [*c]const i8, values: [*c]const f32, values_count: i32, values_offset: i32, overlay_text: [*c]const i8, scale_min: f32, scale_max: f32, graph_size: ImVec2, stride: i32) callconv(.c) void;

    pub const PlotLines_1 = PlotLines__40060fba323f9778_1;
    extern fn PlotLines__40060fba323f9778_1(label: [*c]const i8, values_getter: [*c]*const fn (*void, i32) callconv(.c) f32, data: *void, values_count: i32, values_offset: i32, overlay_text: [*c]const i8, scale_min: f32, scale_max: f32, graph_size: ImVec2) callconv(.c) void;

    pub const PlotHistogram = PlotHistogram__83ffde114549bbf;
    extern fn PlotHistogram__83ffde114549bbf(label: [*c]const i8, values: [*c]const f32, values_count: i32, values_offset: i32, overlay_text: [*c]const i8, scale_min: f32, scale_max: f32, graph_size: ImVec2, stride: i32) callconv(.c) void;

    pub const PlotHistogram_1 = PlotHistogram__83ffde114549bbf_1;
    extern fn PlotHistogram__83ffde114549bbf_1(label: [*c]const i8, values_getter: [*c]*const fn (*void, i32) callconv(.c) f32, data: *void, values_count: i32, values_offset: i32, overlay_text: [*c]const i8, scale_min: f32, scale_max: f32, graph_size: ImVec2) callconv(.c) void;

    pub const Value = Value__410e34259fd7958d;
    extern fn Value__410e34259fd7958d(prefix: [*c]const i8, b: bool) callconv(.c) void;

    pub const Value_1 = Value__410e34259fd7958d_1;
    extern fn Value__410e34259fd7958d_1(prefix: [*c]const i8, v: i32) callconv(.c) void;

    pub const Value_2 = Value__410e34259fd7958d_2;
    extern fn Value__410e34259fd7958d_2(prefix: [*c]const i8, v: u32) callconv(.c) void;

    pub const Value_3 = Value__410e34259fd7958d_3;
    extern fn Value__410e34259fd7958d_3(prefix: [*c]const i8, v: f32, float_format: [*c]const i8) callconv(.c) void;

    pub const BeginMenuBar = BeginMenuBar__68eeb36db997f2aa;
    extern fn BeginMenuBar__68eeb36db997f2aa() callconv(.c) bool;

    pub const EndMenuBar = EndMenuBar__2190bd3f73ed4e5;
    extern fn EndMenuBar__2190bd3f73ed4e5() callconv(.c) void;

    pub const BeginMainMenuBar = BeginMainMenuBar__451d9c3f72982fe6;
    extern fn BeginMainMenuBar__451d9c3f72982fe6() callconv(.c) bool;

    pub const EndMainMenuBar = EndMainMenuBar__90fb7d8bf9e94f56;
    extern fn EndMainMenuBar__90fb7d8bf9e94f56() callconv(.c) void;

    pub const BeginMenu = BeginMenu__e8b6450765271e0f;
    extern fn BeginMenu__e8b6450765271e0f(label: [*c]const i8, enabled: bool) callconv(.c) bool;

    pub const EndMenu = EndMenu__842571ebafc35d29;
    extern fn EndMenu__842571ebafc35d29() callconv(.c) void;

    pub const MenuItem = MenuItem__26da1c3957b55a90;
    extern fn MenuItem__26da1c3957b55a90(label: [*c]const i8, shortcut: [*c]const i8, selected: bool, enabled: bool) callconv(.c) bool;

    pub const MenuItem_1 = MenuItem__26da1c3957b55a90_1;
    extern fn MenuItem__26da1c3957b55a90_1(label: [*c]const i8, shortcut: [*c]const i8, p_selected: [*c]bool, enabled: bool) callconv(.c) bool;

    pub const BeginTooltip = BeginTooltip__edd44921c3ee49eb;
    extern fn BeginTooltip__edd44921c3ee49eb() callconv(.c) bool;

    pub const EndTooltip = EndTooltip__70cac3b751c22e07;
    extern fn EndTooltip__70cac3b751c22e07() callconv(.c) void;

    pub const SetTooltip = SetTooltip__d2ed7ef13a15aae0;
    extern fn SetTooltip__d2ed7ef13a15aae0(fmt: [*c]const i8, ...) callconv(.c) void;

    pub const SetTooltipV = SetTooltipV__a0f2a64e0e655680;
    extern fn SetTooltipV__a0f2a64e0e655680(fmt: [*c]const i8, args: [*c]i8) callconv(.c) void;

    pub const BeginItemTooltip = BeginItemTooltip__531fce1ba6d5b8f3;
    extern fn BeginItemTooltip__531fce1ba6d5b8f3() callconv(.c) bool;

    pub const SetItemTooltip = SetItemTooltip__7cdd6c788467f187;
    extern fn SetItemTooltip__7cdd6c788467f187(fmt: [*c]const i8, ...) callconv(.c) void;

    pub const SetItemTooltipV = SetItemTooltipV__e748cd91d869d2a1;
    extern fn SetItemTooltipV__e748cd91d869d2a1(fmt: [*c]const i8, args: [*c]i8) callconv(.c) void;

    pub const BeginPopup = BeginPopup__af7decd105d1b4c6;
    extern fn BeginPopup__af7decd105d1b4c6(str_id: [*c]const i8, flags: i32) callconv(.c) bool;

    pub const BeginPopupModal = BeginPopupModal__c39277cb1c014458;
    extern fn BeginPopupModal__c39277cb1c014458(name: [*c]const i8, p_open: [*c]bool, flags: i32) callconv(.c) bool;

    pub const EndPopup = EndPopup__64bfeaf471d1644e;
    extern fn EndPopup__64bfeaf471d1644e() callconv(.c) void;

    pub const OpenPopup = OpenPopup__620aad0c8e1a1f4a;
    extern fn OpenPopup__620aad0c8e1a1f4a(str_id: [*c]const i8, popup_flags: i32) callconv(.c) void;

    pub const OpenPopup_1 = OpenPopup__620aad0c8e1a1f4a_1;
    extern fn OpenPopup__620aad0c8e1a1f4a_1(id: u32, popup_flags: i32) callconv(.c) void;

    pub const OpenPopupOnItemClick = OpenPopupOnItemClick__e2d226632f22c20;
    extern fn OpenPopupOnItemClick__e2d226632f22c20(str_id: [*c]const i8, popup_flags: i32) callconv(.c) void;

    pub const CloseCurrentPopup = CloseCurrentPopup__9e57b10955023e7a;
    extern fn CloseCurrentPopup__9e57b10955023e7a() callconv(.c) void;

    pub const BeginPopupContextItem = BeginPopupContextItem__780d058c91b31ff8;
    extern fn BeginPopupContextItem__780d058c91b31ff8(str_id: [*c]const i8, popup_flags: i32) callconv(.c) bool;

    pub const BeginPopupContextWindow = BeginPopupContextWindow__f71efb0fc1cbb3f9;
    extern fn BeginPopupContextWindow__f71efb0fc1cbb3f9(str_id: [*c]const i8, popup_flags: i32) callconv(.c) bool;

    pub const BeginPopupContextVoid = BeginPopupContextVoid__e84a1cab0911c654;
    extern fn BeginPopupContextVoid__e84a1cab0911c654(str_id: [*c]const i8, popup_flags: i32) callconv(.c) bool;

    pub const IsPopupOpen = IsPopupOpen__24a7cc6afaeb53cf;
    extern fn IsPopupOpen__24a7cc6afaeb53cf(str_id: [*c]const i8, flags: i32) callconv(.c) bool;

    pub const BeginTable = BeginTable__7c86f34a38366f03;
    extern fn BeginTable__7c86f34a38366f03(str_id: [*c]const i8, columns: i32, flags: i32, outer_size: *const ImVec2, inner_width: f32) callconv(.c) bool;

    pub const EndTable = EndTable__36da284655b62d61;
    extern fn EndTable__36da284655b62d61() callconv(.c) void;

    pub const TableNextRow = TableNextRow__44dde2910f4eef96;
    extern fn TableNextRow__44dde2910f4eef96(row_flags: i32, min_row_height: f32) callconv(.c) void;

    pub const TableNextColumn = TableNextColumn__9116ca99147d2990;
    extern fn TableNextColumn__9116ca99147d2990() callconv(.c) bool;

    pub const TableSetColumnIndex = TableSetColumnIndex__8eb2c94e78a9d32d;
    extern fn TableSetColumnIndex__8eb2c94e78a9d32d(column_n: i32) callconv(.c) bool;

    pub const TableSetupColumn = TableSetupColumn__395380f03ff7ab03;
    extern fn TableSetupColumn__395380f03ff7ab03(label: [*c]const i8, flags: i32, init_width_or_weight: f32, user_id: u32) callconv(.c) void;

    pub const TableSetupScrollFreeze = TableSetupScrollFreeze__4d12d0f92856d348;
    extern fn TableSetupScrollFreeze__4d12d0f92856d348(cols: i32, rows: i32) callconv(.c) void;

    pub const TableHeader = TableHeader__798a00acf3a5128b;
    extern fn TableHeader__798a00acf3a5128b(label: [*c]const i8) callconv(.c) void;

    pub const TableHeadersRow = TableHeadersRow__5fceeaeb416d187d;
    extern fn TableHeadersRow__5fceeaeb416d187d() callconv(.c) void;

    pub const TableAngledHeadersRow = TableAngledHeadersRow__9fb41a9800d49aff;
    extern fn TableAngledHeadersRow__9fb41a9800d49aff() callconv(.c) void;

    pub const TableGetSortSpecs = TableGetSortSpecs__5df8fd79c76dac0e;
    extern fn TableGetSortSpecs__5df8fd79c76dac0e() callconv(.c) [*c]ImGuiTableSortSpecs;

    pub const TableGetColumnCount = TableGetColumnCount__6e99a71548595f29;
    extern fn TableGetColumnCount__6e99a71548595f29() callconv(.c) i32;

    pub const TableGetColumnIndex = TableGetColumnIndex__cec05d99739117;
    extern fn TableGetColumnIndex__cec05d99739117() callconv(.c) i32;

    pub const TableGetRowIndex = TableGetRowIndex__788b594343a799cd;
    extern fn TableGetRowIndex__788b594343a799cd() callconv(.c) i32;

    pub const TableGetColumnName = TableGetColumnName__563a353bb3fef88a;
    extern fn TableGetColumnName__563a353bb3fef88a(column_n: i32) callconv(.c) [*c]const i8;

    pub const TableGetColumnFlags = TableGetColumnFlags__5588304353ee148c;
    extern fn TableGetColumnFlags__5588304353ee148c(column_n: i32) callconv(.c) i32;

    pub const TableSetColumnEnabled = TableSetColumnEnabled__9c875c490131a00f;
    extern fn TableSetColumnEnabled__9c875c490131a00f(column_n: i32, v: bool) callconv(.c) void;

    pub const TableGetHoveredColumn = TableGetHoveredColumn__12a5030c0ab12766;
    extern fn TableGetHoveredColumn__12a5030c0ab12766() callconv(.c) i32;

    pub const TableSetBgColor = TableSetBgColor__9ee278dc9fe53c2c;
    extern fn TableSetBgColor__9ee278dc9fe53c2c(target: i32, color: u32, column_n: i32) callconv(.c) void;

    pub const Columns = Columns__86ffd29113234f80;
    extern fn Columns__86ffd29113234f80(count: i32, id: [*c]const i8, borders: bool) callconv(.c) void;

    pub const NextColumn = NextColumn__ac54ba9c02fa72bf;
    extern fn NextColumn__ac54ba9c02fa72bf() callconv(.c) void;

    pub const GetColumnIndex = GetColumnIndex__5589da84cf2639cb;
    extern fn GetColumnIndex__5589da84cf2639cb() callconv(.c) i32;

    pub const GetColumnWidth = GetColumnWidth__33268bb08c5466bb;
    extern fn GetColumnWidth__33268bb08c5466bb(column_index: i32) callconv(.c) f32;

    pub const SetColumnWidth = SetColumnWidth__8c0f202be8be631b;
    extern fn SetColumnWidth__8c0f202be8be631b(column_index: i32, width: f32) callconv(.c) void;

    pub const GetColumnOffset = GetColumnOffset__d3e88ef928c47817;
    extern fn GetColumnOffset__d3e88ef928c47817(column_index: i32) callconv(.c) f32;

    pub const SetColumnOffset = SetColumnOffset__570bd80395952315;
    extern fn SetColumnOffset__570bd80395952315(column_index: i32, offset_x: f32) callconv(.c) void;

    pub const GetColumnsCount = GetColumnsCount__21f24495a856c35e;
    extern fn GetColumnsCount__21f24495a856c35e() callconv(.c) i32;

    pub const BeginTabBar = BeginTabBar__d1b00e36d8e2d417;
    extern fn BeginTabBar__d1b00e36d8e2d417(str_id: [*c]const i8, flags: i32) callconv(.c) bool;

    pub const EndTabBar = EndTabBar__52290b9a2e2db384;
    extern fn EndTabBar__52290b9a2e2db384() callconv(.c) void;

    pub const BeginTabItem = BeginTabItem__477a46f595e13;
    extern fn BeginTabItem__477a46f595e13(label: [*c]const i8, p_open: [*c]bool, flags: i32) callconv(.c) bool;

    pub const EndTabItem = EndTabItem__e0179ccd7fc1b587;
    extern fn EndTabItem__e0179ccd7fc1b587() callconv(.c) void;

    pub const TabItemButton = TabItemButton__84300e4af41a6ac3;
    extern fn TabItemButton__84300e4af41a6ac3(label: [*c]const i8, flags: i32) callconv(.c) bool;

    pub const SetTabItemClosed = SetTabItemClosed__208f691541a5f6d1;
    extern fn SetTabItemClosed__208f691541a5f6d1(tab_or_docked_window_label: [*c]const i8) callconv(.c) void;

    pub const LogToTTY = LogToTTY__d65c762233b9da76;
    extern fn LogToTTY__d65c762233b9da76(auto_open_depth: i32) callconv(.c) void;

    pub const LogToFile = LogToFile__49c03e8156b09a50;
    extern fn LogToFile__49c03e8156b09a50(auto_open_depth: i32, filename: [*c]const i8) callconv(.c) void;

    pub const LogToClipboard = LogToClipboard__feafb6f86af54579;
    extern fn LogToClipboard__feafb6f86af54579(auto_open_depth: i32) callconv(.c) void;

    pub const LogFinish = LogFinish__adf6df9d3cc4a7f;
    extern fn LogFinish__adf6df9d3cc4a7f() callconv(.c) void;

    pub const LogButtons = LogButtons__e5feb74bdecea776;
    extern fn LogButtons__e5feb74bdecea776() callconv(.c) void;

    pub const LogText = LogText__7232fc82144aa652;
    extern fn LogText__7232fc82144aa652(fmt: [*c]const i8, ...) callconv(.c) void;

    pub const LogTextV = LogTextV__402bdaca43d29749;
    extern fn LogTextV__402bdaca43d29749(fmt: [*c]const i8, args: [*c]i8) callconv(.c) void;

    pub const BeginDragDropSource = BeginDragDropSource__361a5fddfc48e5d5;
    extern fn BeginDragDropSource__361a5fddfc48e5d5(flags: i32) callconv(.c) bool;

    pub const SetDragDropPayload = SetDragDropPayload__ab9655c620dc5c99;
    extern fn SetDragDropPayload__ab9655c620dc5c99(type: [*c]const i8, data: *const void, sz: u64, cond: i32) callconv(.c) bool;

    pub const EndDragDropSource = EndDragDropSource__216a2f7392882be3;
    extern fn EndDragDropSource__216a2f7392882be3() callconv(.c) void;

    pub const BeginDragDropTarget = BeginDragDropTarget__e919928f901fff24;
    extern fn BeginDragDropTarget__e919928f901fff24() callconv(.c) bool;

    pub const AcceptDragDropPayload = AcceptDragDropPayload__b7abd83aad61c449;
    extern fn AcceptDragDropPayload__b7abd83aad61c449(type: [*c]const i8, flags: i32) callconv(.c) [*c]const ImGuiPayload;

    pub const EndDragDropTarget = EndDragDropTarget__9d6f80e5c9874ac2;
    extern fn EndDragDropTarget__9d6f80e5c9874ac2() callconv(.c) void;

    pub const GetDragDropPayload = GetDragDropPayload__5f488e5ff613926f;
    extern fn GetDragDropPayload__5f488e5ff613926f() callconv(.c) [*c]const ImGuiPayload;

    pub const BeginDisabled = BeginDisabled__8288de5373e22196;
    extern fn BeginDisabled__8288de5373e22196(disabled: bool) callconv(.c) void;

    pub const EndDisabled = EndDisabled__a4706f935bac625f;
    extern fn EndDisabled__a4706f935bac625f() callconv(.c) void;

    pub const PushClipRect = PushClipRect__f943809f83598e77;
    extern fn PushClipRect__f943809f83598e77(clip_rect_min: *const ImVec2, clip_rect_max: *const ImVec2, intersect_with_current_clip_rect: bool) callconv(.c) void;

    pub const PopClipRect = PopClipRect__6f450f6b6bf04dd1;
    extern fn PopClipRect__6f450f6b6bf04dd1() callconv(.c) void;

    pub const SetItemDefaultFocus = SetItemDefaultFocus__fbe3b895f4400076;
    extern fn SetItemDefaultFocus__fbe3b895f4400076() callconv(.c) void;

    pub const SetKeyboardFocusHere = SetKeyboardFocusHere__b34c6bd9bad33d9a;
    extern fn SetKeyboardFocusHere__b34c6bd9bad33d9a(offset: i32) callconv(.c) void;

    pub const SetNavCursorVisible = SetNavCursorVisible__b3f184ecf1508dd8;
    extern fn SetNavCursorVisible__b3f184ecf1508dd8(visible: bool) callconv(.c) void;

    pub const SetNextItemAllowOverlap = SetNextItemAllowOverlap__c1a9a50f396cc296;
    extern fn SetNextItemAllowOverlap__c1a9a50f396cc296() callconv(.c) void;

    pub const IsItemHovered = IsItemHovered__eb5480eb24eeed52;
    extern fn IsItemHovered__eb5480eb24eeed52(flags: i32) callconv(.c) bool;

    pub const IsItemActive = IsItemActive__6e30d4a06b1c360f;
    extern fn IsItemActive__6e30d4a06b1c360f() callconv(.c) bool;

    pub const IsItemFocused = IsItemFocused__7af1b3e02820ea5;
    extern fn IsItemFocused__7af1b3e02820ea5() callconv(.c) bool;

    pub const IsItemClicked = IsItemClicked__255d1c5c846b4a2b;
    extern fn IsItemClicked__255d1c5c846b4a2b(mouse_button: i32) callconv(.c) bool;

    pub const IsItemVisible = IsItemVisible__a25c43a322017e0b;
    extern fn IsItemVisible__a25c43a322017e0b() callconv(.c) bool;

    pub const IsItemEdited = IsItemEdited__8d67c94241730fb3;
    extern fn IsItemEdited__8d67c94241730fb3() callconv(.c) bool;

    pub const IsItemActivated = IsItemActivated__99ffe7530405ae6;
    extern fn IsItemActivated__99ffe7530405ae6() callconv(.c) bool;

    pub const IsItemDeactivated = IsItemDeactivated__5b2fcb6aa7986a9f;
    extern fn IsItemDeactivated__5b2fcb6aa7986a9f() callconv(.c) bool;

    pub const IsItemDeactivatedAfterEdit = IsItemDeactivatedAfterEdit__e2593bc0cd3c5aed;
    extern fn IsItemDeactivatedAfterEdit__e2593bc0cd3c5aed() callconv(.c) bool;

    pub const IsItemToggledOpen = IsItemToggledOpen__fe74bd795b12b1bb;
    extern fn IsItemToggledOpen__fe74bd795b12b1bb() callconv(.c) bool;

    pub const IsAnyItemHovered = IsAnyItemHovered__c987e5d9fecde969;
    extern fn IsAnyItemHovered__c987e5d9fecde969() callconv(.c) bool;

    pub const IsAnyItemActive = IsAnyItemActive__2eb1e2d1ddd7590d;
    extern fn IsAnyItemActive__2eb1e2d1ddd7590d() callconv(.c) bool;

    pub const IsAnyItemFocused = IsAnyItemFocused__aa94a74ae0320549;
    extern fn IsAnyItemFocused__aa94a74ae0320549() callconv(.c) bool;

    pub const GetItemID = GetItemID__3d6eb69f935786c3;
    extern fn GetItemID__3d6eb69f935786c3() callconv(.c) u32;

    pub const GetItemRectMin = GetItemRectMin__53e9b36d84881940;
    extern fn GetItemRectMin__53e9b36d84881940(zpp_out: *ImVec2) callconv(.c) void;

    pub const GetItemRectMax = GetItemRectMax__69272018b89d5a81;
    extern fn GetItemRectMax__69272018b89d5a81(zpp_out: *ImVec2) callconv(.c) void;

    pub const GetItemRectSize = GetItemRectSize__ba63216f70e1c7ce;
    extern fn GetItemRectSize__ba63216f70e1c7ce(zpp_out: *ImVec2) callconv(.c) void;

    pub const GetMainViewport = GetMainViewport__30a61b76a0b573b;
    extern fn GetMainViewport__30a61b76a0b573b() callconv(.c) [*c]ImGuiViewport;

    pub const GetBackgroundDrawList = GetBackgroundDrawList__184b3ebaa6ef2784;
    extern fn GetBackgroundDrawList__184b3ebaa6ef2784() callconv(.c) [*c]ImDrawList;

    pub const GetForegroundDrawList = GetForegroundDrawList__2394c759322fc18b;
    extern fn GetForegroundDrawList__2394c759322fc18b() callconv(.c) [*c]ImDrawList;

    pub const IsRectVisible = IsRectVisible__91a83cc8546633;
    extern fn IsRectVisible__91a83cc8546633(size: *const ImVec2) callconv(.c) bool;

    pub const IsRectVisible_1 = IsRectVisible__91a83cc8546633_1;
    extern fn IsRectVisible__91a83cc8546633_1(rect_min: *const ImVec2, rect_max: *const ImVec2) callconv(.c) bool;

    pub const GetTime = GetTime__3a02c90ce1962f73;
    extern fn GetTime__3a02c90ce1962f73() callconv(.c) f64;

    pub const GetFrameCount = GetFrameCount__2a9a12740765dae4;
    extern fn GetFrameCount__2a9a12740765dae4() callconv(.c) i32;

    pub const GetDrawListSharedData = GetDrawListSharedData__8649620304273bea;
    extern fn GetDrawListSharedData__8649620304273bea() callconv(.c) [*c]ImDrawListSharedData;

    pub const GetStyleColorName = GetStyleColorName__104002e8be53bb1f;
    extern fn GetStyleColorName__104002e8be53bb1f(idx: i32) callconv(.c) [*c]const i8;

    pub const SetStateStorage = SetStateStorage__f892d22f19fe6f4c;
    extern fn SetStateStorage__f892d22f19fe6f4c(storage: [*c]ImGuiStorage) callconv(.c) void;

    pub const GetStateStorage = GetStateStorage__12e314f172810ac1;
    extern fn GetStateStorage__12e314f172810ac1() callconv(.c) [*c]ImGuiStorage;

    pub const CalcTextSize = CalcTextSize__af665100d52149fb;
    extern fn CalcTextSize__af665100d52149fb(text: [*c]const i8, text_end: [*c]const i8, hide_text_after_double_hash: bool, wrap_width: f32, zpp_out: *ImVec2) callconv(.c) void;

    pub const ColorConvertU32ToFloat4 = ColorConvertU32ToFloat4__1efff13b5f16d7a9;
    extern fn ColorConvertU32ToFloat4__1efff13b5f16d7a9(in: u32, zpp_out: *ImVec4) callconv(.c) void;

    pub const ColorConvertFloat4ToU32 = ColorConvertFloat4ToU32__6810bb20e24b8eed;
    extern fn ColorConvertFloat4ToU32__6810bb20e24b8eed(in: *const ImVec4) callconv(.c) u32;

    pub const ColorConvertRGBtoHSV = ColorConvertRGBtoHSV__75383368abe59de9;
    extern fn ColorConvertRGBtoHSV__75383368abe59de9(r: f32, g: f32, b: f32, out_h: *f32, out_s: *f32, out_v: *f32) callconv(.c) void;

    pub const ColorConvertHSVtoRGB = ColorConvertHSVtoRGB__59b2228f5d43f593;
    extern fn ColorConvertHSVtoRGB__59b2228f5d43f593(h: f32, s: f32, v: f32, out_r: *f32, out_g: *f32, out_b: *f32) callconv(.c) void;

    pub const IsKeyDown = IsKeyDown__b9a94fc762d525ee;
    extern fn IsKeyDown__b9a94fc762d525ee(key: ImGuiKey) callconv(.c) bool;

    pub const IsKeyPressed = IsKeyPressed__f63fedd58cd1075f;
    extern fn IsKeyPressed__f63fedd58cd1075f(key: ImGuiKey, repeat: bool) callconv(.c) bool;

    pub const IsKeyReleased = IsKeyReleased__f3473022f21d87;
    extern fn IsKeyReleased__f3473022f21d87(key: ImGuiKey) callconv(.c) bool;

    pub const IsKeyChordPressed = IsKeyChordPressed__87d59ff29f98d6a;
    extern fn IsKeyChordPressed__87d59ff29f98d6a(key_chord: i32) callconv(.c) bool;

    pub const GetKeyPressedAmount = GetKeyPressedAmount__4ec84b88cac4e7d1;
    extern fn GetKeyPressedAmount__4ec84b88cac4e7d1(key: ImGuiKey, repeat_delay: f32, rate: f32) callconv(.c) i32;

    pub const GetKeyName = GetKeyName__f931db20e063f68;
    extern fn GetKeyName__f931db20e063f68(key: ImGuiKey) callconv(.c) [*c]const i8;

    pub const SetNextFrameWantCaptureKeyboard = SetNextFrameWantCaptureKeyboard__e7119297f6d0dc6c;
    extern fn SetNextFrameWantCaptureKeyboard__e7119297f6d0dc6c(want_capture_keyboard: bool) callconv(.c) void;

    pub const Shortcut = Shortcut__c18f776eab5c1f97;
    extern fn Shortcut__c18f776eab5c1f97(key_chord: i32, flags: i32) callconv(.c) bool;

    pub const SetNextItemShortcut = SetNextItemShortcut__167042793c7fe154;
    extern fn SetNextItemShortcut__167042793c7fe154(key_chord: i32, flags: i32) callconv(.c) void;

    pub const SetItemKeyOwner = SetItemKeyOwner__e3570bea464564bd;
    extern fn SetItemKeyOwner__e3570bea464564bd(key: ImGuiKey) callconv(.c) void;

    pub const IsMouseDown = IsMouseDown__ab95df654cbfaf3f;
    extern fn IsMouseDown__ab95df654cbfaf3f(button: i32) callconv(.c) bool;

    pub const IsMouseClicked = IsMouseClicked__7892138fc77299ed;
    extern fn IsMouseClicked__7892138fc77299ed(button: i32, repeat: bool) callconv(.c) bool;

    pub const IsMouseReleased = IsMouseReleased__37d71e7c3a1ed07a;
    extern fn IsMouseReleased__37d71e7c3a1ed07a(button: i32) callconv(.c) bool;

    pub const IsMouseDoubleClicked = IsMouseDoubleClicked__3802e12256e4a053;
    extern fn IsMouseDoubleClicked__3802e12256e4a053(button: i32) callconv(.c) bool;

    pub const IsMouseReleasedWithDelay = IsMouseReleasedWithDelay__a4c8398ac8355d96;
    extern fn IsMouseReleasedWithDelay__a4c8398ac8355d96(button: i32, delay: f32) callconv(.c) bool;

    pub const GetMouseClickedCount = GetMouseClickedCount__5915b1cb9e70e40f;
    extern fn GetMouseClickedCount__5915b1cb9e70e40f(button: i32) callconv(.c) i32;

    pub const IsMouseHoveringRect = IsMouseHoveringRect__ac123f27bb570f80;
    extern fn IsMouseHoveringRect__ac123f27bb570f80(r_min: *const ImVec2, r_max: *const ImVec2, clip: bool) callconv(.c) bool;

    pub const IsMousePosValid = IsMousePosValid__e9023d707064bd25;
    extern fn IsMousePosValid__e9023d707064bd25(mouse_pos: [*c]const ImVec2) callconv(.c) bool;

    pub const IsAnyMouseDown = IsAnyMouseDown__beea21f057b8ba42;
    extern fn IsAnyMouseDown__beea21f057b8ba42() callconv(.c) bool;

    pub const GetMousePos = GetMousePos__3f408d58028204e5;
    extern fn GetMousePos__3f408d58028204e5(zpp_out: *ImVec2) callconv(.c) void;

    pub const GetMousePosOnOpeningCurrentPopup = GetMousePosOnOpeningCurrentPopup__784cba92ff9a85a2;
    extern fn GetMousePosOnOpeningCurrentPopup__784cba92ff9a85a2(zpp_out: *ImVec2) callconv(.c) void;

    pub const IsMouseDragging = IsMouseDragging__35b0fc6cb18f47d5;
    extern fn IsMouseDragging__35b0fc6cb18f47d5(button: i32, lock_threshold: f32) callconv(.c) bool;

    pub const GetMouseDragDelta = GetMouseDragDelta__5a10a78dfa1cd650;
    extern fn GetMouseDragDelta__5a10a78dfa1cd650(button: i32, lock_threshold: f32, zpp_out: *ImVec2) callconv(.c) void;

    pub const ResetMouseDragDelta = ResetMouseDragDelta__f48b69ff21393016;
    extern fn ResetMouseDragDelta__f48b69ff21393016(button: i32) callconv(.c) void;

    pub const GetMouseCursor = GetMouseCursor__23459e67748e9019;
    extern fn GetMouseCursor__23459e67748e9019() callconv(.c) i32;

    pub const SetMouseCursor = SetMouseCursor__a38ad0a7fc886bb7;
    extern fn SetMouseCursor__a38ad0a7fc886bb7(cursor_type: i32) callconv(.c) void;

    pub const SetNextFrameWantCaptureMouse = SetNextFrameWantCaptureMouse__57f2e59c9da505f0;
    extern fn SetNextFrameWantCaptureMouse__57f2e59c9da505f0(want_capture_mouse: bool) callconv(.c) void;

    pub const GetClipboardText = GetClipboardText__b0acf6b7ce5aeae6;
    extern fn GetClipboardText__b0acf6b7ce5aeae6() callconv(.c) [*c]const i8;

    pub const SetClipboardText = SetClipboardText__26f65c0f131689ec;
    extern fn SetClipboardText__26f65c0f131689ec(text: [*c]const i8) callconv(.c) void;

    pub const LoadIniSettingsFromDisk = LoadIniSettingsFromDisk__38cda985091c2405;
    extern fn LoadIniSettingsFromDisk__38cda985091c2405(ini_filename: [*c]const i8) callconv(.c) void;

    pub const LoadIniSettingsFromMemory = LoadIniSettingsFromMemory__55d39b45163f01c5;
    extern fn LoadIniSettingsFromMemory__55d39b45163f01c5(ini_data: [*c]const i8, ini_size: u64) callconv(.c) void;

    pub const SaveIniSettingsToDisk = SaveIniSettingsToDisk__4308fa59e6d23842;
    extern fn SaveIniSettingsToDisk__4308fa59e6d23842(ini_filename: [*c]const i8) callconv(.c) void;

    pub const SaveIniSettingsToMemory = SaveIniSettingsToMemory__8308ea65108965b5;
    extern fn SaveIniSettingsToMemory__8308ea65108965b5(out_ini_size: [*c]u64) callconv(.c) [*c]const i8;

    pub const DebugTextEncoding = DebugTextEncoding__88b855dfeda6c297;
    extern fn DebugTextEncoding__88b855dfeda6c297(text: [*c]const i8) callconv(.c) void;

    pub const DebugFlashStyleColor = DebugFlashStyleColor__be2b30778c97f0ba;
    extern fn DebugFlashStyleColor__be2b30778c97f0ba(idx: i32) callconv(.c) void;

    pub const DebugStartItemPicker = DebugStartItemPicker__c959107c78594aeb;
    extern fn DebugStartItemPicker__c959107c78594aeb() callconv(.c) void;

    pub const DebugCheckVersionAndDataLayout = DebugCheckVersionAndDataLayout__d8eb31902979c556;
    extern fn DebugCheckVersionAndDataLayout__d8eb31902979c556(version_str: [*c]const i8, sz_io: u64, sz_style: u64, sz_vec2: u64, sz_vec4: u64, sz_drawvert: u64, sz_drawidx: u64) callconv(.c) bool;

    pub const DebugLog = DebugLog__7f5d6c7f09c89a1;
    extern fn DebugLog__7f5d6c7f09c89a1(fmt: [*c]const i8, ...) callconv(.c) void;

    pub const DebugLogV = DebugLogV__5278711653f9ba1a;
    extern fn DebugLogV__5278711653f9ba1a(fmt: [*c]const i8, args: [*c]i8) callconv(.c) void;

    pub const SetAllocatorFunctions = SetAllocatorFunctions__54c5400d9fef432e;
    extern fn SetAllocatorFunctions__54c5400d9fef432e(alloc_func: [*c]*const fn (u64, *void) callconv(.c) *void, free_func: [*c]*const fn (*void, *void) callconv(.c) void, user_data: *void) callconv(.c) void;

    pub const GetAllocatorFunctions = GetAllocatorFunctions__8dea9f4e68db4acc;
    extern fn GetAllocatorFunctions__8dea9f4e68db4acc(p_alloc_func: [*c][*c]*const fn (u64, *void) callconv(.c) *void, p_free_func: [*c][*c]*const fn (*void, *void) callconv(.c) void, p_user_data: [*c]*void) callconv(.c) void;

    pub const MemAlloc = MemAlloc__e60dc2713666b50d;
    extern fn MemAlloc__e60dc2713666b50d(size: u64) callconv(.c) *void;

    pub const MemFree = MemFree__30e36caf65239a1d;
    extern fn MemFree__30e36caf65239a1d(ptr: *void) callconv(.c) void;

    pub const PushFont_1 = PushFont__57a48dfb3f59b615_1;
    extern fn PushFont__57a48dfb3f59b615_1(font: [*c]ImFont) callconv(.c) void;

    pub const SetWindowFontScale = SetWindowFontScale__251e322a2613dd77;
    extern fn SetWindowFontScale__251e322a2613dd77(scale: f32) callconv(.c) void;

    pub const Image_1 = Image__342c5ebe2ac95d69_1;
    extern fn Image__342c5ebe2ac95d69_1(tex_ref: ImTextureRef, image_size: *const ImVec2, uv0: *const ImVec2, uv1: *const ImVec2, tint_col: *const ImVec4, border_col: *const ImVec4) callconv(.c) void;

    pub const PushButtonRepeat = PushButtonRepeat__ef4515f341d3ee86;
    extern fn PushButtonRepeat__ef4515f341d3ee86(repeat: bool) callconv(.c) void;

    pub const PopButtonRepeat = PopButtonRepeat__4b428aee82902eb3;
    extern fn PopButtonRepeat__4b428aee82902eb3() callconv(.c) void;

    pub const PushTabStop = PushTabStop__a1012eece897cc22;
    extern fn PushTabStop__a1012eece897cc22(tab_stop: bool) callconv(.c) void;

    pub const PopTabStop = PopTabStop__b231eb0015e48140;
    extern fn PopTabStop__b231eb0015e48140() callconv(.c) void;

    pub const GetContentRegionMax = GetContentRegionMax__d1d45c226c418d4e;
    extern fn GetContentRegionMax__d1d45c226c418d4e(zpp_out: *ImVec2) callconv(.c) void;

    pub const GetWindowContentRegionMin = GetWindowContentRegionMin__84b7e4c3963e2e83;
    extern fn GetWindowContentRegionMin__84b7e4c3963e2e83(zpp_out: *ImVec2) callconv(.c) void;

    pub const GetWindowContentRegionMax = GetWindowContentRegionMax__573b515ed142bfc5;
    extern fn GetWindowContentRegionMax__573b515ed142bfc5(zpp_out: *ImVec2) callconv(.c) void;

    pub const BeginChildFrame = BeginChildFrame__71165973d18f6615;
    extern fn BeginChildFrame__71165973d18f6615(id: u32, size: *const ImVec2, window_flags: i32) callconv(.c) bool;

    pub const EndChildFrame = EndChildFrame__272850244b954c1f;
    extern fn EndChildFrame__272850244b954c1f() callconv(.c) void;

    pub const ShowStackToolWindow = ShowStackToolWindow__a0b24c05261d8cc1;
    extern fn ShowStackToolWindow__a0b24c05261d8cc1(p_open: [*c]bool) callconv(.c) void;

    pub const Combo_3 = Combo__33b7a8c5bbd21f1c_3;
    extern fn Combo__33b7a8c5bbd21f1c_3(label: [*c]const i8, current_item: [*c]i32, old_callback: [*c]*const fn (*void, i32, [*c][*c]const i8) callconv(.c) bool, user_data: *void, items_count: i32, popup_max_height_in_items: i32) callconv(.c) bool;

    pub const ListBox_2 = ListBox__1fb0d4c51b313761_2;
    extern fn ListBox__1fb0d4c51b313761_2(label: [*c]const i8, current_item: [*c]i32, old_callback: [*c]*const fn (*void, i32, [*c][*c]const i8) callconv(.c) bool, user_data: *void, items_count: i32, height_in_items: i32) callconv(.c) bool;

    pub const SetItemAllowOverlap = SetItemAllowOverlap__32090b34a719f510;
    extern fn SetItemAllowOverlap__32090b34a719f510() callconv(.c) void;

    comptime {
        refAllDecls(@This());
    }
};

pub const ImGuiWindowFlags_ = packed struct(i32) {
    data: i32,
    pub const ImGuiWindowFlags_None: ImGuiWindowFlags_ = .{ .data = 0 };
    pub const ImGuiWindowFlags_NoTitleBar: ImGuiWindowFlags_ = .{ .data = 1 };
    pub const ImGuiWindowFlags_NoResize: ImGuiWindowFlags_ = .{ .data = 2 };
    pub const ImGuiWindowFlags_NoMove: ImGuiWindowFlags_ = .{ .data = 4 };
    pub const ImGuiWindowFlags_NoScrollbar: ImGuiWindowFlags_ = .{ .data = 8 };
    pub const ImGuiWindowFlags_NoScrollWithMouse: ImGuiWindowFlags_ = .{ .data = 16 };
    pub const ImGuiWindowFlags_NoCollapse: ImGuiWindowFlags_ = .{ .data = 32 };
    pub const ImGuiWindowFlags_AlwaysAutoResize: ImGuiWindowFlags_ = .{ .data = 64 };
    pub const ImGuiWindowFlags_NoBackground: ImGuiWindowFlags_ = .{ .data = 128 };
    pub const ImGuiWindowFlags_NoSavedSettings: ImGuiWindowFlags_ = .{ .data = 256 };
    pub const ImGuiWindowFlags_NoMouseInputs: ImGuiWindowFlags_ = .{ .data = 512 };
    pub const ImGuiWindowFlags_MenuBar: ImGuiWindowFlags_ = .{ .data = 1024 };
    pub const ImGuiWindowFlags_HorizontalScrollbar: ImGuiWindowFlags_ = .{ .data = 2048 };
    pub const ImGuiWindowFlags_NoFocusOnAppearing: ImGuiWindowFlags_ = .{ .data = 4096 };
    pub const ImGuiWindowFlags_NoBringToFrontOnFocus: ImGuiWindowFlags_ = .{ .data = 8192 };
    pub const ImGuiWindowFlags_AlwaysVerticalScrollbar: ImGuiWindowFlags_ = .{ .data = 16384 };
    pub const ImGuiWindowFlags_AlwaysHorizontalScrollbar: ImGuiWindowFlags_ = .{ .data = 32768 };
    pub const ImGuiWindowFlags_NoNavInputs: ImGuiWindowFlags_ = .{ .data = 65536 };
    pub const ImGuiWindowFlags_NoNavFocus: ImGuiWindowFlags_ = .{ .data = 131072 };
    pub const ImGuiWindowFlags_UnsavedDocument: ImGuiWindowFlags_ = .{ .data = 262144 };
    pub const ImGuiWindowFlags_NoNav: ImGuiWindowFlags_ = .{ .data = 196608 };
    pub const ImGuiWindowFlags_NoDecoration: ImGuiWindowFlags_ = .{ .data = 43 };
    pub const ImGuiWindowFlags_NoInputs: ImGuiWindowFlags_ = .{ .data = 197120 };
    pub const ImGuiWindowFlags_ChildWindow: ImGuiWindowFlags_ = .{ .data = 16777216 };
    pub const ImGuiWindowFlags_Tooltip: ImGuiWindowFlags_ = .{ .data = 33554432 };
    pub const ImGuiWindowFlags_Popup: ImGuiWindowFlags_ = .{ .data = 67108864 };
    pub const ImGuiWindowFlags_Modal: ImGuiWindowFlags_ = .{ .data = 134217728 };
    pub const ImGuiWindowFlags_ChildMenu: ImGuiWindowFlags_ = .{ .data = 268435456 };
    pub const ImGuiWindowFlags_NavFlattened: ImGuiWindowFlags_ = .{ .data = 536870912 };
    pub const ImGuiWindowFlags_AlwaysUseWindowPadding: ImGuiWindowFlags_ = .{ .data = 1073741824 };
};

pub const ImGuiChildFlags_ = packed struct(i32) {
    data: i32,
    pub const ImGuiChildFlags_None: ImGuiChildFlags_ = .{ .data = 0 };
    pub const ImGuiChildFlags_Borders: ImGuiChildFlags_ = .{ .data = 1 };
    pub const ImGuiChildFlags_AlwaysUseWindowPadding: ImGuiChildFlags_ = .{ .data = 2 };
    pub const ImGuiChildFlags_ResizeX: ImGuiChildFlags_ = .{ .data = 4 };
    pub const ImGuiChildFlags_ResizeY: ImGuiChildFlags_ = .{ .data = 8 };
    pub const ImGuiChildFlags_AutoResizeX: ImGuiChildFlags_ = .{ .data = 16 };
    pub const ImGuiChildFlags_AutoResizeY: ImGuiChildFlags_ = .{ .data = 32 };
    pub const ImGuiChildFlags_AlwaysAutoResize: ImGuiChildFlags_ = .{ .data = 64 };
    pub const ImGuiChildFlags_FrameStyle: ImGuiChildFlags_ = .{ .data = 128 };
    pub const ImGuiChildFlags_NavFlattened: ImGuiChildFlags_ = .{ .data = 256 };
    pub const ImGuiChildFlags_Border: ImGuiChildFlags_ = .{ .data = 1 };
};

pub const ImGuiItemFlags_ = packed struct(i32) {
    data: i32,
    pub const ImGuiItemFlags_None: ImGuiItemFlags_ = .{ .data = 0 };
    pub const ImGuiItemFlags_NoTabStop: ImGuiItemFlags_ = .{ .data = 1 };
    pub const ImGuiItemFlags_NoNav: ImGuiItemFlags_ = .{ .data = 2 };
    pub const ImGuiItemFlags_NoNavDefaultFocus: ImGuiItemFlags_ = .{ .data = 4 };
    pub const ImGuiItemFlags_ButtonRepeat: ImGuiItemFlags_ = .{ .data = 8 };
    pub const ImGuiItemFlags_AutoClosePopups: ImGuiItemFlags_ = .{ .data = 16 };
    pub const ImGuiItemFlags_AllowDuplicateId: ImGuiItemFlags_ = .{ .data = 32 };
};

pub const ImGuiInputTextFlags_ = packed struct(i32) {
    data: i32,
    pub const ImGuiInputTextFlags_None: ImGuiInputTextFlags_ = .{ .data = 0 };
    pub const ImGuiInputTextFlags_CharsDecimal: ImGuiInputTextFlags_ = .{ .data = 1 };
    pub const ImGuiInputTextFlags_CharsHexadecimal: ImGuiInputTextFlags_ = .{ .data = 2 };
    pub const ImGuiInputTextFlags_CharsScientific: ImGuiInputTextFlags_ = .{ .data = 4 };
    pub const ImGuiInputTextFlags_CharsUppercase: ImGuiInputTextFlags_ = .{ .data = 8 };
    pub const ImGuiInputTextFlags_CharsNoBlank: ImGuiInputTextFlags_ = .{ .data = 16 };
    pub const ImGuiInputTextFlags_AllowTabInput: ImGuiInputTextFlags_ = .{ .data = 32 };
    pub const ImGuiInputTextFlags_EnterReturnsTrue: ImGuiInputTextFlags_ = .{ .data = 64 };
    pub const ImGuiInputTextFlags_EscapeClearsAll: ImGuiInputTextFlags_ = .{ .data = 128 };
    pub const ImGuiInputTextFlags_CtrlEnterForNewLine: ImGuiInputTextFlags_ = .{ .data = 256 };
    pub const ImGuiInputTextFlags_ReadOnly: ImGuiInputTextFlags_ = .{ .data = 512 };
    pub const ImGuiInputTextFlags_Password: ImGuiInputTextFlags_ = .{ .data = 1024 };
    pub const ImGuiInputTextFlags_AlwaysOverwrite: ImGuiInputTextFlags_ = .{ .data = 2048 };
    pub const ImGuiInputTextFlags_AutoSelectAll: ImGuiInputTextFlags_ = .{ .data = 4096 };
    pub const ImGuiInputTextFlags_ParseEmptyRefVal: ImGuiInputTextFlags_ = .{ .data = 8192 };
    pub const ImGuiInputTextFlags_DisplayEmptyRefVal: ImGuiInputTextFlags_ = .{ .data = 16384 };
    pub const ImGuiInputTextFlags_NoHorizontalScroll: ImGuiInputTextFlags_ = .{ .data = 32768 };
    pub const ImGuiInputTextFlags_NoUndoRedo: ImGuiInputTextFlags_ = .{ .data = 65536 };
    pub const ImGuiInputTextFlags_ElideLeft: ImGuiInputTextFlags_ = .{ .data = 131072 };
    pub const ImGuiInputTextFlags_CallbackCompletion: ImGuiInputTextFlags_ = .{ .data = 262144 };
    pub const ImGuiInputTextFlags_CallbackHistory: ImGuiInputTextFlags_ = .{ .data = 524288 };
    pub const ImGuiInputTextFlags_CallbackAlways: ImGuiInputTextFlags_ = .{ .data = 1048576 };
    pub const ImGuiInputTextFlags_CallbackCharFilter: ImGuiInputTextFlags_ = .{ .data = 2097152 };
    pub const ImGuiInputTextFlags_CallbackResize: ImGuiInputTextFlags_ = .{ .data = 4194304 };
    pub const ImGuiInputTextFlags_CallbackEdit: ImGuiInputTextFlags_ = .{ .data = 8388608 };
};

pub const ImGuiTreeNodeFlags_ = packed struct(i32) {
    data: i32,
    pub const ImGuiTreeNodeFlags_None: ImGuiTreeNodeFlags_ = .{ .data = 0 };
    pub const ImGuiTreeNodeFlags_Selected: ImGuiTreeNodeFlags_ = .{ .data = 1 };
    pub const ImGuiTreeNodeFlags_Framed: ImGuiTreeNodeFlags_ = .{ .data = 2 };
    pub const ImGuiTreeNodeFlags_AllowOverlap: ImGuiTreeNodeFlags_ = .{ .data = 4 };
    pub const ImGuiTreeNodeFlags_NoTreePushOnOpen: ImGuiTreeNodeFlags_ = .{ .data = 8 };
    pub const ImGuiTreeNodeFlags_NoAutoOpenOnLog: ImGuiTreeNodeFlags_ = .{ .data = 16 };
    pub const ImGuiTreeNodeFlags_DefaultOpen: ImGuiTreeNodeFlags_ = .{ .data = 32 };
    pub const ImGuiTreeNodeFlags_OpenOnDoubleClick: ImGuiTreeNodeFlags_ = .{ .data = 64 };
    pub const ImGuiTreeNodeFlags_OpenOnArrow: ImGuiTreeNodeFlags_ = .{ .data = 128 };
    pub const ImGuiTreeNodeFlags_Leaf: ImGuiTreeNodeFlags_ = .{ .data = 256 };
    pub const ImGuiTreeNodeFlags_Bullet: ImGuiTreeNodeFlags_ = .{ .data = 512 };
    pub const ImGuiTreeNodeFlags_FramePadding: ImGuiTreeNodeFlags_ = .{ .data = 1024 };
    pub const ImGuiTreeNodeFlags_SpanAvailWidth: ImGuiTreeNodeFlags_ = .{ .data = 2048 };
    pub const ImGuiTreeNodeFlags_SpanFullWidth: ImGuiTreeNodeFlags_ = .{ .data = 4096 };
    pub const ImGuiTreeNodeFlags_SpanLabelWidth: ImGuiTreeNodeFlags_ = .{ .data = 8192 };
    pub const ImGuiTreeNodeFlags_SpanAllColumns: ImGuiTreeNodeFlags_ = .{ .data = 16384 };
    pub const ImGuiTreeNodeFlags_LabelSpanAllColumns: ImGuiTreeNodeFlags_ = .{ .data = 32768 };
    pub const ImGuiTreeNodeFlags_NavLeftJumpsToParent: ImGuiTreeNodeFlags_ = .{ .data = 131072 };
    pub const ImGuiTreeNodeFlags_CollapsingHeader: ImGuiTreeNodeFlags_ = .{ .data = 26 };
    pub const ImGuiTreeNodeFlags_DrawLinesNone: ImGuiTreeNodeFlags_ = .{ .data = 262144 };
    pub const ImGuiTreeNodeFlags_DrawLinesFull: ImGuiTreeNodeFlags_ = .{ .data = 524288 };
    pub const ImGuiTreeNodeFlags_DrawLinesToNodes: ImGuiTreeNodeFlags_ = .{ .data = 1048576 };
    pub const ImGuiTreeNodeFlags_NavLeftJumpsBackHere: ImGuiTreeNodeFlags_ = .{ .data = 131072 };
    pub const ImGuiTreeNodeFlags_SpanTextWidth: ImGuiTreeNodeFlags_ = .{ .data = 8192 };
    pub const ImGuiTreeNodeFlags_AllowItemOverlap: ImGuiTreeNodeFlags_ = .{ .data = 4 };
};

pub const ImGuiPopupFlags_ = packed struct(i32) {
    data: i32,
    pub const ImGuiPopupFlags_None: ImGuiPopupFlags_ = .{ .data = 0 };
    pub const ImGuiPopupFlags_MouseButtonLeft: ImGuiPopupFlags_ = .{ .data = 0 };
    pub const ImGuiPopupFlags_MouseButtonRight: ImGuiPopupFlags_ = .{ .data = 1 };
    pub const ImGuiPopupFlags_MouseButtonMiddle: ImGuiPopupFlags_ = .{ .data = 2 };
    pub const ImGuiPopupFlags_MouseButtonMask_: ImGuiPopupFlags_ = .{ .data = 31 };
    pub const ImGuiPopupFlags_MouseButtonDefault_: ImGuiPopupFlags_ = .{ .data = 1 };
    pub const ImGuiPopupFlags_NoReopen: ImGuiPopupFlags_ = .{ .data = 32 };
    pub const ImGuiPopupFlags_NoOpenOverExistingPopup: ImGuiPopupFlags_ = .{ .data = 128 };
    pub const ImGuiPopupFlags_NoOpenOverItems: ImGuiPopupFlags_ = .{ .data = 256 };
    pub const ImGuiPopupFlags_AnyPopupId: ImGuiPopupFlags_ = .{ .data = 1024 };
    pub const ImGuiPopupFlags_AnyPopupLevel: ImGuiPopupFlags_ = .{ .data = 2048 };
    pub const ImGuiPopupFlags_AnyPopup: ImGuiPopupFlags_ = .{ .data = 3072 };
};

pub const ImGuiSelectableFlags_ = packed struct(i32) {
    data: i32,
    pub const ImGuiSelectableFlags_None: ImGuiSelectableFlags_ = .{ .data = 0 };
    pub const ImGuiSelectableFlags_NoAutoClosePopups: ImGuiSelectableFlags_ = .{ .data = 1 };
    pub const ImGuiSelectableFlags_SpanAllColumns: ImGuiSelectableFlags_ = .{ .data = 2 };
    pub const ImGuiSelectableFlags_AllowDoubleClick: ImGuiSelectableFlags_ = .{ .data = 4 };
    pub const ImGuiSelectableFlags_Disabled: ImGuiSelectableFlags_ = .{ .data = 8 };
    pub const ImGuiSelectableFlags_AllowOverlap: ImGuiSelectableFlags_ = .{ .data = 16 };
    pub const ImGuiSelectableFlags_Highlight: ImGuiSelectableFlags_ = .{ .data = 32 };
    pub const ImGuiSelectableFlags_DontClosePopups: ImGuiSelectableFlags_ = .{ .data = 1 };
    pub const ImGuiSelectableFlags_AllowItemOverlap: ImGuiSelectableFlags_ = .{ .data = 16 };
};

pub const ImGuiComboFlags_ = packed struct(i32) {
    data: i32,
    pub const ImGuiComboFlags_None: ImGuiComboFlags_ = .{ .data = 0 };
    pub const ImGuiComboFlags_PopupAlignLeft: ImGuiComboFlags_ = .{ .data = 1 };
    pub const ImGuiComboFlags_HeightSmall: ImGuiComboFlags_ = .{ .data = 2 };
    pub const ImGuiComboFlags_HeightRegular: ImGuiComboFlags_ = .{ .data = 4 };
    pub const ImGuiComboFlags_HeightLarge: ImGuiComboFlags_ = .{ .data = 8 };
    pub const ImGuiComboFlags_HeightLargest: ImGuiComboFlags_ = .{ .data = 16 };
    pub const ImGuiComboFlags_NoArrowButton: ImGuiComboFlags_ = .{ .data = 32 };
    pub const ImGuiComboFlags_NoPreview: ImGuiComboFlags_ = .{ .data = 64 };
    pub const ImGuiComboFlags_WidthFitPreview: ImGuiComboFlags_ = .{ .data = 128 };
    pub const ImGuiComboFlags_HeightMask_: ImGuiComboFlags_ = .{ .data = 30 };
};

pub const ImGuiTabBarFlags_ = packed struct(i32) {
    data: i32,
    pub const ImGuiTabBarFlags_None: ImGuiTabBarFlags_ = .{ .data = 0 };
    pub const ImGuiTabBarFlags_Reorderable: ImGuiTabBarFlags_ = .{ .data = 1 };
    pub const ImGuiTabBarFlags_AutoSelectNewTabs: ImGuiTabBarFlags_ = .{ .data = 2 };
    pub const ImGuiTabBarFlags_TabListPopupButton: ImGuiTabBarFlags_ = .{ .data = 4 };
    pub const ImGuiTabBarFlags_NoCloseWithMiddleMouseButton: ImGuiTabBarFlags_ = .{ .data = 8 };
    pub const ImGuiTabBarFlags_NoTabListScrollingButtons: ImGuiTabBarFlags_ = .{ .data = 16 };
    pub const ImGuiTabBarFlags_NoTooltip: ImGuiTabBarFlags_ = .{ .data = 32 };
    pub const ImGuiTabBarFlags_DrawSelectedOverline: ImGuiTabBarFlags_ = .{ .data = 64 };
    pub const ImGuiTabBarFlags_FittingPolicyMixed: ImGuiTabBarFlags_ = .{ .data = 128 };
    pub const ImGuiTabBarFlags_FittingPolicyShrink: ImGuiTabBarFlags_ = .{ .data = 256 };
    pub const ImGuiTabBarFlags_FittingPolicyScroll: ImGuiTabBarFlags_ = .{ .data = 512 };
    pub const ImGuiTabBarFlags_FittingPolicyMask_: ImGuiTabBarFlags_ = .{ .data = 896 };
    pub const ImGuiTabBarFlags_FittingPolicyDefault_: ImGuiTabBarFlags_ = .{ .data = 128 };
    pub const ImGuiTabBarFlags_FittingPolicyResizeDown: ImGuiTabBarFlags_ = .{ .data = 256 };
};

pub const ImGuiTabItemFlags_ = packed struct(i32) {
    data: i32,
    pub const ImGuiTabItemFlags_None: ImGuiTabItemFlags_ = .{ .data = 0 };
    pub const ImGuiTabItemFlags_UnsavedDocument: ImGuiTabItemFlags_ = .{ .data = 1 };
    pub const ImGuiTabItemFlags_SetSelected: ImGuiTabItemFlags_ = .{ .data = 2 };
    pub const ImGuiTabItemFlags_NoCloseWithMiddleMouseButton: ImGuiTabItemFlags_ = .{ .data = 4 };
    pub const ImGuiTabItemFlags_NoPushId: ImGuiTabItemFlags_ = .{ .data = 8 };
    pub const ImGuiTabItemFlags_NoTooltip: ImGuiTabItemFlags_ = .{ .data = 16 };
    pub const ImGuiTabItemFlags_NoReorder: ImGuiTabItemFlags_ = .{ .data = 32 };
    pub const ImGuiTabItemFlags_Leading: ImGuiTabItemFlags_ = .{ .data = 64 };
    pub const ImGuiTabItemFlags_Trailing: ImGuiTabItemFlags_ = .{ .data = 128 };
    pub const ImGuiTabItemFlags_NoAssumedClosure: ImGuiTabItemFlags_ = .{ .data = 256 };
};

pub const ImGuiFocusedFlags_ = packed struct(i32) {
    data: i32,
    pub const ImGuiFocusedFlags_None: ImGuiFocusedFlags_ = .{ .data = 0 };
    pub const ImGuiFocusedFlags_ChildWindows: ImGuiFocusedFlags_ = .{ .data = 1 };
    pub const ImGuiFocusedFlags_RootWindow: ImGuiFocusedFlags_ = .{ .data = 2 };
    pub const ImGuiFocusedFlags_AnyWindow: ImGuiFocusedFlags_ = .{ .data = 4 };
    pub const ImGuiFocusedFlags_NoPopupHierarchy: ImGuiFocusedFlags_ = .{ .data = 8 };
    pub const ImGuiFocusedFlags_RootAndChildWindows: ImGuiFocusedFlags_ = .{ .data = 3 };
};

pub const ImGuiHoveredFlags_ = packed struct(i32) {
    data: i32,
    pub const ImGuiHoveredFlags_None: ImGuiHoveredFlags_ = .{ .data = 0 };
    pub const ImGuiHoveredFlags_ChildWindows: ImGuiHoveredFlags_ = .{ .data = 1 };
    pub const ImGuiHoveredFlags_RootWindow: ImGuiHoveredFlags_ = .{ .data = 2 };
    pub const ImGuiHoveredFlags_AnyWindow: ImGuiHoveredFlags_ = .{ .data = 4 };
    pub const ImGuiHoveredFlags_NoPopupHierarchy: ImGuiHoveredFlags_ = .{ .data = 8 };
    pub const ImGuiHoveredFlags_AllowWhenBlockedByPopup: ImGuiHoveredFlags_ = .{ .data = 32 };
    pub const ImGuiHoveredFlags_AllowWhenBlockedByActiveItem: ImGuiHoveredFlags_ = .{ .data = 128 };
    pub const ImGuiHoveredFlags_AllowWhenOverlappedByItem: ImGuiHoveredFlags_ = .{ .data = 256 };
    pub const ImGuiHoveredFlags_AllowWhenOverlappedByWindow: ImGuiHoveredFlags_ = .{ .data = 512 };
    pub const ImGuiHoveredFlags_AllowWhenDisabled: ImGuiHoveredFlags_ = .{ .data = 1024 };
    pub const ImGuiHoveredFlags_NoNavOverride: ImGuiHoveredFlags_ = .{ .data = 2048 };
    pub const ImGuiHoveredFlags_AllowWhenOverlapped: ImGuiHoveredFlags_ = .{ .data = 768 };
    pub const ImGuiHoveredFlags_RectOnly: ImGuiHoveredFlags_ = .{ .data = 928 };
    pub const ImGuiHoveredFlags_RootAndChildWindows: ImGuiHoveredFlags_ = .{ .data = 3 };
    pub const ImGuiHoveredFlags_ForTooltip: ImGuiHoveredFlags_ = .{ .data = 4096 };
    pub const ImGuiHoveredFlags_Stationary: ImGuiHoveredFlags_ = .{ .data = 8192 };
    pub const ImGuiHoveredFlags_DelayNone: ImGuiHoveredFlags_ = .{ .data = 16384 };
    pub const ImGuiHoveredFlags_DelayShort: ImGuiHoveredFlags_ = .{ .data = 32768 };
    pub const ImGuiHoveredFlags_DelayNormal: ImGuiHoveredFlags_ = .{ .data = 65536 };
    pub const ImGuiHoveredFlags_NoSharedDelay: ImGuiHoveredFlags_ = .{ .data = 131072 };
};

pub const ImGuiDragDropFlags_ = packed struct(i32) {
    data: i32,
    pub const ImGuiDragDropFlags_None: ImGuiDragDropFlags_ = .{ .data = 0 };
    pub const ImGuiDragDropFlags_SourceNoPreviewTooltip: ImGuiDragDropFlags_ = .{ .data = 1 };
    pub const ImGuiDragDropFlags_SourceNoDisableHover: ImGuiDragDropFlags_ = .{ .data = 2 };
    pub const ImGuiDragDropFlags_SourceNoHoldToOpenOthers: ImGuiDragDropFlags_ = .{ .data = 4 };
    pub const ImGuiDragDropFlags_SourceAllowNullID: ImGuiDragDropFlags_ = .{ .data = 8 };
    pub const ImGuiDragDropFlags_SourceExtern: ImGuiDragDropFlags_ = .{ .data = 16 };
    pub const ImGuiDragDropFlags_PayloadAutoExpire: ImGuiDragDropFlags_ = .{ .data = 32 };
    pub const ImGuiDragDropFlags_PayloadNoCrossContext: ImGuiDragDropFlags_ = .{ .data = 64 };
    pub const ImGuiDragDropFlags_PayloadNoCrossProcess: ImGuiDragDropFlags_ = .{ .data = 128 };
    pub const ImGuiDragDropFlags_AcceptBeforeDelivery: ImGuiDragDropFlags_ = .{ .data = 1024 };
    pub const ImGuiDragDropFlags_AcceptNoDrawDefaultRect: ImGuiDragDropFlags_ = .{ .data = 2048 };
    pub const ImGuiDragDropFlags_AcceptNoPreviewTooltip: ImGuiDragDropFlags_ = .{ .data = 4096 };
    pub const ImGuiDragDropFlags_AcceptPeekOnly: ImGuiDragDropFlags_ = .{ .data = 3072 };
    pub const ImGuiDragDropFlags_SourceAutoExpirePayload: ImGuiDragDropFlags_ = .{ .data = 32 };
};

pub const ImGuiDataType_ = packed struct(i32) {
    data: i32,
    pub const ImGuiDataType_S8: ImGuiDataType_ = .{ .data = 0 };
    pub const ImGuiDataType_U8: ImGuiDataType_ = .{ .data = 1 };
    pub const ImGuiDataType_S16: ImGuiDataType_ = .{ .data = 2 };
    pub const ImGuiDataType_U16: ImGuiDataType_ = .{ .data = 3 };
    pub const ImGuiDataType_S32: ImGuiDataType_ = .{ .data = 4 };
    pub const ImGuiDataType_U32: ImGuiDataType_ = .{ .data = 5 };
    pub const ImGuiDataType_S64: ImGuiDataType_ = .{ .data = 6 };
    pub const ImGuiDataType_U64: ImGuiDataType_ = .{ .data = 7 };
    pub const ImGuiDataType_Float: ImGuiDataType_ = .{ .data = 8 };
    pub const ImGuiDataType_Double: ImGuiDataType_ = .{ .data = 9 };
    pub const ImGuiDataType_Bool: ImGuiDataType_ = .{ .data = 10 };
    pub const ImGuiDataType_String: ImGuiDataType_ = .{ .data = 11 };
    pub const ImGuiDataType_COUNT: ImGuiDataType_ = .{ .data = 12 };
};

pub const ImGuiDir = packed struct(i32) {
    data: i32,
    pub const ImGuiDir_None: ImGuiDir = .{ .data = -1 };
    pub const ImGuiDir_Left: ImGuiDir = .{ .data = 0 };
    pub const ImGuiDir_Right: ImGuiDir = .{ .data = 1 };
    pub const ImGuiDir_Up: ImGuiDir = .{ .data = 2 };
    pub const ImGuiDir_Down: ImGuiDir = .{ .data = 3 };
    pub const ImGuiDir_COUNT: ImGuiDir = .{ .data = 4 };
};

pub const ImGuiSortDirection = packed struct(u8) {
    data: u8,
    pub const ImGuiSortDirection_None: ImGuiSortDirection = .{ .data = 0 };
    pub const ImGuiSortDirection_Ascending: ImGuiSortDirection = .{ .data = 1 };
    pub const ImGuiSortDirection_Descending: ImGuiSortDirection = .{ .data = 2 };
};

pub const ImGuiKey = packed struct(i32) {
    data: i32,
    pub const ImGuiKey_None: ImGuiKey = .{ .data = 0 };
    pub const ImGuiKey_NamedKey_BEGIN: ImGuiKey = .{ .data = 512 };
    pub const ImGuiKey_Tab: ImGuiKey = .{ .data = 512 };
    pub const ImGuiKey_LeftArrow: ImGuiKey = .{ .data = 513 };
    pub const ImGuiKey_RightArrow: ImGuiKey = .{ .data = 514 };
    pub const ImGuiKey_UpArrow: ImGuiKey = .{ .data = 515 };
    pub const ImGuiKey_DownArrow: ImGuiKey = .{ .data = 516 };
    pub const ImGuiKey_PageUp: ImGuiKey = .{ .data = 517 };
    pub const ImGuiKey_PageDown: ImGuiKey = .{ .data = 518 };
    pub const ImGuiKey_Home: ImGuiKey = .{ .data = 519 };
    pub const ImGuiKey_End: ImGuiKey = .{ .data = 520 };
    pub const ImGuiKey_Insert: ImGuiKey = .{ .data = 521 };
    pub const ImGuiKey_Delete: ImGuiKey = .{ .data = 522 };
    pub const ImGuiKey_Backspace: ImGuiKey = .{ .data = 523 };
    pub const ImGuiKey_Space: ImGuiKey = .{ .data = 524 };
    pub const ImGuiKey_Enter: ImGuiKey = .{ .data = 525 };
    pub const ImGuiKey_Escape: ImGuiKey = .{ .data = 526 };
    pub const ImGuiKey_LeftCtrl: ImGuiKey = .{ .data = 527 };
    pub const ImGuiKey_LeftShift: ImGuiKey = .{ .data = 528 };
    pub const ImGuiKey_LeftAlt: ImGuiKey = .{ .data = 529 };
    pub const ImGuiKey_LeftSuper: ImGuiKey = .{ .data = 530 };
    pub const ImGuiKey_RightCtrl: ImGuiKey = .{ .data = 531 };
    pub const ImGuiKey_RightShift: ImGuiKey = .{ .data = 532 };
    pub const ImGuiKey_RightAlt: ImGuiKey = .{ .data = 533 };
    pub const ImGuiKey_RightSuper: ImGuiKey = .{ .data = 534 };
    pub const ImGuiKey_Menu: ImGuiKey = .{ .data = 535 };
    pub const ImGuiKey_0: ImGuiKey = .{ .data = 536 };
    pub const ImGuiKey_1: ImGuiKey = .{ .data = 537 };
    pub const ImGuiKey_2: ImGuiKey = .{ .data = 538 };
    pub const ImGuiKey_3: ImGuiKey = .{ .data = 539 };
    pub const ImGuiKey_4: ImGuiKey = .{ .data = 540 };
    pub const ImGuiKey_5: ImGuiKey = .{ .data = 541 };
    pub const ImGuiKey_6: ImGuiKey = .{ .data = 542 };
    pub const ImGuiKey_7: ImGuiKey = .{ .data = 543 };
    pub const ImGuiKey_8: ImGuiKey = .{ .data = 544 };
    pub const ImGuiKey_9: ImGuiKey = .{ .data = 545 };
    pub const ImGuiKey_A: ImGuiKey = .{ .data = 546 };
    pub const ImGuiKey_B: ImGuiKey = .{ .data = 547 };
    pub const ImGuiKey_C: ImGuiKey = .{ .data = 548 };
    pub const ImGuiKey_D: ImGuiKey = .{ .data = 549 };
    pub const ImGuiKey_E: ImGuiKey = .{ .data = 550 };
    pub const ImGuiKey_F: ImGuiKey = .{ .data = 551 };
    pub const ImGuiKey_G: ImGuiKey = .{ .data = 552 };
    pub const ImGuiKey_H: ImGuiKey = .{ .data = 553 };
    pub const ImGuiKey_I: ImGuiKey = .{ .data = 554 };
    pub const ImGuiKey_J: ImGuiKey = .{ .data = 555 };
    pub const ImGuiKey_K: ImGuiKey = .{ .data = 556 };
    pub const ImGuiKey_L: ImGuiKey = .{ .data = 557 };
    pub const ImGuiKey_M: ImGuiKey = .{ .data = 558 };
    pub const ImGuiKey_N: ImGuiKey = .{ .data = 559 };
    pub const ImGuiKey_O: ImGuiKey = .{ .data = 560 };
    pub const ImGuiKey_P: ImGuiKey = .{ .data = 561 };
    pub const ImGuiKey_Q: ImGuiKey = .{ .data = 562 };
    pub const ImGuiKey_R: ImGuiKey = .{ .data = 563 };
    pub const ImGuiKey_S: ImGuiKey = .{ .data = 564 };
    pub const ImGuiKey_T: ImGuiKey = .{ .data = 565 };
    pub const ImGuiKey_U: ImGuiKey = .{ .data = 566 };
    pub const ImGuiKey_V: ImGuiKey = .{ .data = 567 };
    pub const ImGuiKey_W: ImGuiKey = .{ .data = 568 };
    pub const ImGuiKey_X: ImGuiKey = .{ .data = 569 };
    pub const ImGuiKey_Y: ImGuiKey = .{ .data = 570 };
    pub const ImGuiKey_Z: ImGuiKey = .{ .data = 571 };
    pub const ImGuiKey_F1: ImGuiKey = .{ .data = 572 };
    pub const ImGuiKey_F2: ImGuiKey = .{ .data = 573 };
    pub const ImGuiKey_F3: ImGuiKey = .{ .data = 574 };
    pub const ImGuiKey_F4: ImGuiKey = .{ .data = 575 };
    pub const ImGuiKey_F5: ImGuiKey = .{ .data = 576 };
    pub const ImGuiKey_F6: ImGuiKey = .{ .data = 577 };
    pub const ImGuiKey_F7: ImGuiKey = .{ .data = 578 };
    pub const ImGuiKey_F8: ImGuiKey = .{ .data = 579 };
    pub const ImGuiKey_F9: ImGuiKey = .{ .data = 580 };
    pub const ImGuiKey_F10: ImGuiKey = .{ .data = 581 };
    pub const ImGuiKey_F11: ImGuiKey = .{ .data = 582 };
    pub const ImGuiKey_F12: ImGuiKey = .{ .data = 583 };
    pub const ImGuiKey_F13: ImGuiKey = .{ .data = 584 };
    pub const ImGuiKey_F14: ImGuiKey = .{ .data = 585 };
    pub const ImGuiKey_F15: ImGuiKey = .{ .data = 586 };
    pub const ImGuiKey_F16: ImGuiKey = .{ .data = 587 };
    pub const ImGuiKey_F17: ImGuiKey = .{ .data = 588 };
    pub const ImGuiKey_F18: ImGuiKey = .{ .data = 589 };
    pub const ImGuiKey_F19: ImGuiKey = .{ .data = 590 };
    pub const ImGuiKey_F20: ImGuiKey = .{ .data = 591 };
    pub const ImGuiKey_F21: ImGuiKey = .{ .data = 592 };
    pub const ImGuiKey_F22: ImGuiKey = .{ .data = 593 };
    pub const ImGuiKey_F23: ImGuiKey = .{ .data = 594 };
    pub const ImGuiKey_F24: ImGuiKey = .{ .data = 595 };
    pub const ImGuiKey_Apostrophe: ImGuiKey = .{ .data = 596 };
    pub const ImGuiKey_Comma: ImGuiKey = .{ .data = 597 };
    pub const ImGuiKey_Minus: ImGuiKey = .{ .data = 598 };
    pub const ImGuiKey_Period: ImGuiKey = .{ .data = 599 };
    pub const ImGuiKey_Slash: ImGuiKey = .{ .data = 600 };
    pub const ImGuiKey_Semicolon: ImGuiKey = .{ .data = 601 };
    pub const ImGuiKey_Equal: ImGuiKey = .{ .data = 602 };
    pub const ImGuiKey_LeftBracket: ImGuiKey = .{ .data = 603 };
    pub const ImGuiKey_Backslash: ImGuiKey = .{ .data = 604 };
    pub const ImGuiKey_RightBracket: ImGuiKey = .{ .data = 605 };
    pub const ImGuiKey_GraveAccent: ImGuiKey = .{ .data = 606 };
    pub const ImGuiKey_CapsLock: ImGuiKey = .{ .data = 607 };
    pub const ImGuiKey_ScrollLock: ImGuiKey = .{ .data = 608 };
    pub const ImGuiKey_NumLock: ImGuiKey = .{ .data = 609 };
    pub const ImGuiKey_PrintScreen: ImGuiKey = .{ .data = 610 };
    pub const ImGuiKey_Pause: ImGuiKey = .{ .data = 611 };
    pub const ImGuiKey_Keypad0: ImGuiKey = .{ .data = 612 };
    pub const ImGuiKey_Keypad1: ImGuiKey = .{ .data = 613 };
    pub const ImGuiKey_Keypad2: ImGuiKey = .{ .data = 614 };
    pub const ImGuiKey_Keypad3: ImGuiKey = .{ .data = 615 };
    pub const ImGuiKey_Keypad4: ImGuiKey = .{ .data = 616 };
    pub const ImGuiKey_Keypad5: ImGuiKey = .{ .data = 617 };
    pub const ImGuiKey_Keypad6: ImGuiKey = .{ .data = 618 };
    pub const ImGuiKey_Keypad7: ImGuiKey = .{ .data = 619 };
    pub const ImGuiKey_Keypad8: ImGuiKey = .{ .data = 620 };
    pub const ImGuiKey_Keypad9: ImGuiKey = .{ .data = 621 };
    pub const ImGuiKey_KeypadDecimal: ImGuiKey = .{ .data = 622 };
    pub const ImGuiKey_KeypadDivide: ImGuiKey = .{ .data = 623 };
    pub const ImGuiKey_KeypadMultiply: ImGuiKey = .{ .data = 624 };
    pub const ImGuiKey_KeypadSubtract: ImGuiKey = .{ .data = 625 };
    pub const ImGuiKey_KeypadAdd: ImGuiKey = .{ .data = 626 };
    pub const ImGuiKey_KeypadEnter: ImGuiKey = .{ .data = 627 };
    pub const ImGuiKey_KeypadEqual: ImGuiKey = .{ .data = 628 };
    pub const ImGuiKey_AppBack: ImGuiKey = .{ .data = 629 };
    pub const ImGuiKey_AppForward: ImGuiKey = .{ .data = 630 };
    pub const ImGuiKey_Oem102: ImGuiKey = .{ .data = 631 };
    pub const ImGuiKey_GamepadStart: ImGuiKey = .{ .data = 632 };
    pub const ImGuiKey_GamepadBack: ImGuiKey = .{ .data = 633 };
    pub const ImGuiKey_GamepadFaceLeft: ImGuiKey = .{ .data = 634 };
    pub const ImGuiKey_GamepadFaceRight: ImGuiKey = .{ .data = 635 };
    pub const ImGuiKey_GamepadFaceUp: ImGuiKey = .{ .data = 636 };
    pub const ImGuiKey_GamepadFaceDown: ImGuiKey = .{ .data = 637 };
    pub const ImGuiKey_GamepadDpadLeft: ImGuiKey = .{ .data = 638 };
    pub const ImGuiKey_GamepadDpadRight: ImGuiKey = .{ .data = 639 };
    pub const ImGuiKey_GamepadDpadUp: ImGuiKey = .{ .data = 640 };
    pub const ImGuiKey_GamepadDpadDown: ImGuiKey = .{ .data = 641 };
    pub const ImGuiKey_GamepadL1: ImGuiKey = .{ .data = 642 };
    pub const ImGuiKey_GamepadR1: ImGuiKey = .{ .data = 643 };
    pub const ImGuiKey_GamepadL2: ImGuiKey = .{ .data = 644 };
    pub const ImGuiKey_GamepadR2: ImGuiKey = .{ .data = 645 };
    pub const ImGuiKey_GamepadL3: ImGuiKey = .{ .data = 646 };
    pub const ImGuiKey_GamepadR3: ImGuiKey = .{ .data = 647 };
    pub const ImGuiKey_GamepadLStickLeft: ImGuiKey = .{ .data = 648 };
    pub const ImGuiKey_GamepadLStickRight: ImGuiKey = .{ .data = 649 };
    pub const ImGuiKey_GamepadLStickUp: ImGuiKey = .{ .data = 650 };
    pub const ImGuiKey_GamepadLStickDown: ImGuiKey = .{ .data = 651 };
    pub const ImGuiKey_GamepadRStickLeft: ImGuiKey = .{ .data = 652 };
    pub const ImGuiKey_GamepadRStickRight: ImGuiKey = .{ .data = 653 };
    pub const ImGuiKey_GamepadRStickUp: ImGuiKey = .{ .data = 654 };
    pub const ImGuiKey_GamepadRStickDown: ImGuiKey = .{ .data = 655 };
    pub const ImGuiKey_MouseLeft: ImGuiKey = .{ .data = 656 };
    pub const ImGuiKey_MouseRight: ImGuiKey = .{ .data = 657 };
    pub const ImGuiKey_MouseMiddle: ImGuiKey = .{ .data = 658 };
    pub const ImGuiKey_MouseX1: ImGuiKey = .{ .data = 659 };
    pub const ImGuiKey_MouseX2: ImGuiKey = .{ .data = 660 };
    pub const ImGuiKey_MouseWheelX: ImGuiKey = .{ .data = 661 };
    pub const ImGuiKey_MouseWheelY: ImGuiKey = .{ .data = 662 };
    pub const ImGuiKey_ReservedForModCtrl: ImGuiKey = .{ .data = 663 };
    pub const ImGuiKey_ReservedForModShift: ImGuiKey = .{ .data = 664 };
    pub const ImGuiKey_ReservedForModAlt: ImGuiKey = .{ .data = 665 };
    pub const ImGuiKey_ReservedForModSuper: ImGuiKey = .{ .data = 666 };
    pub const ImGuiKey_NamedKey_END: ImGuiKey = .{ .data = 667 };
    pub const ImGuiKey_NamedKey_COUNT: ImGuiKey = .{ .data = 155 };
    pub const ImGuiMod_None: ImGuiKey = .{ .data = 0 };
    pub const ImGuiMod_Ctrl: ImGuiKey = .{ .data = 4096 };
    pub const ImGuiMod_Shift: ImGuiKey = .{ .data = 8192 };
    pub const ImGuiMod_Alt: ImGuiKey = .{ .data = 16384 };
    pub const ImGuiMod_Super: ImGuiKey = .{ .data = 32768 };
    pub const ImGuiMod_Mask_: ImGuiKey = .{ .data = 61440 };
    pub const ImGuiKey_COUNT: ImGuiKey = .{ .data = 667 };
    pub const ImGuiMod_Shortcut: ImGuiKey = .{ .data = 4096 };
    pub const ImGuiKey_ModCtrl: ImGuiKey = .{ .data = 4096 };
    pub const ImGuiKey_ModShift: ImGuiKey = .{ .data = 8192 };
    pub const ImGuiKey_ModAlt: ImGuiKey = .{ .data = 16384 };
    pub const ImGuiKey_ModSuper: ImGuiKey = .{ .data = 32768 };
};

pub const ImGuiInputFlags_ = packed struct(i32) {
    data: i32,
    pub const ImGuiInputFlags_None: ImGuiInputFlags_ = .{ .data = 0 };
    pub const ImGuiInputFlags_Repeat: ImGuiInputFlags_ = .{ .data = 1 };
    pub const ImGuiInputFlags_RouteActive: ImGuiInputFlags_ = .{ .data = 1024 };
    pub const ImGuiInputFlags_RouteFocused: ImGuiInputFlags_ = .{ .data = 2048 };
    pub const ImGuiInputFlags_RouteGlobal: ImGuiInputFlags_ = .{ .data = 4096 };
    pub const ImGuiInputFlags_RouteAlways: ImGuiInputFlags_ = .{ .data = 8192 };
    pub const ImGuiInputFlags_RouteOverFocused: ImGuiInputFlags_ = .{ .data = 16384 };
    pub const ImGuiInputFlags_RouteOverActive: ImGuiInputFlags_ = .{ .data = 32768 };
    pub const ImGuiInputFlags_RouteUnlessBgFocused: ImGuiInputFlags_ = .{ .data = 65536 };
    pub const ImGuiInputFlags_RouteFromRootWindow: ImGuiInputFlags_ = .{ .data = 131072 };
    pub const ImGuiInputFlags_Tooltip: ImGuiInputFlags_ = .{ .data = 262144 };
};

pub const ImGuiConfigFlags_ = packed struct(i32) {
    data: i32,
    pub const ImGuiConfigFlags_None: ImGuiConfigFlags_ = .{ .data = 0 };
    pub const ImGuiConfigFlags_NavEnableKeyboard: ImGuiConfigFlags_ = .{ .data = 1 };
    pub const ImGuiConfigFlags_NavEnableGamepad: ImGuiConfigFlags_ = .{ .data = 2 };
    pub const ImGuiConfigFlags_NoMouse: ImGuiConfigFlags_ = .{ .data = 16 };
    pub const ImGuiConfigFlags_NoMouseCursorChange: ImGuiConfigFlags_ = .{ .data = 32 };
    pub const ImGuiConfigFlags_NoKeyboard: ImGuiConfigFlags_ = .{ .data = 64 };
    pub const ImGuiConfigFlags_IsSRGB: ImGuiConfigFlags_ = .{ .data = 1048576 };
    pub const ImGuiConfigFlags_IsTouchScreen: ImGuiConfigFlags_ = .{ .data = 2097152 };
    pub const ImGuiConfigFlags_NavEnableSetMousePos: ImGuiConfigFlags_ = .{ .data = 4 };
    pub const ImGuiConfigFlags_NavNoCaptureKeyboard: ImGuiConfigFlags_ = .{ .data = 8 };
};

pub const ImGuiBackendFlags_ = packed struct(i32) {
    data: i32,
    pub const ImGuiBackendFlags_None: ImGuiBackendFlags_ = .{ .data = 0 };
    pub const ImGuiBackendFlags_HasGamepad: ImGuiBackendFlags_ = .{ .data = 1 };
    pub const ImGuiBackendFlags_HasMouseCursors: ImGuiBackendFlags_ = .{ .data = 2 };
    pub const ImGuiBackendFlags_HasSetMousePos: ImGuiBackendFlags_ = .{ .data = 4 };
    pub const ImGuiBackendFlags_RendererHasVtxOffset: ImGuiBackendFlags_ = .{ .data = 8 };
    pub const ImGuiBackendFlags_RendererHasTextures: ImGuiBackendFlags_ = .{ .data = 16 };
};

pub const ImGuiCol_ = packed struct(i32) {
    data: i32,
    pub const ImGuiCol_Text: ImGuiCol_ = .{ .data = 0 };
    pub const ImGuiCol_TextDisabled: ImGuiCol_ = .{ .data = 1 };
    pub const ImGuiCol_WindowBg: ImGuiCol_ = .{ .data = 2 };
    pub const ImGuiCol_ChildBg: ImGuiCol_ = .{ .data = 3 };
    pub const ImGuiCol_PopupBg: ImGuiCol_ = .{ .data = 4 };
    pub const ImGuiCol_Border: ImGuiCol_ = .{ .data = 5 };
    pub const ImGuiCol_BorderShadow: ImGuiCol_ = .{ .data = 6 };
    pub const ImGuiCol_FrameBg: ImGuiCol_ = .{ .data = 7 };
    pub const ImGuiCol_FrameBgHovered: ImGuiCol_ = .{ .data = 8 };
    pub const ImGuiCol_FrameBgActive: ImGuiCol_ = .{ .data = 9 };
    pub const ImGuiCol_TitleBg: ImGuiCol_ = .{ .data = 10 };
    pub const ImGuiCol_TitleBgActive: ImGuiCol_ = .{ .data = 11 };
    pub const ImGuiCol_TitleBgCollapsed: ImGuiCol_ = .{ .data = 12 };
    pub const ImGuiCol_MenuBarBg: ImGuiCol_ = .{ .data = 13 };
    pub const ImGuiCol_ScrollbarBg: ImGuiCol_ = .{ .data = 14 };
    pub const ImGuiCol_ScrollbarGrab: ImGuiCol_ = .{ .data = 15 };
    pub const ImGuiCol_ScrollbarGrabHovered: ImGuiCol_ = .{ .data = 16 };
    pub const ImGuiCol_ScrollbarGrabActive: ImGuiCol_ = .{ .data = 17 };
    pub const ImGuiCol_CheckMark: ImGuiCol_ = .{ .data = 18 };
    pub const ImGuiCol_SliderGrab: ImGuiCol_ = .{ .data = 19 };
    pub const ImGuiCol_SliderGrabActive: ImGuiCol_ = .{ .data = 20 };
    pub const ImGuiCol_Button: ImGuiCol_ = .{ .data = 21 };
    pub const ImGuiCol_ButtonHovered: ImGuiCol_ = .{ .data = 22 };
    pub const ImGuiCol_ButtonActive: ImGuiCol_ = .{ .data = 23 };
    pub const ImGuiCol_Header: ImGuiCol_ = .{ .data = 24 };
    pub const ImGuiCol_HeaderHovered: ImGuiCol_ = .{ .data = 25 };
    pub const ImGuiCol_HeaderActive: ImGuiCol_ = .{ .data = 26 };
    pub const ImGuiCol_Separator: ImGuiCol_ = .{ .data = 27 };
    pub const ImGuiCol_SeparatorHovered: ImGuiCol_ = .{ .data = 28 };
    pub const ImGuiCol_SeparatorActive: ImGuiCol_ = .{ .data = 29 };
    pub const ImGuiCol_ResizeGrip: ImGuiCol_ = .{ .data = 30 };
    pub const ImGuiCol_ResizeGripHovered: ImGuiCol_ = .{ .data = 31 };
    pub const ImGuiCol_ResizeGripActive: ImGuiCol_ = .{ .data = 32 };
    pub const ImGuiCol_InputTextCursor: ImGuiCol_ = .{ .data = 33 };
    pub const ImGuiCol_TabHovered: ImGuiCol_ = .{ .data = 34 };
    pub const ImGuiCol_Tab: ImGuiCol_ = .{ .data = 35 };
    pub const ImGuiCol_TabSelected: ImGuiCol_ = .{ .data = 36 };
    pub const ImGuiCol_TabSelectedOverline: ImGuiCol_ = .{ .data = 37 };
    pub const ImGuiCol_TabDimmed: ImGuiCol_ = .{ .data = 38 };
    pub const ImGuiCol_TabDimmedSelected: ImGuiCol_ = .{ .data = 39 };
    pub const ImGuiCol_TabDimmedSelectedOverline: ImGuiCol_ = .{ .data = 40 };
    pub const ImGuiCol_PlotLines: ImGuiCol_ = .{ .data = 41 };
    pub const ImGuiCol_PlotLinesHovered: ImGuiCol_ = .{ .data = 42 };
    pub const ImGuiCol_PlotHistogram: ImGuiCol_ = .{ .data = 43 };
    pub const ImGuiCol_PlotHistogramHovered: ImGuiCol_ = .{ .data = 44 };
    pub const ImGuiCol_TableHeaderBg: ImGuiCol_ = .{ .data = 45 };
    pub const ImGuiCol_TableBorderStrong: ImGuiCol_ = .{ .data = 46 };
    pub const ImGuiCol_TableBorderLight: ImGuiCol_ = .{ .data = 47 };
    pub const ImGuiCol_TableRowBg: ImGuiCol_ = .{ .data = 48 };
    pub const ImGuiCol_TableRowBgAlt: ImGuiCol_ = .{ .data = 49 };
    pub const ImGuiCol_TextLink: ImGuiCol_ = .{ .data = 50 };
    pub const ImGuiCol_TextSelectedBg: ImGuiCol_ = .{ .data = 51 };
    pub const ImGuiCol_TreeLines: ImGuiCol_ = .{ .data = 52 };
    pub const ImGuiCol_DragDropTarget: ImGuiCol_ = .{ .data = 53 };
    pub const ImGuiCol_NavCursor: ImGuiCol_ = .{ .data = 54 };
    pub const ImGuiCol_NavWindowingHighlight: ImGuiCol_ = .{ .data = 55 };
    pub const ImGuiCol_NavWindowingDimBg: ImGuiCol_ = .{ .data = 56 };
    pub const ImGuiCol_ModalWindowDimBg: ImGuiCol_ = .{ .data = 57 };
    pub const ImGuiCol_COUNT: ImGuiCol_ = .{ .data = 58 };
    pub const ImGuiCol_TabActive: ImGuiCol_ = .{ .data = 36 };
    pub const ImGuiCol_TabUnfocused: ImGuiCol_ = .{ .data = 38 };
    pub const ImGuiCol_TabUnfocusedActive: ImGuiCol_ = .{ .data = 39 };
    pub const ImGuiCol_NavHighlight: ImGuiCol_ = .{ .data = 54 };
};

pub const ImGuiStyleVar_ = packed struct(i32) {
    data: i32,
    pub const ImGuiStyleVar_Alpha: ImGuiStyleVar_ = .{ .data = 0 };
    pub const ImGuiStyleVar_DisabledAlpha: ImGuiStyleVar_ = .{ .data = 1 };
    pub const ImGuiStyleVar_WindowPadding: ImGuiStyleVar_ = .{ .data = 2 };
    pub const ImGuiStyleVar_WindowRounding: ImGuiStyleVar_ = .{ .data = 3 };
    pub const ImGuiStyleVar_WindowBorderSize: ImGuiStyleVar_ = .{ .data = 4 };
    pub const ImGuiStyleVar_WindowMinSize: ImGuiStyleVar_ = .{ .data = 5 };
    pub const ImGuiStyleVar_WindowTitleAlign: ImGuiStyleVar_ = .{ .data = 6 };
    pub const ImGuiStyleVar_ChildRounding: ImGuiStyleVar_ = .{ .data = 7 };
    pub const ImGuiStyleVar_ChildBorderSize: ImGuiStyleVar_ = .{ .data = 8 };
    pub const ImGuiStyleVar_PopupRounding: ImGuiStyleVar_ = .{ .data = 9 };
    pub const ImGuiStyleVar_PopupBorderSize: ImGuiStyleVar_ = .{ .data = 10 };
    pub const ImGuiStyleVar_FramePadding: ImGuiStyleVar_ = .{ .data = 11 };
    pub const ImGuiStyleVar_FrameRounding: ImGuiStyleVar_ = .{ .data = 12 };
    pub const ImGuiStyleVar_FrameBorderSize: ImGuiStyleVar_ = .{ .data = 13 };
    pub const ImGuiStyleVar_ItemSpacing: ImGuiStyleVar_ = .{ .data = 14 };
    pub const ImGuiStyleVar_ItemInnerSpacing: ImGuiStyleVar_ = .{ .data = 15 };
    pub const ImGuiStyleVar_IndentSpacing: ImGuiStyleVar_ = .{ .data = 16 };
    pub const ImGuiStyleVar_CellPadding: ImGuiStyleVar_ = .{ .data = 17 };
    pub const ImGuiStyleVar_ScrollbarSize: ImGuiStyleVar_ = .{ .data = 18 };
    pub const ImGuiStyleVar_ScrollbarRounding: ImGuiStyleVar_ = .{ .data = 19 };
    pub const ImGuiStyleVar_ScrollbarPadding: ImGuiStyleVar_ = .{ .data = 20 };
    pub const ImGuiStyleVar_GrabMinSize: ImGuiStyleVar_ = .{ .data = 21 };
    pub const ImGuiStyleVar_GrabRounding: ImGuiStyleVar_ = .{ .data = 22 };
    pub const ImGuiStyleVar_ImageBorderSize: ImGuiStyleVar_ = .{ .data = 23 };
    pub const ImGuiStyleVar_TabRounding: ImGuiStyleVar_ = .{ .data = 24 };
    pub const ImGuiStyleVar_TabBorderSize: ImGuiStyleVar_ = .{ .data = 25 };
    pub const ImGuiStyleVar_TabMinWidthBase: ImGuiStyleVar_ = .{ .data = 26 };
    pub const ImGuiStyleVar_TabMinWidthShrink: ImGuiStyleVar_ = .{ .data = 27 };
    pub const ImGuiStyleVar_TabBarBorderSize: ImGuiStyleVar_ = .{ .data = 28 };
    pub const ImGuiStyleVar_TabBarOverlineSize: ImGuiStyleVar_ = .{ .data = 29 };
    pub const ImGuiStyleVar_TableAngledHeadersAngle: ImGuiStyleVar_ = .{ .data = 30 };
    pub const ImGuiStyleVar_TableAngledHeadersTextAlign: ImGuiStyleVar_ = .{ .data = 31 };
    pub const ImGuiStyleVar_TreeLinesSize: ImGuiStyleVar_ = .{ .data = 32 };
    pub const ImGuiStyleVar_TreeLinesRounding: ImGuiStyleVar_ = .{ .data = 33 };
    pub const ImGuiStyleVar_ButtonTextAlign: ImGuiStyleVar_ = .{ .data = 34 };
    pub const ImGuiStyleVar_SelectableTextAlign: ImGuiStyleVar_ = .{ .data = 35 };
    pub const ImGuiStyleVar_SeparatorTextBorderSize: ImGuiStyleVar_ = .{ .data = 36 };
    pub const ImGuiStyleVar_SeparatorTextAlign: ImGuiStyleVar_ = .{ .data = 37 };
    pub const ImGuiStyleVar_SeparatorTextPadding: ImGuiStyleVar_ = .{ .data = 38 };
    pub const ImGuiStyleVar_COUNT: ImGuiStyleVar_ = .{ .data = 39 };
};

pub const ImGuiButtonFlags_ = packed struct(i32) {
    data: i32,
    pub const ImGuiButtonFlags_None: ImGuiButtonFlags_ = .{ .data = 0 };
    pub const ImGuiButtonFlags_MouseButtonLeft: ImGuiButtonFlags_ = .{ .data = 1 };
    pub const ImGuiButtonFlags_MouseButtonRight: ImGuiButtonFlags_ = .{ .data = 2 };
    pub const ImGuiButtonFlags_MouseButtonMiddle: ImGuiButtonFlags_ = .{ .data = 4 };
    pub const ImGuiButtonFlags_MouseButtonMask_: ImGuiButtonFlags_ = .{ .data = 7 };
    pub const ImGuiButtonFlags_EnableNav: ImGuiButtonFlags_ = .{ .data = 8 };
};

pub const ImGuiColorEditFlags_ = packed struct(i32) {
    data: i32,
    pub const ImGuiColorEditFlags_None: ImGuiColorEditFlags_ = .{ .data = 0 };
    pub const ImGuiColorEditFlags_NoAlpha: ImGuiColorEditFlags_ = .{ .data = 2 };
    pub const ImGuiColorEditFlags_NoPicker: ImGuiColorEditFlags_ = .{ .data = 4 };
    pub const ImGuiColorEditFlags_NoOptions: ImGuiColorEditFlags_ = .{ .data = 8 };
    pub const ImGuiColorEditFlags_NoSmallPreview: ImGuiColorEditFlags_ = .{ .data = 16 };
    pub const ImGuiColorEditFlags_NoInputs: ImGuiColorEditFlags_ = .{ .data = 32 };
    pub const ImGuiColorEditFlags_NoTooltip: ImGuiColorEditFlags_ = .{ .data = 64 };
    pub const ImGuiColorEditFlags_NoLabel: ImGuiColorEditFlags_ = .{ .data = 128 };
    pub const ImGuiColorEditFlags_NoSidePreview: ImGuiColorEditFlags_ = .{ .data = 256 };
    pub const ImGuiColorEditFlags_NoDragDrop: ImGuiColorEditFlags_ = .{ .data = 512 };
    pub const ImGuiColorEditFlags_NoBorder: ImGuiColorEditFlags_ = .{ .data = 1024 };
    pub const ImGuiColorEditFlags_AlphaOpaque: ImGuiColorEditFlags_ = .{ .data = 2048 };
    pub const ImGuiColorEditFlags_AlphaNoBg: ImGuiColorEditFlags_ = .{ .data = 4096 };
    pub const ImGuiColorEditFlags_AlphaPreviewHalf: ImGuiColorEditFlags_ = .{ .data = 8192 };
    pub const ImGuiColorEditFlags_AlphaBar: ImGuiColorEditFlags_ = .{ .data = 65536 };
    pub const ImGuiColorEditFlags_HDR: ImGuiColorEditFlags_ = .{ .data = 524288 };
    pub const ImGuiColorEditFlags_DisplayRGB: ImGuiColorEditFlags_ = .{ .data = 1048576 };
    pub const ImGuiColorEditFlags_DisplayHSV: ImGuiColorEditFlags_ = .{ .data = 2097152 };
    pub const ImGuiColorEditFlags_DisplayHex: ImGuiColorEditFlags_ = .{ .data = 4194304 };
    pub const ImGuiColorEditFlags_Uint8: ImGuiColorEditFlags_ = .{ .data = 8388608 };
    pub const ImGuiColorEditFlags_Float: ImGuiColorEditFlags_ = .{ .data = 16777216 };
    pub const ImGuiColorEditFlags_PickerHueBar: ImGuiColorEditFlags_ = .{ .data = 33554432 };
    pub const ImGuiColorEditFlags_PickerHueWheel: ImGuiColorEditFlags_ = .{ .data = 67108864 };
    pub const ImGuiColorEditFlags_InputRGB: ImGuiColorEditFlags_ = .{ .data = 134217728 };
    pub const ImGuiColorEditFlags_InputHSV: ImGuiColorEditFlags_ = .{ .data = 268435456 };
    pub const ImGuiColorEditFlags_DefaultOptions_: ImGuiColorEditFlags_ = .{ .data = 177209344 };
    pub const ImGuiColorEditFlags_AlphaMask_: ImGuiColorEditFlags_ = .{ .data = 14338 };
    pub const ImGuiColorEditFlags_DisplayMask_: ImGuiColorEditFlags_ = .{ .data = 7340032 };
    pub const ImGuiColorEditFlags_DataTypeMask_: ImGuiColorEditFlags_ = .{ .data = 25165824 };
    pub const ImGuiColorEditFlags_PickerMask_: ImGuiColorEditFlags_ = .{ .data = 100663296 };
    pub const ImGuiColorEditFlags_InputMask_: ImGuiColorEditFlags_ = .{ .data = 402653184 };
    pub const ImGuiColorEditFlags_AlphaPreview: ImGuiColorEditFlags_ = .{ .data = 0 };
};

pub const ImGuiSliderFlags_ = packed struct(i32) {
    data: i32,
    pub const ImGuiSliderFlags_None: ImGuiSliderFlags_ = .{ .data = 0 };
    pub const ImGuiSliderFlags_Logarithmic: ImGuiSliderFlags_ = .{ .data = 32 };
    pub const ImGuiSliderFlags_NoRoundToFormat: ImGuiSliderFlags_ = .{ .data = 64 };
    pub const ImGuiSliderFlags_NoInput: ImGuiSliderFlags_ = .{ .data = 128 };
    pub const ImGuiSliderFlags_WrapAround: ImGuiSliderFlags_ = .{ .data = 256 };
    pub const ImGuiSliderFlags_ClampOnInput: ImGuiSliderFlags_ = .{ .data = 512 };
    pub const ImGuiSliderFlags_ClampZeroRange: ImGuiSliderFlags_ = .{ .data = 1024 };
    pub const ImGuiSliderFlags_NoSpeedTweaks: ImGuiSliderFlags_ = .{ .data = 2048 };
    pub const ImGuiSliderFlags_AlwaysClamp: ImGuiSliderFlags_ = .{ .data = 1536 };
    pub const ImGuiSliderFlags_InvalidMask_: ImGuiSliderFlags_ = .{ .data = 1879048207 };
};

pub const ImGuiMouseButton_ = packed struct(i32) {
    data: i32,
    pub const ImGuiMouseButton_Left: ImGuiMouseButton_ = .{ .data = 0 };
    pub const ImGuiMouseButton_Right: ImGuiMouseButton_ = .{ .data = 1 };
    pub const ImGuiMouseButton_Middle: ImGuiMouseButton_ = .{ .data = 2 };
    pub const ImGuiMouseButton_COUNT: ImGuiMouseButton_ = .{ .data = 5 };
};

pub const ImGuiMouseCursor_ = packed struct(i32) {
    data: i32,
    pub const ImGuiMouseCursor_None: ImGuiMouseCursor_ = .{ .data = -1 };
    pub const ImGuiMouseCursor_Arrow: ImGuiMouseCursor_ = .{ .data = 0 };
    pub const ImGuiMouseCursor_TextInput: ImGuiMouseCursor_ = .{ .data = 1 };
    pub const ImGuiMouseCursor_ResizeAll: ImGuiMouseCursor_ = .{ .data = 2 };
    pub const ImGuiMouseCursor_ResizeNS: ImGuiMouseCursor_ = .{ .data = 3 };
    pub const ImGuiMouseCursor_ResizeEW: ImGuiMouseCursor_ = .{ .data = 4 };
    pub const ImGuiMouseCursor_ResizeNESW: ImGuiMouseCursor_ = .{ .data = 5 };
    pub const ImGuiMouseCursor_ResizeNWSE: ImGuiMouseCursor_ = .{ .data = 6 };
    pub const ImGuiMouseCursor_Hand: ImGuiMouseCursor_ = .{ .data = 7 };
    pub const ImGuiMouseCursor_Wait: ImGuiMouseCursor_ = .{ .data = 8 };
    pub const ImGuiMouseCursor_Progress: ImGuiMouseCursor_ = .{ .data = 9 };
    pub const ImGuiMouseCursor_NotAllowed: ImGuiMouseCursor_ = .{ .data = 10 };
    pub const ImGuiMouseCursor_COUNT: ImGuiMouseCursor_ = .{ .data = 11 };
};

pub const ImGuiMouseSource = packed struct(i32) {
    data: i32,
    pub const ImGuiMouseSource_Mouse: ImGuiMouseSource = .{ .data = 0 };
    pub const ImGuiMouseSource_TouchScreen: ImGuiMouseSource = .{ .data = 1 };
    pub const ImGuiMouseSource_Pen: ImGuiMouseSource = .{ .data = 2 };
    pub const ImGuiMouseSource_COUNT: ImGuiMouseSource = .{ .data = 3 };
};

pub const ImGuiCond_ = packed struct(i32) {
    data: i32,
    pub const ImGuiCond_None: ImGuiCond_ = .{ .data = 0 };
    pub const ImGuiCond_Always: ImGuiCond_ = .{ .data = 1 };
    pub const ImGuiCond_Once: ImGuiCond_ = .{ .data = 2 };
    pub const ImGuiCond_FirstUseEver: ImGuiCond_ = .{ .data = 4 };
    pub const ImGuiCond_Appearing: ImGuiCond_ = .{ .data = 8 };
};

pub const ImGuiTableFlags_ = packed struct(i32) {
    data: i32,
    pub const ImGuiTableFlags_None: ImGuiTableFlags_ = .{ .data = 0 };
    pub const ImGuiTableFlags_Resizable: ImGuiTableFlags_ = .{ .data = 1 };
    pub const ImGuiTableFlags_Reorderable: ImGuiTableFlags_ = .{ .data = 2 };
    pub const ImGuiTableFlags_Hideable: ImGuiTableFlags_ = .{ .data = 4 };
    pub const ImGuiTableFlags_Sortable: ImGuiTableFlags_ = .{ .data = 8 };
    pub const ImGuiTableFlags_NoSavedSettings: ImGuiTableFlags_ = .{ .data = 16 };
    pub const ImGuiTableFlags_ContextMenuInBody: ImGuiTableFlags_ = .{ .data = 32 };
    pub const ImGuiTableFlags_RowBg: ImGuiTableFlags_ = .{ .data = 64 };
    pub const ImGuiTableFlags_BordersInnerH: ImGuiTableFlags_ = .{ .data = 128 };
    pub const ImGuiTableFlags_BordersOuterH: ImGuiTableFlags_ = .{ .data = 256 };
    pub const ImGuiTableFlags_BordersInnerV: ImGuiTableFlags_ = .{ .data = 512 };
    pub const ImGuiTableFlags_BordersOuterV: ImGuiTableFlags_ = .{ .data = 1024 };
    pub const ImGuiTableFlags_BordersH: ImGuiTableFlags_ = .{ .data = 384 };
    pub const ImGuiTableFlags_BordersV: ImGuiTableFlags_ = .{ .data = 1536 };
    pub const ImGuiTableFlags_BordersInner: ImGuiTableFlags_ = .{ .data = 640 };
    pub const ImGuiTableFlags_BordersOuter: ImGuiTableFlags_ = .{ .data = 1280 };
    pub const ImGuiTableFlags_Borders: ImGuiTableFlags_ = .{ .data = 1920 };
    pub const ImGuiTableFlags_NoBordersInBody: ImGuiTableFlags_ = .{ .data = 2048 };
    pub const ImGuiTableFlags_NoBordersInBodyUntilResize: ImGuiTableFlags_ = .{ .data = 4096 };
    pub const ImGuiTableFlags_SizingFixedFit: ImGuiTableFlags_ = .{ .data = 8192 };
    pub const ImGuiTableFlags_SizingFixedSame: ImGuiTableFlags_ = .{ .data = 16384 };
    pub const ImGuiTableFlags_SizingStretchProp: ImGuiTableFlags_ = .{ .data = 24576 };
    pub const ImGuiTableFlags_SizingStretchSame: ImGuiTableFlags_ = .{ .data = 32768 };
    pub const ImGuiTableFlags_NoHostExtendX: ImGuiTableFlags_ = .{ .data = 65536 };
    pub const ImGuiTableFlags_NoHostExtendY: ImGuiTableFlags_ = .{ .data = 131072 };
    pub const ImGuiTableFlags_NoKeepColumnsVisible: ImGuiTableFlags_ = .{ .data = 262144 };
    pub const ImGuiTableFlags_PreciseWidths: ImGuiTableFlags_ = .{ .data = 524288 };
    pub const ImGuiTableFlags_NoClip: ImGuiTableFlags_ = .{ .data = 1048576 };
    pub const ImGuiTableFlags_PadOuterX: ImGuiTableFlags_ = .{ .data = 2097152 };
    pub const ImGuiTableFlags_NoPadOuterX: ImGuiTableFlags_ = .{ .data = 4194304 };
    pub const ImGuiTableFlags_NoPadInnerX: ImGuiTableFlags_ = .{ .data = 8388608 };
    pub const ImGuiTableFlags_ScrollX: ImGuiTableFlags_ = .{ .data = 16777216 };
    pub const ImGuiTableFlags_ScrollY: ImGuiTableFlags_ = .{ .data = 33554432 };
    pub const ImGuiTableFlags_SortMulti: ImGuiTableFlags_ = .{ .data = 67108864 };
    pub const ImGuiTableFlags_SortTristate: ImGuiTableFlags_ = .{ .data = 134217728 };
    pub const ImGuiTableFlags_HighlightHoveredColumn: ImGuiTableFlags_ = .{ .data = 268435456 };
    pub const ImGuiTableFlags_SizingMask_: ImGuiTableFlags_ = .{ .data = 57344 };
};

pub const ImGuiTableColumnFlags_ = packed struct(i32) {
    data: i32,
    pub const ImGuiTableColumnFlags_None: ImGuiTableColumnFlags_ = .{ .data = 0 };
    pub const ImGuiTableColumnFlags_Disabled: ImGuiTableColumnFlags_ = .{ .data = 1 };
    pub const ImGuiTableColumnFlags_DefaultHide: ImGuiTableColumnFlags_ = .{ .data = 2 };
    pub const ImGuiTableColumnFlags_DefaultSort: ImGuiTableColumnFlags_ = .{ .data = 4 };
    pub const ImGuiTableColumnFlags_WidthStretch: ImGuiTableColumnFlags_ = .{ .data = 8 };
    pub const ImGuiTableColumnFlags_WidthFixed: ImGuiTableColumnFlags_ = .{ .data = 16 };
    pub const ImGuiTableColumnFlags_NoResize: ImGuiTableColumnFlags_ = .{ .data = 32 };
    pub const ImGuiTableColumnFlags_NoReorder: ImGuiTableColumnFlags_ = .{ .data = 64 };
    pub const ImGuiTableColumnFlags_NoHide: ImGuiTableColumnFlags_ = .{ .data = 128 };
    pub const ImGuiTableColumnFlags_NoClip: ImGuiTableColumnFlags_ = .{ .data = 256 };
    pub const ImGuiTableColumnFlags_NoSort: ImGuiTableColumnFlags_ = .{ .data = 512 };
    pub const ImGuiTableColumnFlags_NoSortAscending: ImGuiTableColumnFlags_ = .{ .data = 1024 };
    pub const ImGuiTableColumnFlags_NoSortDescending: ImGuiTableColumnFlags_ = .{ .data = 2048 };
    pub const ImGuiTableColumnFlags_NoHeaderLabel: ImGuiTableColumnFlags_ = .{ .data = 4096 };
    pub const ImGuiTableColumnFlags_NoHeaderWidth: ImGuiTableColumnFlags_ = .{ .data = 8192 };
    pub const ImGuiTableColumnFlags_PreferSortAscending: ImGuiTableColumnFlags_ = .{ .data = 16384 };
    pub const ImGuiTableColumnFlags_PreferSortDescending: ImGuiTableColumnFlags_ = .{ .data = 32768 };
    pub const ImGuiTableColumnFlags_IndentEnable: ImGuiTableColumnFlags_ = .{ .data = 65536 };
    pub const ImGuiTableColumnFlags_IndentDisable: ImGuiTableColumnFlags_ = .{ .data = 131072 };
    pub const ImGuiTableColumnFlags_AngledHeader: ImGuiTableColumnFlags_ = .{ .data = 262144 };
    pub const ImGuiTableColumnFlags_IsEnabled: ImGuiTableColumnFlags_ = .{ .data = 16777216 };
    pub const ImGuiTableColumnFlags_IsVisible: ImGuiTableColumnFlags_ = .{ .data = 33554432 };
    pub const ImGuiTableColumnFlags_IsSorted: ImGuiTableColumnFlags_ = .{ .data = 67108864 };
    pub const ImGuiTableColumnFlags_IsHovered: ImGuiTableColumnFlags_ = .{ .data = 134217728 };
    pub const ImGuiTableColumnFlags_WidthMask_: ImGuiTableColumnFlags_ = .{ .data = 24 };
    pub const ImGuiTableColumnFlags_IndentMask_: ImGuiTableColumnFlags_ = .{ .data = 196608 };
    pub const ImGuiTableColumnFlags_StatusMask_: ImGuiTableColumnFlags_ = .{ .data = 251658240 };
    pub const ImGuiTableColumnFlags_NoDirectResize_: ImGuiTableColumnFlags_ = .{ .data = 1073741824 };
};

pub const ImGuiTableRowFlags_ = packed struct(i32) {
    data: i32,
    pub const ImGuiTableRowFlags_None: ImGuiTableRowFlags_ = .{ .data = 0 };
    pub const ImGuiTableRowFlags_Headers: ImGuiTableRowFlags_ = .{ .data = 1 };
};

pub const ImGuiTableBgTarget_ = packed struct(i32) {
    data: i32,
    pub const ImGuiTableBgTarget_None: ImGuiTableBgTarget_ = .{ .data = 0 };
    pub const ImGuiTableBgTarget_RowBg0: ImGuiTableBgTarget_ = .{ .data = 1 };
    pub const ImGuiTableBgTarget_RowBg1: ImGuiTableBgTarget_ = .{ .data = 2 };
    pub const ImGuiTableBgTarget_CellBg: ImGuiTableBgTarget_ = .{ .data = 3 };
};

pub const ImGuiTableSortSpecs = extern struct {
    Specs: [*c]const ImGuiTableColumnSortSpecs,
    SpecsCount: i32,
    SpecsDirty: bool,
    comptime {
        if (@sizeOf(@This()) != 16 or @alignOf(@This()) != 8) {
            @compileLog(@import("std").fmt.comptimePrint("Expected type 'ImGuiTableSortSpecs' to be 16 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                @sizeOf(@This()),
                @alignOf(@This()),
            }));

            const this: @This() = undefined;

            const T_Specs = @TypeOf(this.Specs);
            if (@sizeOf(T_Specs) != 8 or @alignOf(T_Specs) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Specs' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Specs),
                    @alignOf(T_Specs),
                }));
            }
            const T_SpecsCount = @TypeOf(this.SpecsCount);
            if (@sizeOf(T_SpecsCount) != 4 or @alignOf(T_SpecsCount) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'SpecsCount' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_SpecsCount),
                    @alignOf(T_SpecsCount),
                }));
            }
            const T_SpecsDirty = @TypeOf(this.SpecsDirty);
            if (@sizeOf(T_SpecsDirty) != 1 or @alignOf(T_SpecsDirty) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'SpecsDirty' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_SpecsDirty),
                    @alignOf(T_SpecsDirty),
                }));
            }
        }
    }
};

pub const ImGuiTableColumnSortSpecs = extern struct {
    ColumnUserID: u32,
    ColumnIndex: i16,
    SortOrder: i16,
    SortDirection: ImGuiSortDirection,
    comptime {
        if (@sizeOf(@This()) != 12 or @alignOf(@This()) != 4) {
            @compileLog(@import("std").fmt.comptimePrint("Expected type 'ImGuiTableColumnSortSpecs' to be 12 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                @sizeOf(@This()),
                @alignOf(@This()),
            }));

            const this: @This() = undefined;

            const T_ColumnUserID = @TypeOf(this.ColumnUserID);
            if (@sizeOf(T_ColumnUserID) != 4 or @alignOf(T_ColumnUserID) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ColumnUserID' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ColumnUserID),
                    @alignOf(T_ColumnUserID),
                }));
            }
            const T_ColumnIndex = @TypeOf(this.ColumnIndex);
            if (@sizeOf(T_ColumnIndex) != 2 or @alignOf(T_ColumnIndex) != 2) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ColumnIndex' to be 2 bytes with 2 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ColumnIndex),
                    @alignOf(T_ColumnIndex),
                }));
            }
            const T_SortOrder = @TypeOf(this.SortOrder);
            if (@sizeOf(T_SortOrder) != 2 or @alignOf(T_SortOrder) != 2) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'SortOrder' to be 2 bytes with 2 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_SortOrder),
                    @alignOf(T_SortOrder),
                }));
            }
            const T_SortDirection = @TypeOf(this.SortDirection);
            if (@sizeOf(T_SortDirection) != 1 or @alignOf(T_SortDirection) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'SortDirection' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_SortDirection),
                    @alignOf(T_SortDirection),
                }));
            }
        }
    }
};

pub const ImGuiStyle = extern struct {
    FontSizeBase: f32,
    FontScaleMain: f32,
    FontScaleDpi: f32,
    Alpha: f32,
    DisabledAlpha: f32,
    WindowPadding: ImVec2,
    WindowRounding: f32,
    WindowBorderSize: f32,
    WindowBorderHoverPadding: f32,
    WindowMinSize: ImVec2,
    WindowTitleAlign: ImVec2,
    WindowMenuButtonPosition: ImGuiDir,
    ChildRounding: f32,
    ChildBorderSize: f32,
    PopupRounding: f32,
    PopupBorderSize: f32,
    FramePadding: ImVec2,
    FrameRounding: f32,
    FrameBorderSize: f32,
    ItemSpacing: ImVec2,
    ItemInnerSpacing: ImVec2,
    CellPadding: ImVec2,
    TouchExtraPadding: ImVec2,
    IndentSpacing: f32,
    ColumnsMinSpacing: f32,
    ScrollbarSize: f32,
    ScrollbarRounding: f32,
    ScrollbarPadding: f32,
    GrabMinSize: f32,
    GrabRounding: f32,
    LogSliderDeadzone: f32,
    ImageBorderSize: f32,
    TabRounding: f32,
    TabBorderSize: f32,
    TabMinWidthBase: f32,
    TabMinWidthShrink: f32,
    TabCloseButtonMinWidthSelected: f32,
    TabCloseButtonMinWidthUnselected: f32,
    TabBarBorderSize: f32,
    TabBarOverlineSize: f32,
    TableAngledHeadersAngle: f32,
    TableAngledHeadersTextAlign: ImVec2,
    TreeLinesFlags: i32,
    TreeLinesSize: f32,
    TreeLinesRounding: f32,
    ColorButtonPosition: ImGuiDir,
    ButtonTextAlign: ImVec2,
    SelectableTextAlign: ImVec2,
    SeparatorTextBorderSize: f32,
    SeparatorTextAlign: ImVec2,
    SeparatorTextPadding: ImVec2,
    DisplayWindowPadding: ImVec2,
    DisplaySafeAreaPadding: ImVec2,
    MouseCursorScale: f32,
    AntiAliasedLines: bool,
    AntiAliasedLinesUseTex: bool,
    AntiAliasedFill: bool,
    CurveTessellationTol: f32,
    CircleTessellationMaxError: f32,
    Colors: [58]ImVec4,
    HoverStationaryDelay: f32,
    HoverDelayShort: f32,
    HoverDelayNormal: f32,
    HoverFlagsForTooltipMouse: i32,
    HoverFlagsForTooltipNav: i32,
    _MainScale: f32,
    _NextFrameFontSizeBase: f32,
    comptime {
        if (@sizeOf(@This()) != 1244 or @alignOf(@This()) != 4) {
            @compileLog(@import("std").fmt.comptimePrint("Expected type 'ImGuiStyle' to be 1244 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                @sizeOf(@This()),
                @alignOf(@This()),
            }));

            const this: @This() = undefined;

            const T_FontSizeBase = @TypeOf(this.FontSizeBase);
            if (@sizeOf(T_FontSizeBase) != 4 or @alignOf(T_FontSizeBase) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'FontSizeBase' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_FontSizeBase),
                    @alignOf(T_FontSizeBase),
                }));
            }
            const T_FontScaleMain = @TypeOf(this.FontScaleMain);
            if (@sizeOf(T_FontScaleMain) != 4 or @alignOf(T_FontScaleMain) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'FontScaleMain' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_FontScaleMain),
                    @alignOf(T_FontScaleMain),
                }));
            }
            const T_FontScaleDpi = @TypeOf(this.FontScaleDpi);
            if (@sizeOf(T_FontScaleDpi) != 4 or @alignOf(T_FontScaleDpi) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'FontScaleDpi' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_FontScaleDpi),
                    @alignOf(T_FontScaleDpi),
                }));
            }
            const T_Alpha = @TypeOf(this.Alpha);
            if (@sizeOf(T_Alpha) != 4 or @alignOf(T_Alpha) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Alpha' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Alpha),
                    @alignOf(T_Alpha),
                }));
            }
            const T_DisabledAlpha = @TypeOf(this.DisabledAlpha);
            if (@sizeOf(T_DisabledAlpha) != 4 or @alignOf(T_DisabledAlpha) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'DisabledAlpha' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_DisabledAlpha),
                    @alignOf(T_DisabledAlpha),
                }));
            }
            const T_WindowPadding = @TypeOf(this.WindowPadding);
            if (@sizeOf(T_WindowPadding) != 8 or @alignOf(T_WindowPadding) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'WindowPadding' to be 8 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_WindowPadding),
                    @alignOf(T_WindowPadding),
                }));
            }
            const T_WindowRounding = @TypeOf(this.WindowRounding);
            if (@sizeOf(T_WindowRounding) != 4 or @alignOf(T_WindowRounding) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'WindowRounding' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_WindowRounding),
                    @alignOf(T_WindowRounding),
                }));
            }
            const T_WindowBorderSize = @TypeOf(this.WindowBorderSize);
            if (@sizeOf(T_WindowBorderSize) != 4 or @alignOf(T_WindowBorderSize) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'WindowBorderSize' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_WindowBorderSize),
                    @alignOf(T_WindowBorderSize),
                }));
            }
            const T_WindowBorderHoverPadding = @TypeOf(this.WindowBorderHoverPadding);
            if (@sizeOf(T_WindowBorderHoverPadding) != 4 or @alignOf(T_WindowBorderHoverPadding) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'WindowBorderHoverPadding' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_WindowBorderHoverPadding),
                    @alignOf(T_WindowBorderHoverPadding),
                }));
            }
            const T_WindowMinSize = @TypeOf(this.WindowMinSize);
            if (@sizeOf(T_WindowMinSize) != 8 or @alignOf(T_WindowMinSize) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'WindowMinSize' to be 8 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_WindowMinSize),
                    @alignOf(T_WindowMinSize),
                }));
            }
            const T_WindowTitleAlign = @TypeOf(this.WindowTitleAlign);
            if (@sizeOf(T_WindowTitleAlign) != 8 or @alignOf(T_WindowTitleAlign) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'WindowTitleAlign' to be 8 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_WindowTitleAlign),
                    @alignOf(T_WindowTitleAlign),
                }));
            }
            const T_WindowMenuButtonPosition = @TypeOf(this.WindowMenuButtonPosition);
            if (@sizeOf(T_WindowMenuButtonPosition) != 4 or @alignOf(T_WindowMenuButtonPosition) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'WindowMenuButtonPosition' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_WindowMenuButtonPosition),
                    @alignOf(T_WindowMenuButtonPosition),
                }));
            }
            const T_ChildRounding = @TypeOf(this.ChildRounding);
            if (@sizeOf(T_ChildRounding) != 4 or @alignOf(T_ChildRounding) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ChildRounding' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ChildRounding),
                    @alignOf(T_ChildRounding),
                }));
            }
            const T_ChildBorderSize = @TypeOf(this.ChildBorderSize);
            if (@sizeOf(T_ChildBorderSize) != 4 or @alignOf(T_ChildBorderSize) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ChildBorderSize' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ChildBorderSize),
                    @alignOf(T_ChildBorderSize),
                }));
            }
            const T_PopupRounding = @TypeOf(this.PopupRounding);
            if (@sizeOf(T_PopupRounding) != 4 or @alignOf(T_PopupRounding) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'PopupRounding' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_PopupRounding),
                    @alignOf(T_PopupRounding),
                }));
            }
            const T_PopupBorderSize = @TypeOf(this.PopupBorderSize);
            if (@sizeOf(T_PopupBorderSize) != 4 or @alignOf(T_PopupBorderSize) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'PopupBorderSize' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_PopupBorderSize),
                    @alignOf(T_PopupBorderSize),
                }));
            }
            const T_FramePadding = @TypeOf(this.FramePadding);
            if (@sizeOf(T_FramePadding) != 8 or @alignOf(T_FramePadding) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'FramePadding' to be 8 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_FramePadding),
                    @alignOf(T_FramePadding),
                }));
            }
            const T_FrameRounding = @TypeOf(this.FrameRounding);
            if (@sizeOf(T_FrameRounding) != 4 or @alignOf(T_FrameRounding) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'FrameRounding' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_FrameRounding),
                    @alignOf(T_FrameRounding),
                }));
            }
            const T_FrameBorderSize = @TypeOf(this.FrameBorderSize);
            if (@sizeOf(T_FrameBorderSize) != 4 or @alignOf(T_FrameBorderSize) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'FrameBorderSize' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_FrameBorderSize),
                    @alignOf(T_FrameBorderSize),
                }));
            }
            const T_ItemSpacing = @TypeOf(this.ItemSpacing);
            if (@sizeOf(T_ItemSpacing) != 8 or @alignOf(T_ItemSpacing) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ItemSpacing' to be 8 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ItemSpacing),
                    @alignOf(T_ItemSpacing),
                }));
            }
            const T_ItemInnerSpacing = @TypeOf(this.ItemInnerSpacing);
            if (@sizeOf(T_ItemInnerSpacing) != 8 or @alignOf(T_ItemInnerSpacing) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ItemInnerSpacing' to be 8 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ItemInnerSpacing),
                    @alignOf(T_ItemInnerSpacing),
                }));
            }
            const T_CellPadding = @TypeOf(this.CellPadding);
            if (@sizeOf(T_CellPadding) != 8 or @alignOf(T_CellPadding) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'CellPadding' to be 8 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_CellPadding),
                    @alignOf(T_CellPadding),
                }));
            }
            const T_TouchExtraPadding = @TypeOf(this.TouchExtraPadding);
            if (@sizeOf(T_TouchExtraPadding) != 8 or @alignOf(T_TouchExtraPadding) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'TouchExtraPadding' to be 8 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_TouchExtraPadding),
                    @alignOf(T_TouchExtraPadding),
                }));
            }
            const T_IndentSpacing = @TypeOf(this.IndentSpacing);
            if (@sizeOf(T_IndentSpacing) != 4 or @alignOf(T_IndentSpacing) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'IndentSpacing' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_IndentSpacing),
                    @alignOf(T_IndentSpacing),
                }));
            }
            const T_ColumnsMinSpacing = @TypeOf(this.ColumnsMinSpacing);
            if (@sizeOf(T_ColumnsMinSpacing) != 4 or @alignOf(T_ColumnsMinSpacing) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ColumnsMinSpacing' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ColumnsMinSpacing),
                    @alignOf(T_ColumnsMinSpacing),
                }));
            }
            const T_ScrollbarSize = @TypeOf(this.ScrollbarSize);
            if (@sizeOf(T_ScrollbarSize) != 4 or @alignOf(T_ScrollbarSize) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ScrollbarSize' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ScrollbarSize),
                    @alignOf(T_ScrollbarSize),
                }));
            }
            const T_ScrollbarRounding = @TypeOf(this.ScrollbarRounding);
            if (@sizeOf(T_ScrollbarRounding) != 4 or @alignOf(T_ScrollbarRounding) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ScrollbarRounding' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ScrollbarRounding),
                    @alignOf(T_ScrollbarRounding),
                }));
            }
            const T_ScrollbarPadding = @TypeOf(this.ScrollbarPadding);
            if (@sizeOf(T_ScrollbarPadding) != 4 or @alignOf(T_ScrollbarPadding) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ScrollbarPadding' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ScrollbarPadding),
                    @alignOf(T_ScrollbarPadding),
                }));
            }
            const T_GrabMinSize = @TypeOf(this.GrabMinSize);
            if (@sizeOf(T_GrabMinSize) != 4 or @alignOf(T_GrabMinSize) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'GrabMinSize' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_GrabMinSize),
                    @alignOf(T_GrabMinSize),
                }));
            }
            const T_GrabRounding = @TypeOf(this.GrabRounding);
            if (@sizeOf(T_GrabRounding) != 4 or @alignOf(T_GrabRounding) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'GrabRounding' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_GrabRounding),
                    @alignOf(T_GrabRounding),
                }));
            }
            const T_LogSliderDeadzone = @TypeOf(this.LogSliderDeadzone);
            if (@sizeOf(T_LogSliderDeadzone) != 4 or @alignOf(T_LogSliderDeadzone) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'LogSliderDeadzone' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_LogSliderDeadzone),
                    @alignOf(T_LogSliderDeadzone),
                }));
            }
            const T_ImageBorderSize = @TypeOf(this.ImageBorderSize);
            if (@sizeOf(T_ImageBorderSize) != 4 or @alignOf(T_ImageBorderSize) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ImageBorderSize' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ImageBorderSize),
                    @alignOf(T_ImageBorderSize),
                }));
            }
            const T_TabRounding = @TypeOf(this.TabRounding);
            if (@sizeOf(T_TabRounding) != 4 or @alignOf(T_TabRounding) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'TabRounding' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_TabRounding),
                    @alignOf(T_TabRounding),
                }));
            }
            const T_TabBorderSize = @TypeOf(this.TabBorderSize);
            if (@sizeOf(T_TabBorderSize) != 4 or @alignOf(T_TabBorderSize) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'TabBorderSize' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_TabBorderSize),
                    @alignOf(T_TabBorderSize),
                }));
            }
            const T_TabMinWidthBase = @TypeOf(this.TabMinWidthBase);
            if (@sizeOf(T_TabMinWidthBase) != 4 or @alignOf(T_TabMinWidthBase) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'TabMinWidthBase' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_TabMinWidthBase),
                    @alignOf(T_TabMinWidthBase),
                }));
            }
            const T_TabMinWidthShrink = @TypeOf(this.TabMinWidthShrink);
            if (@sizeOf(T_TabMinWidthShrink) != 4 or @alignOf(T_TabMinWidthShrink) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'TabMinWidthShrink' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_TabMinWidthShrink),
                    @alignOf(T_TabMinWidthShrink),
                }));
            }
            const T_TabCloseButtonMinWidthSelected = @TypeOf(this.TabCloseButtonMinWidthSelected);
            if (@sizeOf(T_TabCloseButtonMinWidthSelected) != 4 or @alignOf(T_TabCloseButtonMinWidthSelected) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'TabCloseButtonMinWidthSelected' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_TabCloseButtonMinWidthSelected),
                    @alignOf(T_TabCloseButtonMinWidthSelected),
                }));
            }
            const T_TabCloseButtonMinWidthUnselected = @TypeOf(this.TabCloseButtonMinWidthUnselected);
            if (@sizeOf(T_TabCloseButtonMinWidthUnselected) != 4 or @alignOf(T_TabCloseButtonMinWidthUnselected) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'TabCloseButtonMinWidthUnselected' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_TabCloseButtonMinWidthUnselected),
                    @alignOf(T_TabCloseButtonMinWidthUnselected),
                }));
            }
            const T_TabBarBorderSize = @TypeOf(this.TabBarBorderSize);
            if (@sizeOf(T_TabBarBorderSize) != 4 or @alignOf(T_TabBarBorderSize) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'TabBarBorderSize' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_TabBarBorderSize),
                    @alignOf(T_TabBarBorderSize),
                }));
            }
            const T_TabBarOverlineSize = @TypeOf(this.TabBarOverlineSize);
            if (@sizeOf(T_TabBarOverlineSize) != 4 or @alignOf(T_TabBarOverlineSize) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'TabBarOverlineSize' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_TabBarOverlineSize),
                    @alignOf(T_TabBarOverlineSize),
                }));
            }
            const T_TableAngledHeadersAngle = @TypeOf(this.TableAngledHeadersAngle);
            if (@sizeOf(T_TableAngledHeadersAngle) != 4 or @alignOf(T_TableAngledHeadersAngle) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'TableAngledHeadersAngle' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_TableAngledHeadersAngle),
                    @alignOf(T_TableAngledHeadersAngle),
                }));
            }
            const T_TableAngledHeadersTextAlign = @TypeOf(this.TableAngledHeadersTextAlign);
            if (@sizeOf(T_TableAngledHeadersTextAlign) != 8 or @alignOf(T_TableAngledHeadersTextAlign) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'TableAngledHeadersTextAlign' to be 8 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_TableAngledHeadersTextAlign),
                    @alignOf(T_TableAngledHeadersTextAlign),
                }));
            }
            const T_TreeLinesFlags = @TypeOf(this.TreeLinesFlags);
            if (@sizeOf(T_TreeLinesFlags) != 4 or @alignOf(T_TreeLinesFlags) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'TreeLinesFlags' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_TreeLinesFlags),
                    @alignOf(T_TreeLinesFlags),
                }));
            }
            const T_TreeLinesSize = @TypeOf(this.TreeLinesSize);
            if (@sizeOf(T_TreeLinesSize) != 4 or @alignOf(T_TreeLinesSize) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'TreeLinesSize' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_TreeLinesSize),
                    @alignOf(T_TreeLinesSize),
                }));
            }
            const T_TreeLinesRounding = @TypeOf(this.TreeLinesRounding);
            if (@sizeOf(T_TreeLinesRounding) != 4 or @alignOf(T_TreeLinesRounding) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'TreeLinesRounding' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_TreeLinesRounding),
                    @alignOf(T_TreeLinesRounding),
                }));
            }
            const T_ColorButtonPosition = @TypeOf(this.ColorButtonPosition);
            if (@sizeOf(T_ColorButtonPosition) != 4 or @alignOf(T_ColorButtonPosition) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ColorButtonPosition' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ColorButtonPosition),
                    @alignOf(T_ColorButtonPosition),
                }));
            }
            const T_ButtonTextAlign = @TypeOf(this.ButtonTextAlign);
            if (@sizeOf(T_ButtonTextAlign) != 8 or @alignOf(T_ButtonTextAlign) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ButtonTextAlign' to be 8 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ButtonTextAlign),
                    @alignOf(T_ButtonTextAlign),
                }));
            }
            const T_SelectableTextAlign = @TypeOf(this.SelectableTextAlign);
            if (@sizeOf(T_SelectableTextAlign) != 8 or @alignOf(T_SelectableTextAlign) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'SelectableTextAlign' to be 8 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_SelectableTextAlign),
                    @alignOf(T_SelectableTextAlign),
                }));
            }
            const T_SeparatorTextBorderSize = @TypeOf(this.SeparatorTextBorderSize);
            if (@sizeOf(T_SeparatorTextBorderSize) != 4 or @alignOf(T_SeparatorTextBorderSize) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'SeparatorTextBorderSize' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_SeparatorTextBorderSize),
                    @alignOf(T_SeparatorTextBorderSize),
                }));
            }
            const T_SeparatorTextAlign = @TypeOf(this.SeparatorTextAlign);
            if (@sizeOf(T_SeparatorTextAlign) != 8 or @alignOf(T_SeparatorTextAlign) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'SeparatorTextAlign' to be 8 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_SeparatorTextAlign),
                    @alignOf(T_SeparatorTextAlign),
                }));
            }
            const T_SeparatorTextPadding = @TypeOf(this.SeparatorTextPadding);
            if (@sizeOf(T_SeparatorTextPadding) != 8 or @alignOf(T_SeparatorTextPadding) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'SeparatorTextPadding' to be 8 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_SeparatorTextPadding),
                    @alignOf(T_SeparatorTextPadding),
                }));
            }
            const T_DisplayWindowPadding = @TypeOf(this.DisplayWindowPadding);
            if (@sizeOf(T_DisplayWindowPadding) != 8 or @alignOf(T_DisplayWindowPadding) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'DisplayWindowPadding' to be 8 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_DisplayWindowPadding),
                    @alignOf(T_DisplayWindowPadding),
                }));
            }
            const T_DisplaySafeAreaPadding = @TypeOf(this.DisplaySafeAreaPadding);
            if (@sizeOf(T_DisplaySafeAreaPadding) != 8 or @alignOf(T_DisplaySafeAreaPadding) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'DisplaySafeAreaPadding' to be 8 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_DisplaySafeAreaPadding),
                    @alignOf(T_DisplaySafeAreaPadding),
                }));
            }
            const T_MouseCursorScale = @TypeOf(this.MouseCursorScale);
            if (@sizeOf(T_MouseCursorScale) != 4 or @alignOf(T_MouseCursorScale) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'MouseCursorScale' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_MouseCursorScale),
                    @alignOf(T_MouseCursorScale),
                }));
            }
            const T_AntiAliasedLines = @TypeOf(this.AntiAliasedLines);
            if (@sizeOf(T_AntiAliasedLines) != 1 or @alignOf(T_AntiAliasedLines) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'AntiAliasedLines' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_AntiAliasedLines),
                    @alignOf(T_AntiAliasedLines),
                }));
            }
            const T_AntiAliasedLinesUseTex = @TypeOf(this.AntiAliasedLinesUseTex);
            if (@sizeOf(T_AntiAliasedLinesUseTex) != 1 or @alignOf(T_AntiAliasedLinesUseTex) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'AntiAliasedLinesUseTex' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_AntiAliasedLinesUseTex),
                    @alignOf(T_AntiAliasedLinesUseTex),
                }));
            }
            const T_AntiAliasedFill = @TypeOf(this.AntiAliasedFill);
            if (@sizeOf(T_AntiAliasedFill) != 1 or @alignOf(T_AntiAliasedFill) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'AntiAliasedFill' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_AntiAliasedFill),
                    @alignOf(T_AntiAliasedFill),
                }));
            }
            const T_CurveTessellationTol = @TypeOf(this.CurveTessellationTol);
            if (@sizeOf(T_CurveTessellationTol) != 4 or @alignOf(T_CurveTessellationTol) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'CurveTessellationTol' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_CurveTessellationTol),
                    @alignOf(T_CurveTessellationTol),
                }));
            }
            const T_CircleTessellationMaxError = @TypeOf(this.CircleTessellationMaxError);
            if (@sizeOf(T_CircleTessellationMaxError) != 4 or @alignOf(T_CircleTessellationMaxError) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'CircleTessellationMaxError' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_CircleTessellationMaxError),
                    @alignOf(T_CircleTessellationMaxError),
                }));
            }
            const T_Colors = @TypeOf(this.Colors);
            if (@sizeOf(T_Colors) != 928 or @alignOf(T_Colors) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Colors' to be 928 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Colors),
                    @alignOf(T_Colors),
                }));
            }
            const T_HoverStationaryDelay = @TypeOf(this.HoverStationaryDelay);
            if (@sizeOf(T_HoverStationaryDelay) != 4 or @alignOf(T_HoverStationaryDelay) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'HoverStationaryDelay' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_HoverStationaryDelay),
                    @alignOf(T_HoverStationaryDelay),
                }));
            }
            const T_HoverDelayShort = @TypeOf(this.HoverDelayShort);
            if (@sizeOf(T_HoverDelayShort) != 4 or @alignOf(T_HoverDelayShort) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'HoverDelayShort' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_HoverDelayShort),
                    @alignOf(T_HoverDelayShort),
                }));
            }
            const T_HoverDelayNormal = @TypeOf(this.HoverDelayNormal);
            if (@sizeOf(T_HoverDelayNormal) != 4 or @alignOf(T_HoverDelayNormal) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'HoverDelayNormal' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_HoverDelayNormal),
                    @alignOf(T_HoverDelayNormal),
                }));
            }
            const T_HoverFlagsForTooltipMouse = @TypeOf(this.HoverFlagsForTooltipMouse);
            if (@sizeOf(T_HoverFlagsForTooltipMouse) != 4 or @alignOf(T_HoverFlagsForTooltipMouse) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'HoverFlagsForTooltipMouse' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_HoverFlagsForTooltipMouse),
                    @alignOf(T_HoverFlagsForTooltipMouse),
                }));
            }
            const T_HoverFlagsForTooltipNav = @TypeOf(this.HoverFlagsForTooltipNav);
            if (@sizeOf(T_HoverFlagsForTooltipNav) != 4 or @alignOf(T_HoverFlagsForTooltipNav) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'HoverFlagsForTooltipNav' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_HoverFlagsForTooltipNav),
                    @alignOf(T_HoverFlagsForTooltipNav),
                }));
            }
            const T__MainScale = @TypeOf(this._MainScale);
            if (@sizeOf(T__MainScale) != 4 or @alignOf(T__MainScale) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field '_MainScale' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T__MainScale),
                    @alignOf(T__MainScale),
                }));
            }
            const T__NextFrameFontSizeBase = @TypeOf(this._NextFrameFontSizeBase);
            if (@sizeOf(T__NextFrameFontSizeBase) != 4 or @alignOf(T__NextFrameFontSizeBase) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field '_NextFrameFontSizeBase' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T__NextFrameFontSizeBase),
                    @alignOf(T__NextFrameFontSizeBase),
                }));
            }
        }
    }
};

pub const ImGuiKeyData = extern struct {
    Down: bool,
    DownDuration: f32,
    DownDurationPrev: f32,
    AnalogValue: f32,
    comptime {
        if (@sizeOf(@This()) != 16 or @alignOf(@This()) != 4) {
            @compileLog(@import("std").fmt.comptimePrint("Expected type 'ImGuiKeyData' to be 16 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                @sizeOf(@This()),
                @alignOf(@This()),
            }));

            const this: @This() = undefined;

            const T_Down = @TypeOf(this.Down);
            if (@sizeOf(T_Down) != 1 or @alignOf(T_Down) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Down' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Down),
                    @alignOf(T_Down),
                }));
            }
            const T_DownDuration = @TypeOf(this.DownDuration);
            if (@sizeOf(T_DownDuration) != 4 or @alignOf(T_DownDuration) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'DownDuration' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_DownDuration),
                    @alignOf(T_DownDuration),
                }));
            }
            const T_DownDurationPrev = @TypeOf(this.DownDurationPrev);
            if (@sizeOf(T_DownDurationPrev) != 4 or @alignOf(T_DownDurationPrev) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'DownDurationPrev' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_DownDurationPrev),
                    @alignOf(T_DownDurationPrev),
                }));
            }
            const T_AnalogValue = @TypeOf(this.AnalogValue);
            if (@sizeOf(T_AnalogValue) != 4 or @alignOf(T_AnalogValue) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'AnalogValue' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_AnalogValue),
                    @alignOf(T_AnalogValue),
                }));
            }
        }
    }
};

pub const ImGuiIO = extern struct {
    ConfigFlags: i32,
    BackendFlags: i32,
    DisplaySize: ImVec2,
    DisplayFramebufferScale: ImVec2,
    DeltaTime: f32,
    IniSavingRate: f32,
    IniFilename: [*c]const i8,
    LogFilename: [*c]const i8,
    UserData: *void,
    Fonts: [*c]ImFontAtlas,
    FontDefault: [*c]ImFont,
    FontAllowUserScaling: bool,
    ConfigNavSwapGamepadButtons: bool,
    ConfigNavMoveSetMousePos: bool,
    ConfigNavCaptureKeyboard: bool,
    ConfigNavEscapeClearFocusItem: bool,
    ConfigNavEscapeClearFocusWindow: bool,
    ConfigNavCursorVisibleAuto: bool,
    ConfigNavCursorVisibleAlways: bool,
    MouseDrawCursor: bool,
    ConfigMacOSXBehaviors: bool,
    ConfigInputTrickleEventQueue: bool,
    ConfigInputTextCursorBlink: bool,
    ConfigInputTextEnterKeepActive: bool,
    ConfigDragClickToInputText: bool,
    ConfigWindowsResizeFromEdges: bool,
    ConfigWindowsMoveFromTitleBarOnly: bool,
    ConfigWindowsCopyContentsWithCtrlC: bool,
    ConfigScrollbarScrollByPage: bool,
    ConfigMemoryCompactTimer: f32,
    MouseDoubleClickTime: f32,
    MouseDoubleClickMaxDist: f32,
    MouseDragThreshold: f32,
    KeyRepeatDelay: f32,
    KeyRepeatRate: f32,
    ConfigErrorRecovery: bool,
    ConfigErrorRecoveryEnableAssert: bool,
    ConfigErrorRecoveryEnableDebugLog: bool,
    ConfigErrorRecoveryEnableTooltip: bool,
    ConfigDebugIsDebuggerPresent: bool,
    ConfigDebugHighlightIdConflicts: bool,
    ConfigDebugHighlightIdConflictsShowItemPicker: bool,
    ConfigDebugBeginReturnValueOnce: bool,
    ConfigDebugBeginReturnValueLoop: bool,
    ConfigDebugIgnoreFocusLoss: bool,
    ConfigDebugIniSettings: bool,
    BackendPlatformName: [*c]const i8,
    BackendRendererName: [*c]const i8,
    BackendPlatformUserData: *void,
    BackendRendererUserData: *void,
    BackendLanguageUserData: *void,
    WantCaptureMouse: bool,
    WantCaptureKeyboard: bool,
    WantTextInput: bool,
    WantSetMousePos: bool,
    WantSaveIniSettings: bool,
    NavActive: bool,
    NavVisible: bool,
    Framerate: f32,
    MetricsRenderVertices: i32,
    MetricsRenderIndices: i32,
    MetricsRenderWindows: i32,
    MetricsActiveWindows: i32,
    MouseDelta: ImVec2,
    Ctx: [*c]ImGuiContext,
    MousePos: ImVec2,
    MouseDown: [5]bool,
    MouseWheel: f32,
    MouseWheelH: f32,
    MouseSource: ImGuiMouseSource,
    KeyCtrl: bool,
    KeyShift: bool,
    KeyAlt: bool,
    KeySuper: bool,
    KeyMods: i32,
    KeysData: [155]ImGuiKeyData,
    WantCaptureMouseUnlessPopupClose: bool,
    MousePosPrev: ImVec2,
    MouseClickedPos: [5]ImVec2,
    MouseClickedTime: [5]f64,
    MouseClicked: [5]bool,
    MouseDoubleClicked: [5]bool,
    MouseClickedCount: [5]u16,
    MouseClickedLastCount: [5]u16,
    MouseReleased: [5]bool,
    MouseReleasedTime: [5]f64,
    MouseDownOwned: [5]bool,
    MouseDownOwnedUnlessPopupClose: [5]bool,
    MouseWheelRequestAxisSwap: bool,
    MouseCtrlLeftAsRightClick: bool,
    MouseDownDuration: [5]f32,
    MouseDownDurationPrev: [5]f32,
    MouseDragMaxDistanceSqr: [5]f32,
    PenPressure: f32,
    AppFocusLost: bool,
    AppAcceptingEvents: bool,
    InputQueueSurrogate: u16,
    InputQueueCharacters: [16]u8 align(8),
    FontGlobalScale: f32,
    GetClipboardTextFn: [*c]*const fn (*void) callconv(.c) [*c]const i8,
    SetClipboardTextFn: [*c]*const fn (*void, [*c]const i8) callconv(.c) void,
    ClipboardUserData: *void,
    comptime {
        if (@sizeOf(@This()) != 3032 or @alignOf(@This()) != 8) {
            @compileLog(@import("std").fmt.comptimePrint("Expected type 'ImGuiIO' to be 3032 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                @sizeOf(@This()),
                @alignOf(@This()),
            }));

            const this: @This() = undefined;

            const T_ConfigFlags = @TypeOf(this.ConfigFlags);
            if (@sizeOf(T_ConfigFlags) != 4 or @alignOf(T_ConfigFlags) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ConfigFlags' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ConfigFlags),
                    @alignOf(T_ConfigFlags),
                }));
            }
            const T_BackendFlags = @TypeOf(this.BackendFlags);
            if (@sizeOf(T_BackendFlags) != 4 or @alignOf(T_BackendFlags) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'BackendFlags' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_BackendFlags),
                    @alignOf(T_BackendFlags),
                }));
            }
            const T_DisplaySize = @TypeOf(this.DisplaySize);
            if (@sizeOf(T_DisplaySize) != 8 or @alignOf(T_DisplaySize) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'DisplaySize' to be 8 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_DisplaySize),
                    @alignOf(T_DisplaySize),
                }));
            }
            const T_DisplayFramebufferScale = @TypeOf(this.DisplayFramebufferScale);
            if (@sizeOf(T_DisplayFramebufferScale) != 8 or @alignOf(T_DisplayFramebufferScale) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'DisplayFramebufferScale' to be 8 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_DisplayFramebufferScale),
                    @alignOf(T_DisplayFramebufferScale),
                }));
            }
            const T_DeltaTime = @TypeOf(this.DeltaTime);
            if (@sizeOf(T_DeltaTime) != 4 or @alignOf(T_DeltaTime) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'DeltaTime' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_DeltaTime),
                    @alignOf(T_DeltaTime),
                }));
            }
            const T_IniSavingRate = @TypeOf(this.IniSavingRate);
            if (@sizeOf(T_IniSavingRate) != 4 or @alignOf(T_IniSavingRate) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'IniSavingRate' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_IniSavingRate),
                    @alignOf(T_IniSavingRate),
                }));
            }
            const T_IniFilename = @TypeOf(this.IniFilename);
            if (@sizeOf(T_IniFilename) != 8 or @alignOf(T_IniFilename) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'IniFilename' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_IniFilename),
                    @alignOf(T_IniFilename),
                }));
            }
            const T_LogFilename = @TypeOf(this.LogFilename);
            if (@sizeOf(T_LogFilename) != 8 or @alignOf(T_LogFilename) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'LogFilename' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_LogFilename),
                    @alignOf(T_LogFilename),
                }));
            }
            const T_UserData = @TypeOf(this.UserData);
            if (@sizeOf(T_UserData) != 8 or @alignOf(T_UserData) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'UserData' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_UserData),
                    @alignOf(T_UserData),
                }));
            }
            const T_Fonts = @TypeOf(this.Fonts);
            if (@sizeOf(T_Fonts) != 8 or @alignOf(T_Fonts) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Fonts' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Fonts),
                    @alignOf(T_Fonts),
                }));
            }
            const T_FontDefault = @TypeOf(this.FontDefault);
            if (@sizeOf(T_FontDefault) != 8 or @alignOf(T_FontDefault) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'FontDefault' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_FontDefault),
                    @alignOf(T_FontDefault),
                }));
            }
            const T_FontAllowUserScaling = @TypeOf(this.FontAllowUserScaling);
            if (@sizeOf(T_FontAllowUserScaling) != 1 or @alignOf(T_FontAllowUserScaling) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'FontAllowUserScaling' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_FontAllowUserScaling),
                    @alignOf(T_FontAllowUserScaling),
                }));
            }
            const T_ConfigNavSwapGamepadButtons = @TypeOf(this.ConfigNavSwapGamepadButtons);
            if (@sizeOf(T_ConfigNavSwapGamepadButtons) != 1 or @alignOf(T_ConfigNavSwapGamepadButtons) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ConfigNavSwapGamepadButtons' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ConfigNavSwapGamepadButtons),
                    @alignOf(T_ConfigNavSwapGamepadButtons),
                }));
            }
            const T_ConfigNavMoveSetMousePos = @TypeOf(this.ConfigNavMoveSetMousePos);
            if (@sizeOf(T_ConfigNavMoveSetMousePos) != 1 or @alignOf(T_ConfigNavMoveSetMousePos) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ConfigNavMoveSetMousePos' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ConfigNavMoveSetMousePos),
                    @alignOf(T_ConfigNavMoveSetMousePos),
                }));
            }
            const T_ConfigNavCaptureKeyboard = @TypeOf(this.ConfigNavCaptureKeyboard);
            if (@sizeOf(T_ConfigNavCaptureKeyboard) != 1 or @alignOf(T_ConfigNavCaptureKeyboard) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ConfigNavCaptureKeyboard' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ConfigNavCaptureKeyboard),
                    @alignOf(T_ConfigNavCaptureKeyboard),
                }));
            }
            const T_ConfigNavEscapeClearFocusItem = @TypeOf(this.ConfigNavEscapeClearFocusItem);
            if (@sizeOf(T_ConfigNavEscapeClearFocusItem) != 1 or @alignOf(T_ConfigNavEscapeClearFocusItem) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ConfigNavEscapeClearFocusItem' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ConfigNavEscapeClearFocusItem),
                    @alignOf(T_ConfigNavEscapeClearFocusItem),
                }));
            }
            const T_ConfigNavEscapeClearFocusWindow = @TypeOf(this.ConfigNavEscapeClearFocusWindow);
            if (@sizeOf(T_ConfigNavEscapeClearFocusWindow) != 1 or @alignOf(T_ConfigNavEscapeClearFocusWindow) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ConfigNavEscapeClearFocusWindow' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ConfigNavEscapeClearFocusWindow),
                    @alignOf(T_ConfigNavEscapeClearFocusWindow),
                }));
            }
            const T_ConfigNavCursorVisibleAuto = @TypeOf(this.ConfigNavCursorVisibleAuto);
            if (@sizeOf(T_ConfigNavCursorVisibleAuto) != 1 or @alignOf(T_ConfigNavCursorVisibleAuto) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ConfigNavCursorVisibleAuto' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ConfigNavCursorVisibleAuto),
                    @alignOf(T_ConfigNavCursorVisibleAuto),
                }));
            }
            const T_ConfigNavCursorVisibleAlways = @TypeOf(this.ConfigNavCursorVisibleAlways);
            if (@sizeOf(T_ConfigNavCursorVisibleAlways) != 1 or @alignOf(T_ConfigNavCursorVisibleAlways) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ConfigNavCursorVisibleAlways' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ConfigNavCursorVisibleAlways),
                    @alignOf(T_ConfigNavCursorVisibleAlways),
                }));
            }
            const T_MouseDrawCursor = @TypeOf(this.MouseDrawCursor);
            if (@sizeOf(T_MouseDrawCursor) != 1 or @alignOf(T_MouseDrawCursor) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'MouseDrawCursor' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_MouseDrawCursor),
                    @alignOf(T_MouseDrawCursor),
                }));
            }
            const T_ConfigMacOSXBehaviors = @TypeOf(this.ConfigMacOSXBehaviors);
            if (@sizeOf(T_ConfigMacOSXBehaviors) != 1 or @alignOf(T_ConfigMacOSXBehaviors) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ConfigMacOSXBehaviors' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ConfigMacOSXBehaviors),
                    @alignOf(T_ConfigMacOSXBehaviors),
                }));
            }
            const T_ConfigInputTrickleEventQueue = @TypeOf(this.ConfigInputTrickleEventQueue);
            if (@sizeOf(T_ConfigInputTrickleEventQueue) != 1 or @alignOf(T_ConfigInputTrickleEventQueue) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ConfigInputTrickleEventQueue' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ConfigInputTrickleEventQueue),
                    @alignOf(T_ConfigInputTrickleEventQueue),
                }));
            }
            const T_ConfigInputTextCursorBlink = @TypeOf(this.ConfigInputTextCursorBlink);
            if (@sizeOf(T_ConfigInputTextCursorBlink) != 1 or @alignOf(T_ConfigInputTextCursorBlink) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ConfigInputTextCursorBlink' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ConfigInputTextCursorBlink),
                    @alignOf(T_ConfigInputTextCursorBlink),
                }));
            }
            const T_ConfigInputTextEnterKeepActive = @TypeOf(this.ConfigInputTextEnterKeepActive);
            if (@sizeOf(T_ConfigInputTextEnterKeepActive) != 1 or @alignOf(T_ConfigInputTextEnterKeepActive) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ConfigInputTextEnterKeepActive' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ConfigInputTextEnterKeepActive),
                    @alignOf(T_ConfigInputTextEnterKeepActive),
                }));
            }
            const T_ConfigDragClickToInputText = @TypeOf(this.ConfigDragClickToInputText);
            if (@sizeOf(T_ConfigDragClickToInputText) != 1 or @alignOf(T_ConfigDragClickToInputText) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ConfigDragClickToInputText' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ConfigDragClickToInputText),
                    @alignOf(T_ConfigDragClickToInputText),
                }));
            }
            const T_ConfigWindowsResizeFromEdges = @TypeOf(this.ConfigWindowsResizeFromEdges);
            if (@sizeOf(T_ConfigWindowsResizeFromEdges) != 1 or @alignOf(T_ConfigWindowsResizeFromEdges) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ConfigWindowsResizeFromEdges' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ConfigWindowsResizeFromEdges),
                    @alignOf(T_ConfigWindowsResizeFromEdges),
                }));
            }
            const T_ConfigWindowsMoveFromTitleBarOnly = @TypeOf(this.ConfigWindowsMoveFromTitleBarOnly);
            if (@sizeOf(T_ConfigWindowsMoveFromTitleBarOnly) != 1 or @alignOf(T_ConfigWindowsMoveFromTitleBarOnly) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ConfigWindowsMoveFromTitleBarOnly' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ConfigWindowsMoveFromTitleBarOnly),
                    @alignOf(T_ConfigWindowsMoveFromTitleBarOnly),
                }));
            }
            const T_ConfigWindowsCopyContentsWithCtrlC = @TypeOf(this.ConfigWindowsCopyContentsWithCtrlC);
            if (@sizeOf(T_ConfigWindowsCopyContentsWithCtrlC) != 1 or @alignOf(T_ConfigWindowsCopyContentsWithCtrlC) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ConfigWindowsCopyContentsWithCtrlC' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ConfigWindowsCopyContentsWithCtrlC),
                    @alignOf(T_ConfigWindowsCopyContentsWithCtrlC),
                }));
            }
            const T_ConfigScrollbarScrollByPage = @TypeOf(this.ConfigScrollbarScrollByPage);
            if (@sizeOf(T_ConfigScrollbarScrollByPage) != 1 or @alignOf(T_ConfigScrollbarScrollByPage) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ConfigScrollbarScrollByPage' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ConfigScrollbarScrollByPage),
                    @alignOf(T_ConfigScrollbarScrollByPage),
                }));
            }
            const T_ConfigMemoryCompactTimer = @TypeOf(this.ConfigMemoryCompactTimer);
            if (@sizeOf(T_ConfigMemoryCompactTimer) != 4 or @alignOf(T_ConfigMemoryCompactTimer) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ConfigMemoryCompactTimer' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ConfigMemoryCompactTimer),
                    @alignOf(T_ConfigMemoryCompactTimer),
                }));
            }
            const T_MouseDoubleClickTime = @TypeOf(this.MouseDoubleClickTime);
            if (@sizeOf(T_MouseDoubleClickTime) != 4 or @alignOf(T_MouseDoubleClickTime) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'MouseDoubleClickTime' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_MouseDoubleClickTime),
                    @alignOf(T_MouseDoubleClickTime),
                }));
            }
            const T_MouseDoubleClickMaxDist = @TypeOf(this.MouseDoubleClickMaxDist);
            if (@sizeOf(T_MouseDoubleClickMaxDist) != 4 or @alignOf(T_MouseDoubleClickMaxDist) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'MouseDoubleClickMaxDist' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_MouseDoubleClickMaxDist),
                    @alignOf(T_MouseDoubleClickMaxDist),
                }));
            }
            const T_MouseDragThreshold = @TypeOf(this.MouseDragThreshold);
            if (@sizeOf(T_MouseDragThreshold) != 4 or @alignOf(T_MouseDragThreshold) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'MouseDragThreshold' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_MouseDragThreshold),
                    @alignOf(T_MouseDragThreshold),
                }));
            }
            const T_KeyRepeatDelay = @TypeOf(this.KeyRepeatDelay);
            if (@sizeOf(T_KeyRepeatDelay) != 4 or @alignOf(T_KeyRepeatDelay) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'KeyRepeatDelay' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_KeyRepeatDelay),
                    @alignOf(T_KeyRepeatDelay),
                }));
            }
            const T_KeyRepeatRate = @TypeOf(this.KeyRepeatRate);
            if (@sizeOf(T_KeyRepeatRate) != 4 or @alignOf(T_KeyRepeatRate) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'KeyRepeatRate' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_KeyRepeatRate),
                    @alignOf(T_KeyRepeatRate),
                }));
            }
            const T_ConfigErrorRecovery = @TypeOf(this.ConfigErrorRecovery);
            if (@sizeOf(T_ConfigErrorRecovery) != 1 or @alignOf(T_ConfigErrorRecovery) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ConfigErrorRecovery' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ConfigErrorRecovery),
                    @alignOf(T_ConfigErrorRecovery),
                }));
            }
            const T_ConfigErrorRecoveryEnableAssert = @TypeOf(this.ConfigErrorRecoveryEnableAssert);
            if (@sizeOf(T_ConfigErrorRecoveryEnableAssert) != 1 or @alignOf(T_ConfigErrorRecoveryEnableAssert) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ConfigErrorRecoveryEnableAssert' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ConfigErrorRecoveryEnableAssert),
                    @alignOf(T_ConfigErrorRecoveryEnableAssert),
                }));
            }
            const T_ConfigErrorRecoveryEnableDebugLog = @TypeOf(this.ConfigErrorRecoveryEnableDebugLog);
            if (@sizeOf(T_ConfigErrorRecoveryEnableDebugLog) != 1 or @alignOf(T_ConfigErrorRecoveryEnableDebugLog) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ConfigErrorRecoveryEnableDebugLog' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ConfigErrorRecoveryEnableDebugLog),
                    @alignOf(T_ConfigErrorRecoveryEnableDebugLog),
                }));
            }
            const T_ConfigErrorRecoveryEnableTooltip = @TypeOf(this.ConfigErrorRecoveryEnableTooltip);
            if (@sizeOf(T_ConfigErrorRecoveryEnableTooltip) != 1 or @alignOf(T_ConfigErrorRecoveryEnableTooltip) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ConfigErrorRecoveryEnableTooltip' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ConfigErrorRecoveryEnableTooltip),
                    @alignOf(T_ConfigErrorRecoveryEnableTooltip),
                }));
            }
            const T_ConfigDebugIsDebuggerPresent = @TypeOf(this.ConfigDebugIsDebuggerPresent);
            if (@sizeOf(T_ConfigDebugIsDebuggerPresent) != 1 or @alignOf(T_ConfigDebugIsDebuggerPresent) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ConfigDebugIsDebuggerPresent' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ConfigDebugIsDebuggerPresent),
                    @alignOf(T_ConfigDebugIsDebuggerPresent),
                }));
            }
            const T_ConfigDebugHighlightIdConflicts = @TypeOf(this.ConfigDebugHighlightIdConflicts);
            if (@sizeOf(T_ConfigDebugHighlightIdConflicts) != 1 or @alignOf(T_ConfigDebugHighlightIdConflicts) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ConfigDebugHighlightIdConflicts' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ConfigDebugHighlightIdConflicts),
                    @alignOf(T_ConfigDebugHighlightIdConflicts),
                }));
            }
            const T_ConfigDebugHighlightIdConflictsShowItemPicker = @TypeOf(this.ConfigDebugHighlightIdConflictsShowItemPicker);
            if (@sizeOf(T_ConfigDebugHighlightIdConflictsShowItemPicker) != 1 or @alignOf(T_ConfigDebugHighlightIdConflictsShowItemPicker) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ConfigDebugHighlightIdConflictsShowItemPicker' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ConfigDebugHighlightIdConflictsShowItemPicker),
                    @alignOf(T_ConfigDebugHighlightIdConflictsShowItemPicker),
                }));
            }
            const T_ConfigDebugBeginReturnValueOnce = @TypeOf(this.ConfigDebugBeginReturnValueOnce);
            if (@sizeOf(T_ConfigDebugBeginReturnValueOnce) != 1 or @alignOf(T_ConfigDebugBeginReturnValueOnce) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ConfigDebugBeginReturnValueOnce' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ConfigDebugBeginReturnValueOnce),
                    @alignOf(T_ConfigDebugBeginReturnValueOnce),
                }));
            }
            const T_ConfigDebugBeginReturnValueLoop = @TypeOf(this.ConfigDebugBeginReturnValueLoop);
            if (@sizeOf(T_ConfigDebugBeginReturnValueLoop) != 1 or @alignOf(T_ConfigDebugBeginReturnValueLoop) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ConfigDebugBeginReturnValueLoop' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ConfigDebugBeginReturnValueLoop),
                    @alignOf(T_ConfigDebugBeginReturnValueLoop),
                }));
            }
            const T_ConfigDebugIgnoreFocusLoss = @TypeOf(this.ConfigDebugIgnoreFocusLoss);
            if (@sizeOf(T_ConfigDebugIgnoreFocusLoss) != 1 or @alignOf(T_ConfigDebugIgnoreFocusLoss) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ConfigDebugIgnoreFocusLoss' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ConfigDebugIgnoreFocusLoss),
                    @alignOf(T_ConfigDebugIgnoreFocusLoss),
                }));
            }
            const T_ConfigDebugIniSettings = @TypeOf(this.ConfigDebugIniSettings);
            if (@sizeOf(T_ConfigDebugIniSettings) != 1 or @alignOf(T_ConfigDebugIniSettings) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ConfigDebugIniSettings' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ConfigDebugIniSettings),
                    @alignOf(T_ConfigDebugIniSettings),
                }));
            }
            const T_BackendPlatformName = @TypeOf(this.BackendPlatformName);
            if (@sizeOf(T_BackendPlatformName) != 8 or @alignOf(T_BackendPlatformName) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'BackendPlatformName' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_BackendPlatformName),
                    @alignOf(T_BackendPlatformName),
                }));
            }
            const T_BackendRendererName = @TypeOf(this.BackendRendererName);
            if (@sizeOf(T_BackendRendererName) != 8 or @alignOf(T_BackendRendererName) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'BackendRendererName' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_BackendRendererName),
                    @alignOf(T_BackendRendererName),
                }));
            }
            const T_BackendPlatformUserData = @TypeOf(this.BackendPlatformUserData);
            if (@sizeOf(T_BackendPlatformUserData) != 8 or @alignOf(T_BackendPlatformUserData) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'BackendPlatformUserData' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_BackendPlatformUserData),
                    @alignOf(T_BackendPlatformUserData),
                }));
            }
            const T_BackendRendererUserData = @TypeOf(this.BackendRendererUserData);
            if (@sizeOf(T_BackendRendererUserData) != 8 or @alignOf(T_BackendRendererUserData) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'BackendRendererUserData' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_BackendRendererUserData),
                    @alignOf(T_BackendRendererUserData),
                }));
            }
            const T_BackendLanguageUserData = @TypeOf(this.BackendLanguageUserData);
            if (@sizeOf(T_BackendLanguageUserData) != 8 or @alignOf(T_BackendLanguageUserData) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'BackendLanguageUserData' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_BackendLanguageUserData),
                    @alignOf(T_BackendLanguageUserData),
                }));
            }
            const T_WantCaptureMouse = @TypeOf(this.WantCaptureMouse);
            if (@sizeOf(T_WantCaptureMouse) != 1 or @alignOf(T_WantCaptureMouse) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'WantCaptureMouse' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_WantCaptureMouse),
                    @alignOf(T_WantCaptureMouse),
                }));
            }
            const T_WantCaptureKeyboard = @TypeOf(this.WantCaptureKeyboard);
            if (@sizeOf(T_WantCaptureKeyboard) != 1 or @alignOf(T_WantCaptureKeyboard) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'WantCaptureKeyboard' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_WantCaptureKeyboard),
                    @alignOf(T_WantCaptureKeyboard),
                }));
            }
            const T_WantTextInput = @TypeOf(this.WantTextInput);
            if (@sizeOf(T_WantTextInput) != 1 or @alignOf(T_WantTextInput) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'WantTextInput' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_WantTextInput),
                    @alignOf(T_WantTextInput),
                }));
            }
            const T_WantSetMousePos = @TypeOf(this.WantSetMousePos);
            if (@sizeOf(T_WantSetMousePos) != 1 or @alignOf(T_WantSetMousePos) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'WantSetMousePos' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_WantSetMousePos),
                    @alignOf(T_WantSetMousePos),
                }));
            }
            const T_WantSaveIniSettings = @TypeOf(this.WantSaveIniSettings);
            if (@sizeOf(T_WantSaveIniSettings) != 1 or @alignOf(T_WantSaveIniSettings) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'WantSaveIniSettings' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_WantSaveIniSettings),
                    @alignOf(T_WantSaveIniSettings),
                }));
            }
            const T_NavActive = @TypeOf(this.NavActive);
            if (@sizeOf(T_NavActive) != 1 or @alignOf(T_NavActive) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'NavActive' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_NavActive),
                    @alignOf(T_NavActive),
                }));
            }
            const T_NavVisible = @TypeOf(this.NavVisible);
            if (@sizeOf(T_NavVisible) != 1 or @alignOf(T_NavVisible) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'NavVisible' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_NavVisible),
                    @alignOf(T_NavVisible),
                }));
            }
            const T_Framerate = @TypeOf(this.Framerate);
            if (@sizeOf(T_Framerate) != 4 or @alignOf(T_Framerate) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Framerate' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Framerate),
                    @alignOf(T_Framerate),
                }));
            }
            const T_MetricsRenderVertices = @TypeOf(this.MetricsRenderVertices);
            if (@sizeOf(T_MetricsRenderVertices) != 4 or @alignOf(T_MetricsRenderVertices) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'MetricsRenderVertices' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_MetricsRenderVertices),
                    @alignOf(T_MetricsRenderVertices),
                }));
            }
            const T_MetricsRenderIndices = @TypeOf(this.MetricsRenderIndices);
            if (@sizeOf(T_MetricsRenderIndices) != 4 or @alignOf(T_MetricsRenderIndices) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'MetricsRenderIndices' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_MetricsRenderIndices),
                    @alignOf(T_MetricsRenderIndices),
                }));
            }
            const T_MetricsRenderWindows = @TypeOf(this.MetricsRenderWindows);
            if (@sizeOf(T_MetricsRenderWindows) != 4 or @alignOf(T_MetricsRenderWindows) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'MetricsRenderWindows' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_MetricsRenderWindows),
                    @alignOf(T_MetricsRenderWindows),
                }));
            }
            const T_MetricsActiveWindows = @TypeOf(this.MetricsActiveWindows);
            if (@sizeOf(T_MetricsActiveWindows) != 4 or @alignOf(T_MetricsActiveWindows) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'MetricsActiveWindows' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_MetricsActiveWindows),
                    @alignOf(T_MetricsActiveWindows),
                }));
            }
            const T_MouseDelta = @TypeOf(this.MouseDelta);
            if (@sizeOf(T_MouseDelta) != 8 or @alignOf(T_MouseDelta) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'MouseDelta' to be 8 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_MouseDelta),
                    @alignOf(T_MouseDelta),
                }));
            }
            const T_Ctx = @TypeOf(this.Ctx);
            if (@sizeOf(T_Ctx) != 8 or @alignOf(T_Ctx) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Ctx' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Ctx),
                    @alignOf(T_Ctx),
                }));
            }
            const T_MousePos = @TypeOf(this.MousePos);
            if (@sizeOf(T_MousePos) != 8 or @alignOf(T_MousePos) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'MousePos' to be 8 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_MousePos),
                    @alignOf(T_MousePos),
                }));
            }
            const T_MouseDown = @TypeOf(this.MouseDown);
            if (@sizeOf(T_MouseDown) != 5 or @alignOf(T_MouseDown) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'MouseDown' to be 5 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_MouseDown),
                    @alignOf(T_MouseDown),
                }));
            }
            const T_MouseWheel = @TypeOf(this.MouseWheel);
            if (@sizeOf(T_MouseWheel) != 4 or @alignOf(T_MouseWheel) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'MouseWheel' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_MouseWheel),
                    @alignOf(T_MouseWheel),
                }));
            }
            const T_MouseWheelH = @TypeOf(this.MouseWheelH);
            if (@sizeOf(T_MouseWheelH) != 4 or @alignOf(T_MouseWheelH) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'MouseWheelH' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_MouseWheelH),
                    @alignOf(T_MouseWheelH),
                }));
            }
            const T_MouseSource = @TypeOf(this.MouseSource);
            if (@sizeOf(T_MouseSource) != 4 or @alignOf(T_MouseSource) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'MouseSource' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_MouseSource),
                    @alignOf(T_MouseSource),
                }));
            }
            const T_KeyCtrl = @TypeOf(this.KeyCtrl);
            if (@sizeOf(T_KeyCtrl) != 1 or @alignOf(T_KeyCtrl) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'KeyCtrl' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_KeyCtrl),
                    @alignOf(T_KeyCtrl),
                }));
            }
            const T_KeyShift = @TypeOf(this.KeyShift);
            if (@sizeOf(T_KeyShift) != 1 or @alignOf(T_KeyShift) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'KeyShift' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_KeyShift),
                    @alignOf(T_KeyShift),
                }));
            }
            const T_KeyAlt = @TypeOf(this.KeyAlt);
            if (@sizeOf(T_KeyAlt) != 1 or @alignOf(T_KeyAlt) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'KeyAlt' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_KeyAlt),
                    @alignOf(T_KeyAlt),
                }));
            }
            const T_KeySuper = @TypeOf(this.KeySuper);
            if (@sizeOf(T_KeySuper) != 1 or @alignOf(T_KeySuper) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'KeySuper' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_KeySuper),
                    @alignOf(T_KeySuper),
                }));
            }
            const T_KeyMods = @TypeOf(this.KeyMods);
            if (@sizeOf(T_KeyMods) != 4 or @alignOf(T_KeyMods) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'KeyMods' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_KeyMods),
                    @alignOf(T_KeyMods),
                }));
            }
            const T_KeysData = @TypeOf(this.KeysData);
            if (@sizeOf(T_KeysData) != 2480 or @alignOf(T_KeysData) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'KeysData' to be 2480 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_KeysData),
                    @alignOf(T_KeysData),
                }));
            }
            const T_WantCaptureMouseUnlessPopupClose = @TypeOf(this.WantCaptureMouseUnlessPopupClose);
            if (@sizeOf(T_WantCaptureMouseUnlessPopupClose) != 1 or @alignOf(T_WantCaptureMouseUnlessPopupClose) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'WantCaptureMouseUnlessPopupClose' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_WantCaptureMouseUnlessPopupClose),
                    @alignOf(T_WantCaptureMouseUnlessPopupClose),
                }));
            }
            const T_MousePosPrev = @TypeOf(this.MousePosPrev);
            if (@sizeOf(T_MousePosPrev) != 8 or @alignOf(T_MousePosPrev) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'MousePosPrev' to be 8 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_MousePosPrev),
                    @alignOf(T_MousePosPrev),
                }));
            }
            const T_MouseClickedPos = @TypeOf(this.MouseClickedPos);
            if (@sizeOf(T_MouseClickedPos) != 40 or @alignOf(T_MouseClickedPos) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'MouseClickedPos' to be 40 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_MouseClickedPos),
                    @alignOf(T_MouseClickedPos),
                }));
            }
            const T_MouseClickedTime = @TypeOf(this.MouseClickedTime);
            if (@sizeOf(T_MouseClickedTime) != 40 or @alignOf(T_MouseClickedTime) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'MouseClickedTime' to be 40 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_MouseClickedTime),
                    @alignOf(T_MouseClickedTime),
                }));
            }
            const T_MouseClicked = @TypeOf(this.MouseClicked);
            if (@sizeOf(T_MouseClicked) != 5 or @alignOf(T_MouseClicked) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'MouseClicked' to be 5 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_MouseClicked),
                    @alignOf(T_MouseClicked),
                }));
            }
            const T_MouseDoubleClicked = @TypeOf(this.MouseDoubleClicked);
            if (@sizeOf(T_MouseDoubleClicked) != 5 or @alignOf(T_MouseDoubleClicked) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'MouseDoubleClicked' to be 5 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_MouseDoubleClicked),
                    @alignOf(T_MouseDoubleClicked),
                }));
            }
            const T_MouseClickedCount = @TypeOf(this.MouseClickedCount);
            if (@sizeOf(T_MouseClickedCount) != 10 or @alignOf(T_MouseClickedCount) != 2) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'MouseClickedCount' to be 10 bytes with 2 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_MouseClickedCount),
                    @alignOf(T_MouseClickedCount),
                }));
            }
            const T_MouseClickedLastCount = @TypeOf(this.MouseClickedLastCount);
            if (@sizeOf(T_MouseClickedLastCount) != 10 or @alignOf(T_MouseClickedLastCount) != 2) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'MouseClickedLastCount' to be 10 bytes with 2 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_MouseClickedLastCount),
                    @alignOf(T_MouseClickedLastCount),
                }));
            }
            const T_MouseReleased = @TypeOf(this.MouseReleased);
            if (@sizeOf(T_MouseReleased) != 5 or @alignOf(T_MouseReleased) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'MouseReleased' to be 5 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_MouseReleased),
                    @alignOf(T_MouseReleased),
                }));
            }
            const T_MouseReleasedTime = @TypeOf(this.MouseReleasedTime);
            if (@sizeOf(T_MouseReleasedTime) != 40 or @alignOf(T_MouseReleasedTime) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'MouseReleasedTime' to be 40 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_MouseReleasedTime),
                    @alignOf(T_MouseReleasedTime),
                }));
            }
            const T_MouseDownOwned = @TypeOf(this.MouseDownOwned);
            if (@sizeOf(T_MouseDownOwned) != 5 or @alignOf(T_MouseDownOwned) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'MouseDownOwned' to be 5 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_MouseDownOwned),
                    @alignOf(T_MouseDownOwned),
                }));
            }
            const T_MouseDownOwnedUnlessPopupClose = @TypeOf(this.MouseDownOwnedUnlessPopupClose);
            if (@sizeOf(T_MouseDownOwnedUnlessPopupClose) != 5 or @alignOf(T_MouseDownOwnedUnlessPopupClose) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'MouseDownOwnedUnlessPopupClose' to be 5 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_MouseDownOwnedUnlessPopupClose),
                    @alignOf(T_MouseDownOwnedUnlessPopupClose),
                }));
            }
            const T_MouseWheelRequestAxisSwap = @TypeOf(this.MouseWheelRequestAxisSwap);
            if (@sizeOf(T_MouseWheelRequestAxisSwap) != 1 or @alignOf(T_MouseWheelRequestAxisSwap) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'MouseWheelRequestAxisSwap' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_MouseWheelRequestAxisSwap),
                    @alignOf(T_MouseWheelRequestAxisSwap),
                }));
            }
            const T_MouseCtrlLeftAsRightClick = @TypeOf(this.MouseCtrlLeftAsRightClick);
            if (@sizeOf(T_MouseCtrlLeftAsRightClick) != 1 or @alignOf(T_MouseCtrlLeftAsRightClick) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'MouseCtrlLeftAsRightClick' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_MouseCtrlLeftAsRightClick),
                    @alignOf(T_MouseCtrlLeftAsRightClick),
                }));
            }
            const T_MouseDownDuration = @TypeOf(this.MouseDownDuration);
            if (@sizeOf(T_MouseDownDuration) != 20 or @alignOf(T_MouseDownDuration) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'MouseDownDuration' to be 20 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_MouseDownDuration),
                    @alignOf(T_MouseDownDuration),
                }));
            }
            const T_MouseDownDurationPrev = @TypeOf(this.MouseDownDurationPrev);
            if (@sizeOf(T_MouseDownDurationPrev) != 20 or @alignOf(T_MouseDownDurationPrev) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'MouseDownDurationPrev' to be 20 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_MouseDownDurationPrev),
                    @alignOf(T_MouseDownDurationPrev),
                }));
            }
            const T_MouseDragMaxDistanceSqr = @TypeOf(this.MouseDragMaxDistanceSqr);
            if (@sizeOf(T_MouseDragMaxDistanceSqr) != 20 or @alignOf(T_MouseDragMaxDistanceSqr) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'MouseDragMaxDistanceSqr' to be 20 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_MouseDragMaxDistanceSqr),
                    @alignOf(T_MouseDragMaxDistanceSqr),
                }));
            }
            const T_PenPressure = @TypeOf(this.PenPressure);
            if (@sizeOf(T_PenPressure) != 4 or @alignOf(T_PenPressure) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'PenPressure' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_PenPressure),
                    @alignOf(T_PenPressure),
                }));
            }
            const T_AppFocusLost = @TypeOf(this.AppFocusLost);
            if (@sizeOf(T_AppFocusLost) != 1 or @alignOf(T_AppFocusLost) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'AppFocusLost' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_AppFocusLost),
                    @alignOf(T_AppFocusLost),
                }));
            }
            const T_AppAcceptingEvents = @TypeOf(this.AppAcceptingEvents);
            if (@sizeOf(T_AppAcceptingEvents) != 1 or @alignOf(T_AppAcceptingEvents) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'AppAcceptingEvents' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_AppAcceptingEvents),
                    @alignOf(T_AppAcceptingEvents),
                }));
            }
            const T_InputQueueSurrogate = @TypeOf(this.InputQueueSurrogate);
            if (@sizeOf(T_InputQueueSurrogate) != 2 or @alignOf(T_InputQueueSurrogate) != 2) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'InputQueueSurrogate' to be 2 bytes with 2 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_InputQueueSurrogate),
                    @alignOf(T_InputQueueSurrogate),
                }));
            }
            const T_FontGlobalScale = @TypeOf(this.FontGlobalScale);
            if (@sizeOf(T_FontGlobalScale) != 4 or @alignOf(T_FontGlobalScale) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'FontGlobalScale' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_FontGlobalScale),
                    @alignOf(T_FontGlobalScale),
                }));
            }
            const T_GetClipboardTextFn = @TypeOf(this.GetClipboardTextFn);
            if (@sizeOf(T_GetClipboardTextFn) != 8 or @alignOf(T_GetClipboardTextFn) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'GetClipboardTextFn' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_GetClipboardTextFn),
                    @alignOf(T_GetClipboardTextFn),
                }));
            }
            const T_SetClipboardTextFn = @TypeOf(this.SetClipboardTextFn);
            if (@sizeOf(T_SetClipboardTextFn) != 8 or @alignOf(T_SetClipboardTextFn) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'SetClipboardTextFn' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_SetClipboardTextFn),
                    @alignOf(T_SetClipboardTextFn),
                }));
            }
            const T_ClipboardUserData = @TypeOf(this.ClipboardUserData);
            if (@sizeOf(T_ClipboardUserData) != 8 or @alignOf(T_ClipboardUserData) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ClipboardUserData' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ClipboardUserData),
                    @alignOf(T_ClipboardUserData),
                }));
            }
        }
    }
};

pub const ImGuiInputTextCallbackData = extern struct {
    Ctx: [*c]ImGuiContext,
    EventFlag: i32,
    Flags: i32,
    UserData: *void,
    EventChar: u16,
    EventKey: ImGuiKey,
    Buf: [*c]i8,
    BufTextLen: i32,
    BufSize: i32,
    BufDirty: bool,
    CursorPos: i32,
    SelectionStart: i32,
    SelectionEnd: i32,
    comptime {
        if (@sizeOf(@This()) != 64 or @alignOf(@This()) != 8) {
            @compileLog(@import("std").fmt.comptimePrint("Expected type 'ImGuiInputTextCallbackData' to be 64 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                @sizeOf(@This()),
                @alignOf(@This()),
            }));

            const this: @This() = undefined;

            const T_Ctx = @TypeOf(this.Ctx);
            if (@sizeOf(T_Ctx) != 8 or @alignOf(T_Ctx) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Ctx' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Ctx),
                    @alignOf(T_Ctx),
                }));
            }
            const T_EventFlag = @TypeOf(this.EventFlag);
            if (@sizeOf(T_EventFlag) != 4 or @alignOf(T_EventFlag) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'EventFlag' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_EventFlag),
                    @alignOf(T_EventFlag),
                }));
            }
            const T_Flags = @TypeOf(this.Flags);
            if (@sizeOf(T_Flags) != 4 or @alignOf(T_Flags) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Flags' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Flags),
                    @alignOf(T_Flags),
                }));
            }
            const T_UserData = @TypeOf(this.UserData);
            if (@sizeOf(T_UserData) != 8 or @alignOf(T_UserData) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'UserData' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_UserData),
                    @alignOf(T_UserData),
                }));
            }
            const T_EventChar = @TypeOf(this.EventChar);
            if (@sizeOf(T_EventChar) != 2 or @alignOf(T_EventChar) != 2) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'EventChar' to be 2 bytes with 2 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_EventChar),
                    @alignOf(T_EventChar),
                }));
            }
            const T_EventKey = @TypeOf(this.EventKey);
            if (@sizeOf(T_EventKey) != 4 or @alignOf(T_EventKey) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'EventKey' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_EventKey),
                    @alignOf(T_EventKey),
                }));
            }
            const T_Buf = @TypeOf(this.Buf);
            if (@sizeOf(T_Buf) != 8 or @alignOf(T_Buf) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Buf' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Buf),
                    @alignOf(T_Buf),
                }));
            }
            const T_BufTextLen = @TypeOf(this.BufTextLen);
            if (@sizeOf(T_BufTextLen) != 4 or @alignOf(T_BufTextLen) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'BufTextLen' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_BufTextLen),
                    @alignOf(T_BufTextLen),
                }));
            }
            const T_BufSize = @TypeOf(this.BufSize);
            if (@sizeOf(T_BufSize) != 4 or @alignOf(T_BufSize) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'BufSize' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_BufSize),
                    @alignOf(T_BufSize),
                }));
            }
            const T_BufDirty = @TypeOf(this.BufDirty);
            if (@sizeOf(T_BufDirty) != 1 or @alignOf(T_BufDirty) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'BufDirty' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_BufDirty),
                    @alignOf(T_BufDirty),
                }));
            }
            const T_CursorPos = @TypeOf(this.CursorPos);
            if (@sizeOf(T_CursorPos) != 4 or @alignOf(T_CursorPos) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'CursorPos' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_CursorPos),
                    @alignOf(T_CursorPos),
                }));
            }
            const T_SelectionStart = @TypeOf(this.SelectionStart);
            if (@sizeOf(T_SelectionStart) != 4 or @alignOf(T_SelectionStart) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'SelectionStart' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_SelectionStart),
                    @alignOf(T_SelectionStart),
                }));
            }
            const T_SelectionEnd = @TypeOf(this.SelectionEnd);
            if (@sizeOf(T_SelectionEnd) != 4 or @alignOf(T_SelectionEnd) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'SelectionEnd' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_SelectionEnd),
                    @alignOf(T_SelectionEnd),
                }));
            }
        }
    }
};

pub const ImGuiSizeCallbackData = extern struct {
    UserData: *void,
    Pos: ImVec2,
    CurrentSize: ImVec2,
    DesiredSize: ImVec2,
    comptime {
        if (@sizeOf(@This()) != 32 or @alignOf(@This()) != 8) {
            @compileLog(@import("std").fmt.comptimePrint("Expected type 'ImGuiSizeCallbackData' to be 32 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                @sizeOf(@This()),
                @alignOf(@This()),
            }));

            const this: @This() = undefined;

            const T_UserData = @TypeOf(this.UserData);
            if (@sizeOf(T_UserData) != 8 or @alignOf(T_UserData) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'UserData' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_UserData),
                    @alignOf(T_UserData),
                }));
            }
            const T_Pos = @TypeOf(this.Pos);
            if (@sizeOf(T_Pos) != 8 or @alignOf(T_Pos) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Pos' to be 8 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Pos),
                    @alignOf(T_Pos),
                }));
            }
            const T_CurrentSize = @TypeOf(this.CurrentSize);
            if (@sizeOf(T_CurrentSize) != 8 or @alignOf(T_CurrentSize) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'CurrentSize' to be 8 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_CurrentSize),
                    @alignOf(T_CurrentSize),
                }));
            }
            const T_DesiredSize = @TypeOf(this.DesiredSize);
            if (@sizeOf(T_DesiredSize) != 8 or @alignOf(T_DesiredSize) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'DesiredSize' to be 8 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_DesiredSize),
                    @alignOf(T_DesiredSize),
                }));
            }
        }
    }
};

pub const ImGuiPayload = extern struct {
    Data: *void,
    DataSize: i32,
    SourceId: u32,
    SourceParentId: u32,
    DataFrameCount: i32,
    DataType: [33]i8,
    Preview: bool,
    Delivery: bool,
    comptime {
        if (@sizeOf(@This()) != 64 or @alignOf(@This()) != 8) {
            @compileLog(@import("std").fmt.comptimePrint("Expected type 'ImGuiPayload' to be 64 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                @sizeOf(@This()),
                @alignOf(@This()),
            }));

            const this: @This() = undefined;

            const T_Data = @TypeOf(this.Data);
            if (@sizeOf(T_Data) != 8 or @alignOf(T_Data) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Data' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Data),
                    @alignOf(T_Data),
                }));
            }
            const T_DataSize = @TypeOf(this.DataSize);
            if (@sizeOf(T_DataSize) != 4 or @alignOf(T_DataSize) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'DataSize' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_DataSize),
                    @alignOf(T_DataSize),
                }));
            }
            const T_SourceId = @TypeOf(this.SourceId);
            if (@sizeOf(T_SourceId) != 4 or @alignOf(T_SourceId) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'SourceId' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_SourceId),
                    @alignOf(T_SourceId),
                }));
            }
            const T_SourceParentId = @TypeOf(this.SourceParentId);
            if (@sizeOf(T_SourceParentId) != 4 or @alignOf(T_SourceParentId) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'SourceParentId' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_SourceParentId),
                    @alignOf(T_SourceParentId),
                }));
            }
            const T_DataFrameCount = @TypeOf(this.DataFrameCount);
            if (@sizeOf(T_DataFrameCount) != 4 or @alignOf(T_DataFrameCount) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'DataFrameCount' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_DataFrameCount),
                    @alignOf(T_DataFrameCount),
                }));
            }
            const T_DataType = @TypeOf(this.DataType);
            if (@sizeOf(T_DataType) != 33 or @alignOf(T_DataType) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'DataType' to be 33 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_DataType),
                    @alignOf(T_DataType),
                }));
            }
            const T_Preview = @TypeOf(this.Preview);
            if (@sizeOf(T_Preview) != 1 or @alignOf(T_Preview) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Preview' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Preview),
                    @alignOf(T_Preview),
                }));
            }
            const T_Delivery = @TypeOf(this.Delivery);
            if (@sizeOf(T_Delivery) != 1 or @alignOf(T_Delivery) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Delivery' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Delivery),
                    @alignOf(T_Delivery),
                }));
            }
        }
    }
};

pub const ImGuiOnceUponAFrame = extern struct {
    RefFrame: i32,
    comptime {
        if (@sizeOf(@This()) != 4 or @alignOf(@This()) != 4) {
            @compileLog(@import("std").fmt.comptimePrint("Expected type 'ImGuiOnceUponAFrame' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                @sizeOf(@This()),
                @alignOf(@This()),
            }));

            const this: @This() = undefined;

            const T_RefFrame = @TypeOf(this.RefFrame);
            if (@sizeOf(T_RefFrame) != 4 or @alignOf(T_RefFrame) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'RefFrame' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_RefFrame),
                    @alignOf(T_RefFrame),
                }));
            }
        }
    }
};

pub const ImGuiTextFilter = extern struct {
    pub const ImGuiTextRange = extern struct {
        b: [*c]const i8,
        e: [*c]const i8,
        comptime {
            if (@sizeOf(@This()) != 16 or @alignOf(@This()) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected type 'ImGuiTextRange' to be 16 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(@This()),
                    @alignOf(@This()),
                }));

                const this: @This() = undefined;

                const T_b = @TypeOf(this.b);
                if (@sizeOf(T_b) != 8 or @alignOf(T_b) != 8) {
                    @compileLog(@import("std").fmt.comptimePrint("Expected field 'b' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                        @sizeOf(T_b),
                        @alignOf(T_b),
                    }));
                }
                const T_e = @TypeOf(this.e);
                if (@sizeOf(T_e) != 8 or @alignOf(T_e) != 8) {
                    @compileLog(@import("std").fmt.comptimePrint("Expected field 'e' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                        @sizeOf(T_e),
                        @alignOf(T_e),
                    }));
                }
            }
        }
    };

    InputBuf: [256]i8,
    Filters: [16]u8 align(8),
    CountGrep: i32,
    comptime {
        if (@sizeOf(@This()) != 280 or @alignOf(@This()) != 8) {
            @compileLog(@import("std").fmt.comptimePrint("Expected type 'ImGuiTextFilter' to be 280 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                @sizeOf(@This()),
                @alignOf(@This()),
            }));

            const this: @This() = undefined;

            const T_InputBuf = @TypeOf(this.InputBuf);
            if (@sizeOf(T_InputBuf) != 256 or @alignOf(T_InputBuf) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'InputBuf' to be 256 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_InputBuf),
                    @alignOf(T_InputBuf),
                }));
            }
            const T_CountGrep = @TypeOf(this.CountGrep);
            if (@sizeOf(T_CountGrep) != 4 or @alignOf(T_CountGrep) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'CountGrep' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_CountGrep),
                    @alignOf(T_CountGrep),
                }));
            }
        }
    }
};

pub const ImGuiTextBuffer = extern struct {
    Buf: [16]u8 align(8),
    comptime {
        if (@sizeOf(@This()) != 16 or @alignOf(@This()) != 8) {
            @compileLog(@import("std").fmt.comptimePrint("Expected type 'ImGuiTextBuffer' to be 16 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                @sizeOf(@This()),
                @alignOf(@This()),
            }));
        }
    }
};

pub const ImGuiStoragePair = extern struct {
    key: u32,
    anon0: extern union {
        val_i: i32,
        val_f: f32,
        val_p: *void,
        comptime {
            if (@sizeOf(@This()) != 8 or @alignOf(@This()) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected type 'Anonymous Type' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(@This()),
                    @alignOf(@This()),
                }));

                const this: @This() = undefined;

                const T_val_i = @TypeOf(this.val_i);
                if (@sizeOf(T_val_i) != 4 or @alignOf(T_val_i) != 4) {
                    @compileLog(@import("std").fmt.comptimePrint("Expected field 'val_i' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                        @sizeOf(T_val_i),
                        @alignOf(T_val_i),
                    }));
                }
                const T_val_f = @TypeOf(this.val_f);
                if (@sizeOf(T_val_f) != 4 or @alignOf(T_val_f) != 4) {
                    @compileLog(@import("std").fmt.comptimePrint("Expected field 'val_f' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                        @sizeOf(T_val_f),
                        @alignOf(T_val_f),
                    }));
                }
                const T_val_p = @TypeOf(this.val_p);
                if (@sizeOf(T_val_p) != 8 or @alignOf(T_val_p) != 8) {
                    @compileLog(@import("std").fmt.comptimePrint("Expected field 'val_p' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                        @sizeOf(T_val_p),
                        @alignOf(T_val_p),
                    }));
                }
            }
        }
    },
    comptime {
        if (@sizeOf(@This()) != 16 or @alignOf(@This()) != 8) {
            @compileLog(@import("std").fmt.comptimePrint("Expected type 'ImGuiStoragePair' to be 16 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                @sizeOf(@This()),
                @alignOf(@This()),
            }));

            const this: @This() = undefined;

            const T_key = @TypeOf(this.key);
            if (@sizeOf(T_key) != 4 or @alignOf(T_key) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'key' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_key),
                    @alignOf(T_key),
                }));
            }
        }
    }
};

pub const ImGuiStorage = extern struct {
    Data: [16]u8 align(8),
    comptime {
        if (@sizeOf(@This()) != 16 or @alignOf(@This()) != 8) {
            @compileLog(@import("std").fmt.comptimePrint("Expected type 'ImGuiStorage' to be 16 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                @sizeOf(@This()),
                @alignOf(@This()),
            }));
        }
    }
};

pub const ImGuiListClipperFlags_ = packed struct(i32) {
    data: i32,
    pub const ImGuiListClipperFlags_None: ImGuiListClipperFlags_ = .{ .data = 0 };
    pub const ImGuiListClipperFlags_NoSetTableRowCounters: ImGuiListClipperFlags_ = .{ .data = 1 };
};

pub const ImGuiListClipper = extern struct {
    Ctx: [*c]ImGuiContext,
    DisplayStart: i32,
    DisplayEnd: i32,
    ItemsCount: i32,
    ItemsHeight: f32,
    StartPosY: f64,
    StartSeekOffsetY: f64,
    TempData: *void,
    Flags: i32,
    comptime {
        if (@sizeOf(@This()) != 56 or @alignOf(@This()) != 8) {
            @compileLog(@import("std").fmt.comptimePrint("Expected type 'ImGuiListClipper' to be 56 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                @sizeOf(@This()),
                @alignOf(@This()),
            }));

            const this: @This() = undefined;

            const T_Ctx = @TypeOf(this.Ctx);
            if (@sizeOf(T_Ctx) != 8 or @alignOf(T_Ctx) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Ctx' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Ctx),
                    @alignOf(T_Ctx),
                }));
            }
            const T_DisplayStart = @TypeOf(this.DisplayStart);
            if (@sizeOf(T_DisplayStart) != 4 or @alignOf(T_DisplayStart) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'DisplayStart' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_DisplayStart),
                    @alignOf(T_DisplayStart),
                }));
            }
            const T_DisplayEnd = @TypeOf(this.DisplayEnd);
            if (@sizeOf(T_DisplayEnd) != 4 or @alignOf(T_DisplayEnd) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'DisplayEnd' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_DisplayEnd),
                    @alignOf(T_DisplayEnd),
                }));
            }
            const T_ItemsCount = @TypeOf(this.ItemsCount);
            if (@sizeOf(T_ItemsCount) != 4 or @alignOf(T_ItemsCount) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ItemsCount' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ItemsCount),
                    @alignOf(T_ItemsCount),
                }));
            }
            const T_ItemsHeight = @TypeOf(this.ItemsHeight);
            if (@sizeOf(T_ItemsHeight) != 4 or @alignOf(T_ItemsHeight) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ItemsHeight' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ItemsHeight),
                    @alignOf(T_ItemsHeight),
                }));
            }
            const T_StartPosY = @TypeOf(this.StartPosY);
            if (@sizeOf(T_StartPosY) != 8 or @alignOf(T_StartPosY) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'StartPosY' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_StartPosY),
                    @alignOf(T_StartPosY),
                }));
            }
            const T_StartSeekOffsetY = @TypeOf(this.StartSeekOffsetY);
            if (@sizeOf(T_StartSeekOffsetY) != 8 or @alignOf(T_StartSeekOffsetY) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'StartSeekOffsetY' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_StartSeekOffsetY),
                    @alignOf(T_StartSeekOffsetY),
                }));
            }
            const T_TempData = @TypeOf(this.TempData);
            if (@sizeOf(T_TempData) != 8 or @alignOf(T_TempData) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'TempData' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_TempData),
                    @alignOf(T_TempData),
                }));
            }
            const T_Flags = @TypeOf(this.Flags);
            if (@sizeOf(T_Flags) != 4 or @alignOf(T_Flags) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Flags' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Flags),
                    @alignOf(T_Flags),
                }));
            }
        }
    }
};

pub const ImColor = extern struct {
    Value: ImVec4,
    comptime {
        if (@sizeOf(@This()) != 16 or @alignOf(@This()) != 4) {
            @compileLog(@import("std").fmt.comptimePrint("Expected type 'ImColor' to be 16 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                @sizeOf(@This()),
                @alignOf(@This()),
            }));

            const this: @This() = undefined;

            const T_Value = @TypeOf(this.Value);
            if (@sizeOf(T_Value) != 16 or @alignOf(T_Value) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Value' to be 16 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Value),
                    @alignOf(T_Value),
                }));
            }
        }
    }
};

pub const ImGuiMultiSelectFlags_ = packed struct(i32) {
    data: i32,
    pub const ImGuiMultiSelectFlags_None: ImGuiMultiSelectFlags_ = .{ .data = 0 };
    pub const ImGuiMultiSelectFlags_SingleSelect: ImGuiMultiSelectFlags_ = .{ .data = 1 };
    pub const ImGuiMultiSelectFlags_NoSelectAll: ImGuiMultiSelectFlags_ = .{ .data = 2 };
    pub const ImGuiMultiSelectFlags_NoRangeSelect: ImGuiMultiSelectFlags_ = .{ .data = 4 };
    pub const ImGuiMultiSelectFlags_NoAutoSelect: ImGuiMultiSelectFlags_ = .{ .data = 8 };
    pub const ImGuiMultiSelectFlags_NoAutoClear: ImGuiMultiSelectFlags_ = .{ .data = 16 };
    pub const ImGuiMultiSelectFlags_NoAutoClearOnReselect: ImGuiMultiSelectFlags_ = .{ .data = 32 };
    pub const ImGuiMultiSelectFlags_BoxSelect1d: ImGuiMultiSelectFlags_ = .{ .data = 64 };
    pub const ImGuiMultiSelectFlags_BoxSelect2d: ImGuiMultiSelectFlags_ = .{ .data = 128 };
    pub const ImGuiMultiSelectFlags_BoxSelectNoScroll: ImGuiMultiSelectFlags_ = .{ .data = 256 };
    pub const ImGuiMultiSelectFlags_ClearOnEscape: ImGuiMultiSelectFlags_ = .{ .data = 512 };
    pub const ImGuiMultiSelectFlags_ClearOnClickVoid: ImGuiMultiSelectFlags_ = .{ .data = 1024 };
    pub const ImGuiMultiSelectFlags_ScopeWindow: ImGuiMultiSelectFlags_ = .{ .data = 2048 };
    pub const ImGuiMultiSelectFlags_ScopeRect: ImGuiMultiSelectFlags_ = .{ .data = 4096 };
    pub const ImGuiMultiSelectFlags_SelectOnClick: ImGuiMultiSelectFlags_ = .{ .data = 8192 };
    pub const ImGuiMultiSelectFlags_SelectOnClickRelease: ImGuiMultiSelectFlags_ = .{ .data = 16384 };
    pub const ImGuiMultiSelectFlags_NavWrapX: ImGuiMultiSelectFlags_ = .{ .data = 65536 };
};

pub const ImGuiMultiSelectIO = extern struct {
    Requests: [16]u8 align(8),
    RangeSrcItem: i64,
    NavIdItem: i64,
    NavIdSelected: bool,
    RangeSrcReset: bool,
    ItemsCount: i32,
    comptime {
        if (@sizeOf(@This()) != 40 or @alignOf(@This()) != 8) {
            @compileLog(@import("std").fmt.comptimePrint("Expected type 'ImGuiMultiSelectIO' to be 40 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                @sizeOf(@This()),
                @alignOf(@This()),
            }));

            const this: @This() = undefined;

            const T_RangeSrcItem = @TypeOf(this.RangeSrcItem);
            if (@sizeOf(T_RangeSrcItem) != 8 or @alignOf(T_RangeSrcItem) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'RangeSrcItem' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_RangeSrcItem),
                    @alignOf(T_RangeSrcItem),
                }));
            }
            const T_NavIdItem = @TypeOf(this.NavIdItem);
            if (@sizeOf(T_NavIdItem) != 8 or @alignOf(T_NavIdItem) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'NavIdItem' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_NavIdItem),
                    @alignOf(T_NavIdItem),
                }));
            }
            const T_NavIdSelected = @TypeOf(this.NavIdSelected);
            if (@sizeOf(T_NavIdSelected) != 1 or @alignOf(T_NavIdSelected) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'NavIdSelected' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_NavIdSelected),
                    @alignOf(T_NavIdSelected),
                }));
            }
            const T_RangeSrcReset = @TypeOf(this.RangeSrcReset);
            if (@sizeOf(T_RangeSrcReset) != 1 or @alignOf(T_RangeSrcReset) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'RangeSrcReset' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_RangeSrcReset),
                    @alignOf(T_RangeSrcReset),
                }));
            }
            const T_ItemsCount = @TypeOf(this.ItemsCount);
            if (@sizeOf(T_ItemsCount) != 4 or @alignOf(T_ItemsCount) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ItemsCount' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ItemsCount),
                    @alignOf(T_ItemsCount),
                }));
            }
        }
    }
};

pub const ImGuiSelectionRequestType = packed struct(i32) {
    data: i32,
    pub const ImGuiSelectionRequestType_None: ImGuiSelectionRequestType = .{ .data = 0 };
    pub const ImGuiSelectionRequestType_SetAll: ImGuiSelectionRequestType = .{ .data = 1 };
    pub const ImGuiSelectionRequestType_SetRange: ImGuiSelectionRequestType = .{ .data = 2 };
};

pub const ImGuiSelectionRequest = extern struct {
    Type: ImGuiSelectionRequestType,
    Selected: bool,
    RangeDirection: i8,
    RangeFirstItem: i64,
    RangeLastItem: i64,
    comptime {
        if (@sizeOf(@This()) != 24 or @alignOf(@This()) != 8) {
            @compileLog(@import("std").fmt.comptimePrint("Expected type 'ImGuiSelectionRequest' to be 24 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                @sizeOf(@This()),
                @alignOf(@This()),
            }));

            const this: @This() = undefined;

            const T_Type = @TypeOf(this.Type);
            if (@sizeOf(T_Type) != 4 or @alignOf(T_Type) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Type' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Type),
                    @alignOf(T_Type),
                }));
            }
            const T_Selected = @TypeOf(this.Selected);
            if (@sizeOf(T_Selected) != 1 or @alignOf(T_Selected) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Selected' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Selected),
                    @alignOf(T_Selected),
                }));
            }
            const T_RangeDirection = @TypeOf(this.RangeDirection);
            if (@sizeOf(T_RangeDirection) != 1 or @alignOf(T_RangeDirection) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'RangeDirection' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_RangeDirection),
                    @alignOf(T_RangeDirection),
                }));
            }
            const T_RangeFirstItem = @TypeOf(this.RangeFirstItem);
            if (@sizeOf(T_RangeFirstItem) != 8 or @alignOf(T_RangeFirstItem) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'RangeFirstItem' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_RangeFirstItem),
                    @alignOf(T_RangeFirstItem),
                }));
            }
            const T_RangeLastItem = @TypeOf(this.RangeLastItem);
            if (@sizeOf(T_RangeLastItem) != 8 or @alignOf(T_RangeLastItem) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'RangeLastItem' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_RangeLastItem),
                    @alignOf(T_RangeLastItem),
                }));
            }
        }
    }
};

pub const ImGuiSelectionBasicStorage = extern struct {
    Size: i32,
    PreserveOrder: bool,
    UserData: *void,
    AdapterIndexToStorageId: [*c]*const fn ([*c]ImGuiSelectionBasicStorage, i32) callconv(.c) u32,
    _SelectionOrder: i32,
    _Storage: ImGuiStorage,
    comptime {
        if (@sizeOf(@This()) != 48 or @alignOf(@This()) != 8) {
            @compileLog(@import("std").fmt.comptimePrint("Expected type 'ImGuiSelectionBasicStorage' to be 48 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                @sizeOf(@This()),
                @alignOf(@This()),
            }));

            const this: @This() = undefined;

            const T_Size = @TypeOf(this.Size);
            if (@sizeOf(T_Size) != 4 or @alignOf(T_Size) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Size' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Size),
                    @alignOf(T_Size),
                }));
            }
            const T_PreserveOrder = @TypeOf(this.PreserveOrder);
            if (@sizeOf(T_PreserveOrder) != 1 or @alignOf(T_PreserveOrder) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'PreserveOrder' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_PreserveOrder),
                    @alignOf(T_PreserveOrder),
                }));
            }
            const T_UserData = @TypeOf(this.UserData);
            if (@sizeOf(T_UserData) != 8 or @alignOf(T_UserData) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'UserData' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_UserData),
                    @alignOf(T_UserData),
                }));
            }
            const T_AdapterIndexToStorageId = @TypeOf(this.AdapterIndexToStorageId);
            if (@sizeOf(T_AdapterIndexToStorageId) != 8 or @alignOf(T_AdapterIndexToStorageId) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'AdapterIndexToStorageId' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_AdapterIndexToStorageId),
                    @alignOf(T_AdapterIndexToStorageId),
                }));
            }
            const T__SelectionOrder = @TypeOf(this._SelectionOrder);
            if (@sizeOf(T__SelectionOrder) != 4 or @alignOf(T__SelectionOrder) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field '_SelectionOrder' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T__SelectionOrder),
                    @alignOf(T__SelectionOrder),
                }));
            }
            const T__Storage = @TypeOf(this._Storage);
            if (@sizeOf(T__Storage) != 16 or @alignOf(T__Storage) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field '_Storage' to be 16 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T__Storage),
                    @alignOf(T__Storage),
                }));
            }
        }
    }
};

pub const ImGuiSelectionExternalStorage = extern struct {
    UserData: *void,
    AdapterSetItemSelected: [*c]*const fn ([*c]ImGuiSelectionExternalStorage, i32, bool) callconv(.c) void,
    comptime {
        if (@sizeOf(@This()) != 16 or @alignOf(@This()) != 8) {
            @compileLog(@import("std").fmt.comptimePrint("Expected type 'ImGuiSelectionExternalStorage' to be 16 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                @sizeOf(@This()),
                @alignOf(@This()),
            }));

            const this: @This() = undefined;

            const T_UserData = @TypeOf(this.UserData);
            if (@sizeOf(T_UserData) != 8 or @alignOf(T_UserData) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'UserData' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_UserData),
                    @alignOf(T_UserData),
                }));
            }
            const T_AdapterSetItemSelected = @TypeOf(this.AdapterSetItemSelected);
            if (@sizeOf(T_AdapterSetItemSelected) != 8 or @alignOf(T_AdapterSetItemSelected) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'AdapterSetItemSelected' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_AdapterSetItemSelected),
                    @alignOf(T_AdapterSetItemSelected),
                }));
            }
        }
    }
};

pub const ImDrawCmd = extern struct {
    ClipRect: ImVec4,
    TexRef: ImTextureRef,
    VtxOffset: u32,
    IdxOffset: u32,
    ElemCount: u32,
    UserCallback: [*c]*const fn ([*c]const ImDrawList, [*c]const ImDrawCmd) callconv(.c) void,
    UserCallbackData: *void,
    UserCallbackDataSize: i32,
    UserCallbackDataOffset: i32,
    comptime {
        if (@sizeOf(@This()) != 72 or @alignOf(@This()) != 8) {
            @compileLog(@import("std").fmt.comptimePrint("Expected type 'ImDrawCmd' to be 72 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                @sizeOf(@This()),
                @alignOf(@This()),
            }));

            const this: @This() = undefined;

            const T_ClipRect = @TypeOf(this.ClipRect);
            if (@sizeOf(T_ClipRect) != 16 or @alignOf(T_ClipRect) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ClipRect' to be 16 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ClipRect),
                    @alignOf(T_ClipRect),
                }));
            }
            const T_TexRef = @TypeOf(this.TexRef);
            if (@sizeOf(T_TexRef) != 16 or @alignOf(T_TexRef) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'TexRef' to be 16 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_TexRef),
                    @alignOf(T_TexRef),
                }));
            }
            const T_VtxOffset = @TypeOf(this.VtxOffset);
            if (@sizeOf(T_VtxOffset) != 4 or @alignOf(T_VtxOffset) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'VtxOffset' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_VtxOffset),
                    @alignOf(T_VtxOffset),
                }));
            }
            const T_IdxOffset = @TypeOf(this.IdxOffset);
            if (@sizeOf(T_IdxOffset) != 4 or @alignOf(T_IdxOffset) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'IdxOffset' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_IdxOffset),
                    @alignOf(T_IdxOffset),
                }));
            }
            const T_ElemCount = @TypeOf(this.ElemCount);
            if (@sizeOf(T_ElemCount) != 4 or @alignOf(T_ElemCount) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ElemCount' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ElemCount),
                    @alignOf(T_ElemCount),
                }));
            }
            const T_UserCallback = @TypeOf(this.UserCallback);
            if (@sizeOf(T_UserCallback) != 8 or @alignOf(T_UserCallback) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'UserCallback' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_UserCallback),
                    @alignOf(T_UserCallback),
                }));
            }
            const T_UserCallbackData = @TypeOf(this.UserCallbackData);
            if (@sizeOf(T_UserCallbackData) != 8 or @alignOf(T_UserCallbackData) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'UserCallbackData' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_UserCallbackData),
                    @alignOf(T_UserCallbackData),
                }));
            }
            const T_UserCallbackDataSize = @TypeOf(this.UserCallbackDataSize);
            if (@sizeOf(T_UserCallbackDataSize) != 4 or @alignOf(T_UserCallbackDataSize) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'UserCallbackDataSize' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_UserCallbackDataSize),
                    @alignOf(T_UserCallbackDataSize),
                }));
            }
            const T_UserCallbackDataOffset = @TypeOf(this.UserCallbackDataOffset);
            if (@sizeOf(T_UserCallbackDataOffset) != 4 or @alignOf(T_UserCallbackDataOffset) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'UserCallbackDataOffset' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_UserCallbackDataOffset),
                    @alignOf(T_UserCallbackDataOffset),
                }));
            }
        }
    }
};

pub const ImDrawVert = extern struct {
    pos: ImVec2,
    uv: ImVec2,
    col: u32,
    comptime {
        if (@sizeOf(@This()) != 20 or @alignOf(@This()) != 4) {
            @compileLog(@import("std").fmt.comptimePrint("Expected type 'ImDrawVert' to be 20 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                @sizeOf(@This()),
                @alignOf(@This()),
            }));

            const this: @This() = undefined;

            const T_pos = @TypeOf(this.pos);
            if (@sizeOf(T_pos) != 8 or @alignOf(T_pos) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'pos' to be 8 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_pos),
                    @alignOf(T_pos),
                }));
            }
            const T_uv = @TypeOf(this.uv);
            if (@sizeOf(T_uv) != 8 or @alignOf(T_uv) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'uv' to be 8 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_uv),
                    @alignOf(T_uv),
                }));
            }
            const T_col = @TypeOf(this.col);
            if (@sizeOf(T_col) != 4 or @alignOf(T_col) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'col' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_col),
                    @alignOf(T_col),
                }));
            }
        }
    }
};

pub const ImDrawCmdHeader = extern struct {
    ClipRect: ImVec4,
    TexRef: ImTextureRef,
    VtxOffset: u32,
    comptime {
        if (@sizeOf(@This()) != 40 or @alignOf(@This()) != 8) {
            @compileLog(@import("std").fmt.comptimePrint("Expected type 'ImDrawCmdHeader' to be 40 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                @sizeOf(@This()),
                @alignOf(@This()),
            }));

            const this: @This() = undefined;

            const T_ClipRect = @TypeOf(this.ClipRect);
            if (@sizeOf(T_ClipRect) != 16 or @alignOf(T_ClipRect) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ClipRect' to be 16 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ClipRect),
                    @alignOf(T_ClipRect),
                }));
            }
            const T_TexRef = @TypeOf(this.TexRef);
            if (@sizeOf(T_TexRef) != 16 or @alignOf(T_TexRef) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'TexRef' to be 16 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_TexRef),
                    @alignOf(T_TexRef),
                }));
            }
            const T_VtxOffset = @TypeOf(this.VtxOffset);
            if (@sizeOf(T_VtxOffset) != 4 or @alignOf(T_VtxOffset) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'VtxOffset' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_VtxOffset),
                    @alignOf(T_VtxOffset),
                }));
            }
        }
    }
};

pub const ImDrawChannel = extern struct {
    _CmdBuffer: [16]u8 align(8),
    _IdxBuffer: [16]u8 align(8),
    comptime {
        if (@sizeOf(@This()) != 32 or @alignOf(@This()) != 8) {
            @compileLog(@import("std").fmt.comptimePrint("Expected type 'ImDrawChannel' to be 32 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                @sizeOf(@This()),
                @alignOf(@This()),
            }));
        }
    }
};

pub const ImDrawListSplitter = extern struct {
    _Current: i32,
    _Count: i32,
    _Channels: [16]u8 align(8),
    comptime {
        if (@sizeOf(@This()) != 24 or @alignOf(@This()) != 8) {
            @compileLog(@import("std").fmt.comptimePrint("Expected type 'ImDrawListSplitter' to be 24 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                @sizeOf(@This()),
                @alignOf(@This()),
            }));

            const this: @This() = undefined;

            const T__Current = @TypeOf(this._Current);
            if (@sizeOf(T__Current) != 4 or @alignOf(T__Current) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field '_Current' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T__Current),
                    @alignOf(T__Current),
                }));
            }
            const T__Count = @TypeOf(this._Count);
            if (@sizeOf(T__Count) != 4 or @alignOf(T__Count) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field '_Count' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T__Count),
                    @alignOf(T__Count),
                }));
            }
        }
    }
};

pub const ImDrawFlags_ = packed struct(i32) {
    data: i32,
    pub const ImDrawFlags_None: ImDrawFlags_ = .{ .data = 0 };
    pub const ImDrawFlags_Closed: ImDrawFlags_ = .{ .data = 1 };
    pub const ImDrawFlags_RoundCornersTopLeft: ImDrawFlags_ = .{ .data = 16 };
    pub const ImDrawFlags_RoundCornersTopRight: ImDrawFlags_ = .{ .data = 32 };
    pub const ImDrawFlags_RoundCornersBottomLeft: ImDrawFlags_ = .{ .data = 64 };
    pub const ImDrawFlags_RoundCornersBottomRight: ImDrawFlags_ = .{ .data = 128 };
    pub const ImDrawFlags_RoundCornersNone: ImDrawFlags_ = .{ .data = 256 };
    pub const ImDrawFlags_RoundCornersTop: ImDrawFlags_ = .{ .data = 48 };
    pub const ImDrawFlags_RoundCornersBottom: ImDrawFlags_ = .{ .data = 192 };
    pub const ImDrawFlags_RoundCornersLeft: ImDrawFlags_ = .{ .data = 80 };
    pub const ImDrawFlags_RoundCornersRight: ImDrawFlags_ = .{ .data = 160 };
    pub const ImDrawFlags_RoundCornersAll: ImDrawFlags_ = .{ .data = 240 };
    pub const ImDrawFlags_RoundCornersDefault_: ImDrawFlags_ = .{ .data = 240 };
    pub const ImDrawFlags_RoundCornersMask_: ImDrawFlags_ = .{ .data = 496 };
};

pub const ImDrawListFlags_ = packed struct(i32) {
    data: i32,
    pub const ImDrawListFlags_None: ImDrawListFlags_ = .{ .data = 0 };
    pub const ImDrawListFlags_AntiAliasedLines: ImDrawListFlags_ = .{ .data = 1 };
    pub const ImDrawListFlags_AntiAliasedLinesUseTex: ImDrawListFlags_ = .{ .data = 2 };
    pub const ImDrawListFlags_AntiAliasedFill: ImDrawListFlags_ = .{ .data = 4 };
    pub const ImDrawListFlags_AllowVtxOffset: ImDrawListFlags_ = .{ .data = 8 };
};

pub const ImDrawList = extern struct {
    CmdBuffer: [16]u8 align(8),
    IdxBuffer: [16]u8 align(8),
    VtxBuffer: [16]u8 align(8),
    Flags: i32,
    _VtxCurrentIdx: u32,
    _Data: [*c]ImDrawListSharedData,
    _VtxWritePtr: [*c]ImDrawVert,
    _IdxWritePtr: [*c]u16,
    _Path: [16]u8 align(8),
    _CmdHeader: ImDrawCmdHeader,
    _Splitter: ImDrawListSplitter,
    _ClipRectStack: [16]u8 align(8),
    _TextureStack: [16]u8 align(8),
    _CallbacksDataBuf: [16]u8 align(8),
    _FringeScale: f32,
    _OwnerName: [*c]const i8,
    comptime {
        if (@sizeOf(@This()) != 224 or @alignOf(@This()) != 8) {
            @compileLog(@import("std").fmt.comptimePrint("Expected type 'ImDrawList' to be 224 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                @sizeOf(@This()),
                @alignOf(@This()),
            }));

            const this: @This() = undefined;

            const T_Flags = @TypeOf(this.Flags);
            if (@sizeOf(T_Flags) != 4 or @alignOf(T_Flags) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Flags' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Flags),
                    @alignOf(T_Flags),
                }));
            }
            const T__VtxCurrentIdx = @TypeOf(this._VtxCurrentIdx);
            if (@sizeOf(T__VtxCurrentIdx) != 4 or @alignOf(T__VtxCurrentIdx) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field '_VtxCurrentIdx' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T__VtxCurrentIdx),
                    @alignOf(T__VtxCurrentIdx),
                }));
            }
            const T__Data = @TypeOf(this._Data);
            if (@sizeOf(T__Data) != 8 or @alignOf(T__Data) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field '_Data' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T__Data),
                    @alignOf(T__Data),
                }));
            }
            const T__VtxWritePtr = @TypeOf(this._VtxWritePtr);
            if (@sizeOf(T__VtxWritePtr) != 8 or @alignOf(T__VtxWritePtr) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field '_VtxWritePtr' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T__VtxWritePtr),
                    @alignOf(T__VtxWritePtr),
                }));
            }
            const T__IdxWritePtr = @TypeOf(this._IdxWritePtr);
            if (@sizeOf(T__IdxWritePtr) != 8 or @alignOf(T__IdxWritePtr) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field '_IdxWritePtr' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T__IdxWritePtr),
                    @alignOf(T__IdxWritePtr),
                }));
            }
            const T__CmdHeader = @TypeOf(this._CmdHeader);
            if (@sizeOf(T__CmdHeader) != 40 or @alignOf(T__CmdHeader) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field '_CmdHeader' to be 40 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T__CmdHeader),
                    @alignOf(T__CmdHeader),
                }));
            }
            const T__Splitter = @TypeOf(this._Splitter);
            if (@sizeOf(T__Splitter) != 24 or @alignOf(T__Splitter) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field '_Splitter' to be 24 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T__Splitter),
                    @alignOf(T__Splitter),
                }));
            }
            const T__FringeScale = @TypeOf(this._FringeScale);
            if (@sizeOf(T__FringeScale) != 4 or @alignOf(T__FringeScale) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field '_FringeScale' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T__FringeScale),
                    @alignOf(T__FringeScale),
                }));
            }
            const T__OwnerName = @TypeOf(this._OwnerName);
            if (@sizeOf(T__OwnerName) != 8 or @alignOf(T__OwnerName) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field '_OwnerName' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T__OwnerName),
                    @alignOf(T__OwnerName),
                }));
            }
        }
    }
};

pub const ImDrawData = extern struct {
    Valid: bool,
    CmdListsCount: i32,
    TotalIdxCount: i32,
    TotalVtxCount: i32,
    CmdLists: [16]u8 align(8),
    DisplayPos: ImVec2,
    DisplaySize: ImVec2,
    FramebufferScale: ImVec2,
    OwnerViewport: [*c]ImGuiViewport,
    Textures: [*c][16]u8,
    comptime {
        if (@sizeOf(@This()) != 72 or @alignOf(@This()) != 8) {
            @compileLog(@import("std").fmt.comptimePrint("Expected type 'ImDrawData' to be 72 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                @sizeOf(@This()),
                @alignOf(@This()),
            }));

            const this: @This() = undefined;

            const T_Valid = @TypeOf(this.Valid);
            if (@sizeOf(T_Valid) != 1 or @alignOf(T_Valid) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Valid' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Valid),
                    @alignOf(T_Valid),
                }));
            }
            const T_CmdListsCount = @TypeOf(this.CmdListsCount);
            if (@sizeOf(T_CmdListsCount) != 4 or @alignOf(T_CmdListsCount) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'CmdListsCount' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_CmdListsCount),
                    @alignOf(T_CmdListsCount),
                }));
            }
            const T_TotalIdxCount = @TypeOf(this.TotalIdxCount);
            if (@sizeOf(T_TotalIdxCount) != 4 or @alignOf(T_TotalIdxCount) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'TotalIdxCount' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_TotalIdxCount),
                    @alignOf(T_TotalIdxCount),
                }));
            }
            const T_TotalVtxCount = @TypeOf(this.TotalVtxCount);
            if (@sizeOf(T_TotalVtxCount) != 4 or @alignOf(T_TotalVtxCount) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'TotalVtxCount' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_TotalVtxCount),
                    @alignOf(T_TotalVtxCount),
                }));
            }
            const T_DisplayPos = @TypeOf(this.DisplayPos);
            if (@sizeOf(T_DisplayPos) != 8 or @alignOf(T_DisplayPos) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'DisplayPos' to be 8 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_DisplayPos),
                    @alignOf(T_DisplayPos),
                }));
            }
            const T_DisplaySize = @TypeOf(this.DisplaySize);
            if (@sizeOf(T_DisplaySize) != 8 or @alignOf(T_DisplaySize) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'DisplaySize' to be 8 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_DisplaySize),
                    @alignOf(T_DisplaySize),
                }));
            }
            const T_FramebufferScale = @TypeOf(this.FramebufferScale);
            if (@sizeOf(T_FramebufferScale) != 8 or @alignOf(T_FramebufferScale) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'FramebufferScale' to be 8 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_FramebufferScale),
                    @alignOf(T_FramebufferScale),
                }));
            }
            const T_OwnerViewport = @TypeOf(this.OwnerViewport);
            if (@sizeOf(T_OwnerViewport) != 8 or @alignOf(T_OwnerViewport) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'OwnerViewport' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_OwnerViewport),
                    @alignOf(T_OwnerViewport),
                }));
            }
            const T_Textures = @TypeOf(this.Textures);
            if (@sizeOf(T_Textures) != 8 or @alignOf(T_Textures) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Textures' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Textures),
                    @alignOf(T_Textures),
                }));
            }
        }
    }
};

pub const ImTextureFormat = packed struct(i32) {
    data: i32,
    pub const ImTextureFormat_RGBA32: ImTextureFormat = .{ .data = 0 };
    pub const ImTextureFormat_Alpha8: ImTextureFormat = .{ .data = 1 };
};

pub const ImTextureStatus = packed struct(i32) {
    data: i32,
    pub const ImTextureStatus_OK: ImTextureStatus = .{ .data = 0 };
    pub const ImTextureStatus_Destroyed: ImTextureStatus = .{ .data = 1 };
    pub const ImTextureStatus_WantCreate: ImTextureStatus = .{ .data = 2 };
    pub const ImTextureStatus_WantUpdates: ImTextureStatus = .{ .data = 3 };
    pub const ImTextureStatus_WantDestroy: ImTextureStatus = .{ .data = 4 };
};

pub const ImTextureRect = extern struct {
    x: u16,
    y: u16,
    w: u16,
    h: u16,
    comptime {
        if (@sizeOf(@This()) != 8 or @alignOf(@This()) != 2) {
            @compileLog(@import("std").fmt.comptimePrint("Expected type 'ImTextureRect' to be 8 bytes with 2 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                @sizeOf(@This()),
                @alignOf(@This()),
            }));

            const this: @This() = undefined;

            const T_x = @TypeOf(this.x);
            if (@sizeOf(T_x) != 2 or @alignOf(T_x) != 2) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'x' to be 2 bytes with 2 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_x),
                    @alignOf(T_x),
                }));
            }
            const T_y = @TypeOf(this.y);
            if (@sizeOf(T_y) != 2 or @alignOf(T_y) != 2) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'y' to be 2 bytes with 2 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_y),
                    @alignOf(T_y),
                }));
            }
            const T_w = @TypeOf(this.w);
            if (@sizeOf(T_w) != 2 or @alignOf(T_w) != 2) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'w' to be 2 bytes with 2 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_w),
                    @alignOf(T_w),
                }));
            }
            const T_h = @TypeOf(this.h);
            if (@sizeOf(T_h) != 2 or @alignOf(T_h) != 2) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'h' to be 2 bytes with 2 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_h),
                    @alignOf(T_h),
                }));
            }
        }
    }
};

pub const ImTextureData = extern struct {
    UniqueID: i32,
    Status: ImTextureStatus,
    BackendUserData: *void,
    TexID: u64,
    Format: ImTextureFormat,
    Width: i32,
    Height: i32,
    BytesPerPixel: i32,
    Pixels: [*c]u8,
    UsedRect: ImTextureRect,
    UpdateRect: ImTextureRect,
    Updates: [16]u8 align(8),
    UnusedFrames: i32,
    RefCount: u16,
    UseColors: bool,
    WantDestroyNextFrame: bool,
    comptime {
        if (@sizeOf(@This()) != 88 or @alignOf(@This()) != 8) {
            @compileLog(@import("std").fmt.comptimePrint("Expected type 'ImTextureData' to be 88 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                @sizeOf(@This()),
                @alignOf(@This()),
            }));

            const this: @This() = undefined;

            const T_UniqueID = @TypeOf(this.UniqueID);
            if (@sizeOf(T_UniqueID) != 4 or @alignOf(T_UniqueID) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'UniqueID' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_UniqueID),
                    @alignOf(T_UniqueID),
                }));
            }
            const T_Status = @TypeOf(this.Status);
            if (@sizeOf(T_Status) != 4 or @alignOf(T_Status) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Status' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Status),
                    @alignOf(T_Status),
                }));
            }
            const T_BackendUserData = @TypeOf(this.BackendUserData);
            if (@sizeOf(T_BackendUserData) != 8 or @alignOf(T_BackendUserData) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'BackendUserData' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_BackendUserData),
                    @alignOf(T_BackendUserData),
                }));
            }
            const T_TexID = @TypeOf(this.TexID);
            if (@sizeOf(T_TexID) != 8 or @alignOf(T_TexID) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'TexID' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_TexID),
                    @alignOf(T_TexID),
                }));
            }
            const T_Format = @TypeOf(this.Format);
            if (@sizeOf(T_Format) != 4 or @alignOf(T_Format) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Format' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Format),
                    @alignOf(T_Format),
                }));
            }
            const T_Width = @TypeOf(this.Width);
            if (@sizeOf(T_Width) != 4 or @alignOf(T_Width) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Width' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Width),
                    @alignOf(T_Width),
                }));
            }
            const T_Height = @TypeOf(this.Height);
            if (@sizeOf(T_Height) != 4 or @alignOf(T_Height) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Height' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Height),
                    @alignOf(T_Height),
                }));
            }
            const T_BytesPerPixel = @TypeOf(this.BytesPerPixel);
            if (@sizeOf(T_BytesPerPixel) != 4 or @alignOf(T_BytesPerPixel) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'BytesPerPixel' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_BytesPerPixel),
                    @alignOf(T_BytesPerPixel),
                }));
            }
            const T_Pixels = @TypeOf(this.Pixels);
            if (@sizeOf(T_Pixels) != 8 or @alignOf(T_Pixels) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Pixels' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Pixels),
                    @alignOf(T_Pixels),
                }));
            }
            const T_UsedRect = @TypeOf(this.UsedRect);
            if (@sizeOf(T_UsedRect) != 8 or @alignOf(T_UsedRect) != 2) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'UsedRect' to be 8 bytes with 2 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_UsedRect),
                    @alignOf(T_UsedRect),
                }));
            }
            const T_UpdateRect = @TypeOf(this.UpdateRect);
            if (@sizeOf(T_UpdateRect) != 8 or @alignOf(T_UpdateRect) != 2) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'UpdateRect' to be 8 bytes with 2 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_UpdateRect),
                    @alignOf(T_UpdateRect),
                }));
            }
            const T_UnusedFrames = @TypeOf(this.UnusedFrames);
            if (@sizeOf(T_UnusedFrames) != 4 or @alignOf(T_UnusedFrames) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'UnusedFrames' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_UnusedFrames),
                    @alignOf(T_UnusedFrames),
                }));
            }
            const T_RefCount = @TypeOf(this.RefCount);
            if (@sizeOf(T_RefCount) != 2 or @alignOf(T_RefCount) != 2) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'RefCount' to be 2 bytes with 2 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_RefCount),
                    @alignOf(T_RefCount),
                }));
            }
            const T_UseColors = @TypeOf(this.UseColors);
            if (@sizeOf(T_UseColors) != 1 or @alignOf(T_UseColors) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'UseColors' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_UseColors),
                    @alignOf(T_UseColors),
                }));
            }
            const T_WantDestroyNextFrame = @TypeOf(this.WantDestroyNextFrame);
            if (@sizeOf(T_WantDestroyNextFrame) != 1 or @alignOf(T_WantDestroyNextFrame) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'WantDestroyNextFrame' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_WantDestroyNextFrame),
                    @alignOf(T_WantDestroyNextFrame),
                }));
            }
        }
    }
};

pub const ImFontConfig = extern struct {
    Name: [40]i8,
    FontData: *void,
    FontDataSize: i32,
    FontDataOwnedByAtlas: bool,
    MergeMode: bool,
    PixelSnapH: bool,
    PixelSnapV: bool,
    OversampleH: i8,
    OversampleV: i8,
    EllipsisChar: u16,
    SizePixels: f32,
    GlyphRanges: [*c]const u16,
    GlyphExcludeRanges: [*c]const u16,
    GlyphOffset: ImVec2,
    GlyphMinAdvanceX: f32,
    GlyphMaxAdvanceX: f32,
    GlyphExtraAdvanceX: f32,
    FontNo: u32,
    FontLoaderFlags: u32,
    RasterizerMultiply: f32,
    RasterizerDensity: f32,
    Flags: i32,
    DstFont: [*c]ImFont,
    FontLoader: [*c]const ImFontLoader,
    FontLoaderData: *void,
    comptime {
        if (@sizeOf(@This()) != 144 or @alignOf(@This()) != 8) {
            @compileLog(@import("std").fmt.comptimePrint("Expected type 'ImFontConfig' to be 144 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                @sizeOf(@This()),
                @alignOf(@This()),
            }));

            const this: @This() = undefined;

            const T_Name = @TypeOf(this.Name);
            if (@sizeOf(T_Name) != 40 or @alignOf(T_Name) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Name' to be 40 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Name),
                    @alignOf(T_Name),
                }));
            }
            const T_FontData = @TypeOf(this.FontData);
            if (@sizeOf(T_FontData) != 8 or @alignOf(T_FontData) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'FontData' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_FontData),
                    @alignOf(T_FontData),
                }));
            }
            const T_FontDataSize = @TypeOf(this.FontDataSize);
            if (@sizeOf(T_FontDataSize) != 4 or @alignOf(T_FontDataSize) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'FontDataSize' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_FontDataSize),
                    @alignOf(T_FontDataSize),
                }));
            }
            const T_FontDataOwnedByAtlas = @TypeOf(this.FontDataOwnedByAtlas);
            if (@sizeOf(T_FontDataOwnedByAtlas) != 1 or @alignOf(T_FontDataOwnedByAtlas) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'FontDataOwnedByAtlas' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_FontDataOwnedByAtlas),
                    @alignOf(T_FontDataOwnedByAtlas),
                }));
            }
            const T_MergeMode = @TypeOf(this.MergeMode);
            if (@sizeOf(T_MergeMode) != 1 or @alignOf(T_MergeMode) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'MergeMode' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_MergeMode),
                    @alignOf(T_MergeMode),
                }));
            }
            const T_PixelSnapH = @TypeOf(this.PixelSnapH);
            if (@sizeOf(T_PixelSnapH) != 1 or @alignOf(T_PixelSnapH) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'PixelSnapH' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_PixelSnapH),
                    @alignOf(T_PixelSnapH),
                }));
            }
            const T_PixelSnapV = @TypeOf(this.PixelSnapV);
            if (@sizeOf(T_PixelSnapV) != 1 or @alignOf(T_PixelSnapV) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'PixelSnapV' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_PixelSnapV),
                    @alignOf(T_PixelSnapV),
                }));
            }
            const T_OversampleH = @TypeOf(this.OversampleH);
            if (@sizeOf(T_OversampleH) != 1 or @alignOf(T_OversampleH) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'OversampleH' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_OversampleH),
                    @alignOf(T_OversampleH),
                }));
            }
            const T_OversampleV = @TypeOf(this.OversampleV);
            if (@sizeOf(T_OversampleV) != 1 or @alignOf(T_OversampleV) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'OversampleV' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_OversampleV),
                    @alignOf(T_OversampleV),
                }));
            }
            const T_EllipsisChar = @TypeOf(this.EllipsisChar);
            if (@sizeOf(T_EllipsisChar) != 2 or @alignOf(T_EllipsisChar) != 2) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'EllipsisChar' to be 2 bytes with 2 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_EllipsisChar),
                    @alignOf(T_EllipsisChar),
                }));
            }
            const T_SizePixels = @TypeOf(this.SizePixels);
            if (@sizeOf(T_SizePixels) != 4 or @alignOf(T_SizePixels) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'SizePixels' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_SizePixels),
                    @alignOf(T_SizePixels),
                }));
            }
            const T_GlyphRanges = @TypeOf(this.GlyphRanges);
            if (@sizeOf(T_GlyphRanges) != 8 or @alignOf(T_GlyphRanges) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'GlyphRanges' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_GlyphRanges),
                    @alignOf(T_GlyphRanges),
                }));
            }
            const T_GlyphExcludeRanges = @TypeOf(this.GlyphExcludeRanges);
            if (@sizeOf(T_GlyphExcludeRanges) != 8 or @alignOf(T_GlyphExcludeRanges) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'GlyphExcludeRanges' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_GlyphExcludeRanges),
                    @alignOf(T_GlyphExcludeRanges),
                }));
            }
            const T_GlyphOffset = @TypeOf(this.GlyphOffset);
            if (@sizeOf(T_GlyphOffset) != 8 or @alignOf(T_GlyphOffset) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'GlyphOffset' to be 8 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_GlyphOffset),
                    @alignOf(T_GlyphOffset),
                }));
            }
            const T_GlyphMinAdvanceX = @TypeOf(this.GlyphMinAdvanceX);
            if (@sizeOf(T_GlyphMinAdvanceX) != 4 or @alignOf(T_GlyphMinAdvanceX) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'GlyphMinAdvanceX' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_GlyphMinAdvanceX),
                    @alignOf(T_GlyphMinAdvanceX),
                }));
            }
            const T_GlyphMaxAdvanceX = @TypeOf(this.GlyphMaxAdvanceX);
            if (@sizeOf(T_GlyphMaxAdvanceX) != 4 or @alignOf(T_GlyphMaxAdvanceX) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'GlyphMaxAdvanceX' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_GlyphMaxAdvanceX),
                    @alignOf(T_GlyphMaxAdvanceX),
                }));
            }
            const T_GlyphExtraAdvanceX = @TypeOf(this.GlyphExtraAdvanceX);
            if (@sizeOf(T_GlyphExtraAdvanceX) != 4 or @alignOf(T_GlyphExtraAdvanceX) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'GlyphExtraAdvanceX' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_GlyphExtraAdvanceX),
                    @alignOf(T_GlyphExtraAdvanceX),
                }));
            }
            const T_FontNo = @TypeOf(this.FontNo);
            if (@sizeOf(T_FontNo) != 4 or @alignOf(T_FontNo) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'FontNo' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_FontNo),
                    @alignOf(T_FontNo),
                }));
            }
            const T_FontLoaderFlags = @TypeOf(this.FontLoaderFlags);
            if (@sizeOf(T_FontLoaderFlags) != 4 or @alignOf(T_FontLoaderFlags) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'FontLoaderFlags' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_FontLoaderFlags),
                    @alignOf(T_FontLoaderFlags),
                }));
            }
            const T_RasterizerMultiply = @TypeOf(this.RasterizerMultiply);
            if (@sizeOf(T_RasterizerMultiply) != 4 or @alignOf(T_RasterizerMultiply) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'RasterizerMultiply' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_RasterizerMultiply),
                    @alignOf(T_RasterizerMultiply),
                }));
            }
            const T_RasterizerDensity = @TypeOf(this.RasterizerDensity);
            if (@sizeOf(T_RasterizerDensity) != 4 or @alignOf(T_RasterizerDensity) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'RasterizerDensity' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_RasterizerDensity),
                    @alignOf(T_RasterizerDensity),
                }));
            }
            const T_Flags = @TypeOf(this.Flags);
            if (@sizeOf(T_Flags) != 4 or @alignOf(T_Flags) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Flags' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Flags),
                    @alignOf(T_Flags),
                }));
            }
            const T_DstFont = @TypeOf(this.DstFont);
            if (@sizeOf(T_DstFont) != 8 or @alignOf(T_DstFont) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'DstFont' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_DstFont),
                    @alignOf(T_DstFont),
                }));
            }
            const T_FontLoader = @TypeOf(this.FontLoader);
            if (@sizeOf(T_FontLoader) != 8 or @alignOf(T_FontLoader) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'FontLoader' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_FontLoader),
                    @alignOf(T_FontLoader),
                }));
            }
            const T_FontLoaderData = @TypeOf(this.FontLoaderData);
            if (@sizeOf(T_FontLoaderData) != 8 or @alignOf(T_FontLoaderData) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'FontLoaderData' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_FontLoaderData),
                    @alignOf(T_FontLoaderData),
                }));
            }
        }
    }
};

pub const ImFontGlyph = extern struct {
    anon0: packed struct {
        Colored: u1,
        Visible: u1,
        SourceIdx: u4,
        Codepoint: u26,
    },
    AdvanceX: f32,
    X0: f32,
    Y0: f32,
    X1: f32,
    Y1: f32,
    U0: f32,
    V0: f32,
    U1: f32,
    V1: f32,
    PackId: i32,
    comptime {
        if (@sizeOf(@This()) != 44 or @alignOf(@This()) != 4) {
            @compileLog(@import("std").fmt.comptimePrint("Expected type 'ImFontGlyph' to be 44 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                @sizeOf(@This()),
                @alignOf(@This()),
            }));

            const this: @This() = undefined;

            const T_Colored = @TypeOf(this.Colored);
            if (@sizeOf(T_Colored) != 4 or @alignOf(T_Colored) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Colored' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Colored),
                    @alignOf(T_Colored),
                }));
            }
            const T_Visible = @TypeOf(this.Visible);
            if (@sizeOf(T_Visible) != 4 or @alignOf(T_Visible) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Visible' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Visible),
                    @alignOf(T_Visible),
                }));
            }
            const T_SourceIdx = @TypeOf(this.SourceIdx);
            if (@sizeOf(T_SourceIdx) != 4 or @alignOf(T_SourceIdx) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'SourceIdx' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_SourceIdx),
                    @alignOf(T_SourceIdx),
                }));
            }
            const T_Codepoint = @TypeOf(this.Codepoint);
            if (@sizeOf(T_Codepoint) != 4 or @alignOf(T_Codepoint) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Codepoint' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Codepoint),
                    @alignOf(T_Codepoint),
                }));
            }
            const T_AdvanceX = @TypeOf(this.AdvanceX);
            if (@sizeOf(T_AdvanceX) != 4 or @alignOf(T_AdvanceX) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'AdvanceX' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_AdvanceX),
                    @alignOf(T_AdvanceX),
                }));
            }
            const T_X0 = @TypeOf(this.X0);
            if (@sizeOf(T_X0) != 4 or @alignOf(T_X0) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'X0' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_X0),
                    @alignOf(T_X0),
                }));
            }
            const T_Y0 = @TypeOf(this.Y0);
            if (@sizeOf(T_Y0) != 4 or @alignOf(T_Y0) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Y0' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Y0),
                    @alignOf(T_Y0),
                }));
            }
            const T_X1 = @TypeOf(this.X1);
            if (@sizeOf(T_X1) != 4 or @alignOf(T_X1) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'X1' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_X1),
                    @alignOf(T_X1),
                }));
            }
            const T_Y1 = @TypeOf(this.Y1);
            if (@sizeOf(T_Y1) != 4 or @alignOf(T_Y1) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Y1' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Y1),
                    @alignOf(T_Y1),
                }));
            }
            const T_U0 = @TypeOf(this.U0);
            if (@sizeOf(T_U0) != 4 or @alignOf(T_U0) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'U0' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_U0),
                    @alignOf(T_U0),
                }));
            }
            const T_V0 = @TypeOf(this.V0);
            if (@sizeOf(T_V0) != 4 or @alignOf(T_V0) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'V0' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_V0),
                    @alignOf(T_V0),
                }));
            }
            const T_U1 = @TypeOf(this.U1);
            if (@sizeOf(T_U1) != 4 or @alignOf(T_U1) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'U1' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_U1),
                    @alignOf(T_U1),
                }));
            }
            const T_V1 = @TypeOf(this.V1);
            if (@sizeOf(T_V1) != 4 or @alignOf(T_V1) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'V1' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_V1),
                    @alignOf(T_V1),
                }));
            }
            const T_PackId = @TypeOf(this.PackId);
            if (@sizeOf(T_PackId) != 4 or @alignOf(T_PackId) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'PackId' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_PackId),
                    @alignOf(T_PackId),
                }));
            }
        }
    }
};

pub const ImFontGlyphRangesBuilder = extern struct {
    UsedChars: [16]u8 align(8),
    comptime {
        if (@sizeOf(@This()) != 16 or @alignOf(@This()) != 8) {
            @compileLog(@import("std").fmt.comptimePrint("Expected type 'ImFontGlyphRangesBuilder' to be 16 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                @sizeOf(@This()),
                @alignOf(@This()),
            }));
        }
    }
};

pub const ImFontAtlasRect = extern struct {
    x: u16,
    y: u16,
    w: u16,
    h: u16,
    uv0: ImVec2,
    uv1: ImVec2,
    comptime {
        if (@sizeOf(@This()) != 24 or @alignOf(@This()) != 4) {
            @compileLog(@import("std").fmt.comptimePrint("Expected type 'ImFontAtlasRect' to be 24 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                @sizeOf(@This()),
                @alignOf(@This()),
            }));

            const this: @This() = undefined;

            const T_x = @TypeOf(this.x);
            if (@sizeOf(T_x) != 2 or @alignOf(T_x) != 2) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'x' to be 2 bytes with 2 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_x),
                    @alignOf(T_x),
                }));
            }
            const T_y = @TypeOf(this.y);
            if (@sizeOf(T_y) != 2 or @alignOf(T_y) != 2) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'y' to be 2 bytes with 2 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_y),
                    @alignOf(T_y),
                }));
            }
            const T_w = @TypeOf(this.w);
            if (@sizeOf(T_w) != 2 or @alignOf(T_w) != 2) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'w' to be 2 bytes with 2 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_w),
                    @alignOf(T_w),
                }));
            }
            const T_h = @TypeOf(this.h);
            if (@sizeOf(T_h) != 2 or @alignOf(T_h) != 2) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'h' to be 2 bytes with 2 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_h),
                    @alignOf(T_h),
                }));
            }
            const T_uv0 = @TypeOf(this.uv0);
            if (@sizeOf(T_uv0) != 8 or @alignOf(T_uv0) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'uv0' to be 8 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_uv0),
                    @alignOf(T_uv0),
                }));
            }
            const T_uv1 = @TypeOf(this.uv1);
            if (@sizeOf(T_uv1) != 8 or @alignOf(T_uv1) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'uv1' to be 8 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_uv1),
                    @alignOf(T_uv1),
                }));
            }
        }
    }
};

pub const ImFontAtlasFlags_ = packed struct(i32) {
    data: i32,
    pub const ImFontAtlasFlags_None: ImFontAtlasFlags_ = .{ .data = 0 };
    pub const ImFontAtlasFlags_NoPowerOfTwoHeight: ImFontAtlasFlags_ = .{ .data = 1 };
    pub const ImFontAtlasFlags_NoMouseCursors: ImFontAtlasFlags_ = .{ .data = 2 };
    pub const ImFontAtlasFlags_NoBakedLines: ImFontAtlasFlags_ = .{ .data = 4 };
};

pub const ImFontAtlas = extern struct {
    Flags: i32,
    TexDesiredFormat: ImTextureFormat,
    TexGlyphPadding: i32,
    TexMinWidth: i32,
    TexMinHeight: i32,
    TexMaxWidth: i32,
    TexMaxHeight: i32,
    UserData: *void,
    anon0: extern union {
        TexRef: ImTextureRef,
        TexID: ImTextureRef,
        comptime {
            if (@sizeOf(@This()) != 16 or @alignOf(@This()) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected type 'Anonymous Type' to be 16 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(@This()),
                    @alignOf(@This()),
                }));

                const this: @This() = undefined;

                const T_TexRef = @TypeOf(this.TexRef);
                if (@sizeOf(T_TexRef) != 16 or @alignOf(T_TexRef) != 8) {
                    @compileLog(@import("std").fmt.comptimePrint("Expected field 'TexRef' to be 16 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                        @sizeOf(T_TexRef),
                        @alignOf(T_TexRef),
                    }));
                }
                const T_TexID = @TypeOf(this.TexID);
                if (@sizeOf(T_TexID) != 16 or @alignOf(T_TexID) != 8) {
                    @compileLog(@import("std").fmt.comptimePrint("Expected field 'TexID' to be 16 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                        @sizeOf(T_TexID),
                        @alignOf(T_TexID),
                    }));
                }
            }
        }
    },
    TexData: [*c]ImTextureData,
    TexList: [16]u8 align(8),
    Locked: bool,
    RendererHasTextures: bool,
    TexIsBuilt: bool,
    TexPixelsUseColors: bool,
    TexUvScale: ImVec2,
    TexUvWhitePixel: ImVec2,
    Fonts: [16]u8 align(8),
    Sources: [16]u8 align(8),
    TexUvLines: [33]ImVec4,
    TexNextUniqueID: i32,
    FontNextUniqueID: i32,
    DrawListSharedDatas: [16]u8 align(8),
    Builder: [*c]ImFontAtlasBuilder,
    FontLoader: [*c]const ImFontLoader,
    FontLoaderName: [*c]const i8,
    FontLoaderData: *void,
    FontLoaderFlags: u32,
    RefCount: i32,
    OwnerContext: [*c]ImGuiContext,
    TempRect: ImFontAtlasRect,
    comptime {
        if (@sizeOf(@This()) != 760 or @alignOf(@This()) != 8) {
            @compileLog(@import("std").fmt.comptimePrint("Expected type 'ImFontAtlas' to be 760 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                @sizeOf(@This()),
                @alignOf(@This()),
            }));

            const this: @This() = undefined;

            const T_Flags = @TypeOf(this.Flags);
            if (@sizeOf(T_Flags) != 4 or @alignOf(T_Flags) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Flags' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Flags),
                    @alignOf(T_Flags),
                }));
            }
            const T_TexDesiredFormat = @TypeOf(this.TexDesiredFormat);
            if (@sizeOf(T_TexDesiredFormat) != 4 or @alignOf(T_TexDesiredFormat) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'TexDesiredFormat' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_TexDesiredFormat),
                    @alignOf(T_TexDesiredFormat),
                }));
            }
            const T_TexGlyphPadding = @TypeOf(this.TexGlyphPadding);
            if (@sizeOf(T_TexGlyphPadding) != 4 or @alignOf(T_TexGlyphPadding) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'TexGlyphPadding' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_TexGlyphPadding),
                    @alignOf(T_TexGlyphPadding),
                }));
            }
            const T_TexMinWidth = @TypeOf(this.TexMinWidth);
            if (@sizeOf(T_TexMinWidth) != 4 or @alignOf(T_TexMinWidth) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'TexMinWidth' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_TexMinWidth),
                    @alignOf(T_TexMinWidth),
                }));
            }
            const T_TexMinHeight = @TypeOf(this.TexMinHeight);
            if (@sizeOf(T_TexMinHeight) != 4 or @alignOf(T_TexMinHeight) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'TexMinHeight' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_TexMinHeight),
                    @alignOf(T_TexMinHeight),
                }));
            }
            const T_TexMaxWidth = @TypeOf(this.TexMaxWidth);
            if (@sizeOf(T_TexMaxWidth) != 4 or @alignOf(T_TexMaxWidth) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'TexMaxWidth' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_TexMaxWidth),
                    @alignOf(T_TexMaxWidth),
                }));
            }
            const T_TexMaxHeight = @TypeOf(this.TexMaxHeight);
            if (@sizeOf(T_TexMaxHeight) != 4 or @alignOf(T_TexMaxHeight) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'TexMaxHeight' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_TexMaxHeight),
                    @alignOf(T_TexMaxHeight),
                }));
            }
            const T_UserData = @TypeOf(this.UserData);
            if (@sizeOf(T_UserData) != 8 or @alignOf(T_UserData) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'UserData' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_UserData),
                    @alignOf(T_UserData),
                }));
            }
            const T_TexData = @TypeOf(this.TexData);
            if (@sizeOf(T_TexData) != 8 or @alignOf(T_TexData) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'TexData' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_TexData),
                    @alignOf(T_TexData),
                }));
            }
            const T_Locked = @TypeOf(this.Locked);
            if (@sizeOf(T_Locked) != 1 or @alignOf(T_Locked) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Locked' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Locked),
                    @alignOf(T_Locked),
                }));
            }
            const T_RendererHasTextures = @TypeOf(this.RendererHasTextures);
            if (@sizeOf(T_RendererHasTextures) != 1 or @alignOf(T_RendererHasTextures) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'RendererHasTextures' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_RendererHasTextures),
                    @alignOf(T_RendererHasTextures),
                }));
            }
            const T_TexIsBuilt = @TypeOf(this.TexIsBuilt);
            if (@sizeOf(T_TexIsBuilt) != 1 or @alignOf(T_TexIsBuilt) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'TexIsBuilt' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_TexIsBuilt),
                    @alignOf(T_TexIsBuilt),
                }));
            }
            const T_TexPixelsUseColors = @TypeOf(this.TexPixelsUseColors);
            if (@sizeOf(T_TexPixelsUseColors) != 1 or @alignOf(T_TexPixelsUseColors) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'TexPixelsUseColors' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_TexPixelsUseColors),
                    @alignOf(T_TexPixelsUseColors),
                }));
            }
            const T_TexUvScale = @TypeOf(this.TexUvScale);
            if (@sizeOf(T_TexUvScale) != 8 or @alignOf(T_TexUvScale) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'TexUvScale' to be 8 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_TexUvScale),
                    @alignOf(T_TexUvScale),
                }));
            }
            const T_TexUvWhitePixel = @TypeOf(this.TexUvWhitePixel);
            if (@sizeOf(T_TexUvWhitePixel) != 8 or @alignOf(T_TexUvWhitePixel) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'TexUvWhitePixel' to be 8 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_TexUvWhitePixel),
                    @alignOf(T_TexUvWhitePixel),
                }));
            }
            const T_TexUvLines = @TypeOf(this.TexUvLines);
            if (@sizeOf(T_TexUvLines) != 528 or @alignOf(T_TexUvLines) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'TexUvLines' to be 528 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_TexUvLines),
                    @alignOf(T_TexUvLines),
                }));
            }
            const T_TexNextUniqueID = @TypeOf(this.TexNextUniqueID);
            if (@sizeOf(T_TexNextUniqueID) != 4 or @alignOf(T_TexNextUniqueID) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'TexNextUniqueID' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_TexNextUniqueID),
                    @alignOf(T_TexNextUniqueID),
                }));
            }
            const T_FontNextUniqueID = @TypeOf(this.FontNextUniqueID);
            if (@sizeOf(T_FontNextUniqueID) != 4 or @alignOf(T_FontNextUniqueID) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'FontNextUniqueID' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_FontNextUniqueID),
                    @alignOf(T_FontNextUniqueID),
                }));
            }
            const T_Builder = @TypeOf(this.Builder);
            if (@sizeOf(T_Builder) != 8 or @alignOf(T_Builder) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Builder' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Builder),
                    @alignOf(T_Builder),
                }));
            }
            const T_FontLoader = @TypeOf(this.FontLoader);
            if (@sizeOf(T_FontLoader) != 8 or @alignOf(T_FontLoader) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'FontLoader' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_FontLoader),
                    @alignOf(T_FontLoader),
                }));
            }
            const T_FontLoaderName = @TypeOf(this.FontLoaderName);
            if (@sizeOf(T_FontLoaderName) != 8 or @alignOf(T_FontLoaderName) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'FontLoaderName' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_FontLoaderName),
                    @alignOf(T_FontLoaderName),
                }));
            }
            const T_FontLoaderData = @TypeOf(this.FontLoaderData);
            if (@sizeOf(T_FontLoaderData) != 8 or @alignOf(T_FontLoaderData) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'FontLoaderData' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_FontLoaderData),
                    @alignOf(T_FontLoaderData),
                }));
            }
            const T_FontLoaderFlags = @TypeOf(this.FontLoaderFlags);
            if (@sizeOf(T_FontLoaderFlags) != 4 or @alignOf(T_FontLoaderFlags) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'FontLoaderFlags' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_FontLoaderFlags),
                    @alignOf(T_FontLoaderFlags),
                }));
            }
            const T_RefCount = @TypeOf(this.RefCount);
            if (@sizeOf(T_RefCount) != 4 or @alignOf(T_RefCount) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'RefCount' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_RefCount),
                    @alignOf(T_RefCount),
                }));
            }
            const T_OwnerContext = @TypeOf(this.OwnerContext);
            if (@sizeOf(T_OwnerContext) != 8 or @alignOf(T_OwnerContext) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'OwnerContext' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_OwnerContext),
                    @alignOf(T_OwnerContext),
                }));
            }
            const T_TempRect = @TypeOf(this.TempRect);
            if (@sizeOf(T_TempRect) != 24 or @alignOf(T_TempRect) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'TempRect' to be 24 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_TempRect),
                    @alignOf(T_TempRect),
                }));
            }
        }
    }
};

pub const ImFontBaked = extern struct {
    IndexAdvanceX: [16]u8 align(8),
    FallbackAdvanceX: f32,
    Size: f32,
    RasterizerDensity: f32,
    IndexLookup: [16]u8 align(8),
    Glyphs: [16]u8 align(8),
    FallbackGlyphIndex: i32,
    Ascent: f32,
    Descent: f32,
    anon0: packed struct { MetricsTotalSurface: u26, WantDestroy: u1, LoadNoFallback: u1, LoadNoRenderOnLayout: u1, __padding: u3 },
    LastUsedFrame: i32,
    BakedId: u32,
    ContainerFont: [*c]ImFont,
    FontLoaderDatas: *void,
    comptime {
        if (@sizeOf(@This()) != 104 or @alignOf(@This()) != 8) {
            @compileLog(@import("std").fmt.comptimePrint("Expected type 'ImFontBaked' to be 104 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                @sizeOf(@This()),
                @alignOf(@This()),
            }));

            const this: @This() = undefined;

            const T_FallbackAdvanceX = @TypeOf(this.FallbackAdvanceX);
            if (@sizeOf(T_FallbackAdvanceX) != 4 or @alignOf(T_FallbackAdvanceX) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'FallbackAdvanceX' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_FallbackAdvanceX),
                    @alignOf(T_FallbackAdvanceX),
                }));
            }
            const T_Size = @TypeOf(this.Size);
            if (@sizeOf(T_Size) != 4 or @alignOf(T_Size) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Size' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Size),
                    @alignOf(T_Size),
                }));
            }
            const T_RasterizerDensity = @TypeOf(this.RasterizerDensity);
            if (@sizeOf(T_RasterizerDensity) != 4 or @alignOf(T_RasterizerDensity) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'RasterizerDensity' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_RasterizerDensity),
                    @alignOf(T_RasterizerDensity),
                }));
            }
            const T_FallbackGlyphIndex = @TypeOf(this.FallbackGlyphIndex);
            if (@sizeOf(T_FallbackGlyphIndex) != 4 or @alignOf(T_FallbackGlyphIndex) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'FallbackGlyphIndex' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_FallbackGlyphIndex),
                    @alignOf(T_FallbackGlyphIndex),
                }));
            }
            const T_Ascent = @TypeOf(this.Ascent);
            if (@sizeOf(T_Ascent) != 4 or @alignOf(T_Ascent) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Ascent' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Ascent),
                    @alignOf(T_Ascent),
                }));
            }
            const T_Descent = @TypeOf(this.Descent);
            if (@sizeOf(T_Descent) != 4 or @alignOf(T_Descent) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Descent' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Descent),
                    @alignOf(T_Descent),
                }));
            }
            const T_MetricsTotalSurface = @TypeOf(this.MetricsTotalSurface);
            if (@sizeOf(T_MetricsTotalSurface) != 4 or @alignOf(T_MetricsTotalSurface) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'MetricsTotalSurface' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_MetricsTotalSurface),
                    @alignOf(T_MetricsTotalSurface),
                }));
            }
            const T_WantDestroy = @TypeOf(this.WantDestroy);
            if (@sizeOf(T_WantDestroy) != 4 or @alignOf(T_WantDestroy) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'WantDestroy' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_WantDestroy),
                    @alignOf(T_WantDestroy),
                }));
            }
            const T_LoadNoFallback = @TypeOf(this.LoadNoFallback);
            if (@sizeOf(T_LoadNoFallback) != 4 or @alignOf(T_LoadNoFallback) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'LoadNoFallback' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_LoadNoFallback),
                    @alignOf(T_LoadNoFallback),
                }));
            }
            const T_LoadNoRenderOnLayout = @TypeOf(this.LoadNoRenderOnLayout);
            if (@sizeOf(T_LoadNoRenderOnLayout) != 4 or @alignOf(T_LoadNoRenderOnLayout) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'LoadNoRenderOnLayout' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_LoadNoRenderOnLayout),
                    @alignOf(T_LoadNoRenderOnLayout),
                }));
            }
            const T_LastUsedFrame = @TypeOf(this.LastUsedFrame);
            if (@sizeOf(T_LastUsedFrame) != 4 or @alignOf(T_LastUsedFrame) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'LastUsedFrame' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_LastUsedFrame),
                    @alignOf(T_LastUsedFrame),
                }));
            }
            const T_BakedId = @TypeOf(this.BakedId);
            if (@sizeOf(T_BakedId) != 4 or @alignOf(T_BakedId) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'BakedId' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_BakedId),
                    @alignOf(T_BakedId),
                }));
            }
            const T_ContainerFont = @TypeOf(this.ContainerFont);
            if (@sizeOf(T_ContainerFont) != 8 or @alignOf(T_ContainerFont) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ContainerFont' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ContainerFont),
                    @alignOf(T_ContainerFont),
                }));
            }
            const T_FontLoaderDatas = @TypeOf(this.FontLoaderDatas);
            if (@sizeOf(T_FontLoaderDatas) != 8 or @alignOf(T_FontLoaderDatas) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'FontLoaderDatas' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_FontLoaderDatas),
                    @alignOf(T_FontLoaderDatas),
                }));
            }
        }
    }
};

pub const ImFontFlags_ = packed struct(i32) {
    data: i32,
    pub const ImFontFlags_None: ImFontFlags_ = .{ .data = 0 };
    pub const ImFontFlags_NoLoadError: ImFontFlags_ = .{ .data = 2 };
    pub const ImFontFlags_NoLoadGlyphs: ImFontFlags_ = .{ .data = 4 };
    pub const ImFontFlags_LockBakedSizes: ImFontFlags_ = .{ .data = 8 };
};

pub const ImFont = extern struct {
    LastBaked: [*c]ImFontBaked,
    ContainerAtlas: [*c]ImFontAtlas,
    Flags: i32,
    CurrentRasterizerDensity: f32,
    FontId: u32,
    LegacySize: f32,
    Sources: [16]u8 align(8),
    EllipsisChar: u16,
    FallbackChar: u16,
    Used8kPagesMap: [1]u8,
    EllipsisAutoBake: bool,
    RemapPairs: ImGuiStorage,
    Scale: f32,
    comptime {
        if (@sizeOf(@This()) != 80 or @alignOf(@This()) != 8) {
            @compileLog(@import("std").fmt.comptimePrint("Expected type 'ImFont' to be 80 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                @sizeOf(@This()),
                @alignOf(@This()),
            }));

            const this: @This() = undefined;

            const T_LastBaked = @TypeOf(this.LastBaked);
            if (@sizeOf(T_LastBaked) != 8 or @alignOf(T_LastBaked) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'LastBaked' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_LastBaked),
                    @alignOf(T_LastBaked),
                }));
            }
            const T_ContainerAtlas = @TypeOf(this.ContainerAtlas);
            if (@sizeOf(T_ContainerAtlas) != 8 or @alignOf(T_ContainerAtlas) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ContainerAtlas' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ContainerAtlas),
                    @alignOf(T_ContainerAtlas),
                }));
            }
            const T_Flags = @TypeOf(this.Flags);
            if (@sizeOf(T_Flags) != 4 or @alignOf(T_Flags) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Flags' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Flags),
                    @alignOf(T_Flags),
                }));
            }
            const T_CurrentRasterizerDensity = @TypeOf(this.CurrentRasterizerDensity);
            if (@sizeOf(T_CurrentRasterizerDensity) != 4 or @alignOf(T_CurrentRasterizerDensity) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'CurrentRasterizerDensity' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_CurrentRasterizerDensity),
                    @alignOf(T_CurrentRasterizerDensity),
                }));
            }
            const T_FontId = @TypeOf(this.FontId);
            if (@sizeOf(T_FontId) != 4 or @alignOf(T_FontId) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'FontId' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_FontId),
                    @alignOf(T_FontId),
                }));
            }
            const T_LegacySize = @TypeOf(this.LegacySize);
            if (@sizeOf(T_LegacySize) != 4 or @alignOf(T_LegacySize) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'LegacySize' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_LegacySize),
                    @alignOf(T_LegacySize),
                }));
            }
            const T_EllipsisChar = @TypeOf(this.EllipsisChar);
            if (@sizeOf(T_EllipsisChar) != 2 or @alignOf(T_EllipsisChar) != 2) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'EllipsisChar' to be 2 bytes with 2 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_EllipsisChar),
                    @alignOf(T_EllipsisChar),
                }));
            }
            const T_FallbackChar = @TypeOf(this.FallbackChar);
            if (@sizeOf(T_FallbackChar) != 2 or @alignOf(T_FallbackChar) != 2) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'FallbackChar' to be 2 bytes with 2 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_FallbackChar),
                    @alignOf(T_FallbackChar),
                }));
            }
            const T_Used8kPagesMap = @TypeOf(this.Used8kPagesMap);
            if (@sizeOf(T_Used8kPagesMap) != 1 or @alignOf(T_Used8kPagesMap) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Used8kPagesMap' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Used8kPagesMap),
                    @alignOf(T_Used8kPagesMap),
                }));
            }
            const T_EllipsisAutoBake = @TypeOf(this.EllipsisAutoBake);
            if (@sizeOf(T_EllipsisAutoBake) != 1 or @alignOf(T_EllipsisAutoBake) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'EllipsisAutoBake' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_EllipsisAutoBake),
                    @alignOf(T_EllipsisAutoBake),
                }));
            }
            const T_RemapPairs = @TypeOf(this.RemapPairs);
            if (@sizeOf(T_RemapPairs) != 16 or @alignOf(T_RemapPairs) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'RemapPairs' to be 16 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_RemapPairs),
                    @alignOf(T_RemapPairs),
                }));
            }
            const T_Scale = @TypeOf(this.Scale);
            if (@sizeOf(T_Scale) != 4 or @alignOf(T_Scale) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Scale' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Scale),
                    @alignOf(T_Scale),
                }));
            }
        }
    }
};

pub const ImGuiViewportFlags_ = packed struct(i32) {
    data: i32,
    pub const ImGuiViewportFlags_None: ImGuiViewportFlags_ = .{ .data = 0 };
    pub const ImGuiViewportFlags_IsPlatformWindow: ImGuiViewportFlags_ = .{ .data = 1 };
    pub const ImGuiViewportFlags_IsPlatformMonitor: ImGuiViewportFlags_ = .{ .data = 2 };
    pub const ImGuiViewportFlags_OwnedByApp: ImGuiViewportFlags_ = .{ .data = 4 };
};

pub const ImGuiViewport = extern struct {
    ID: u32,
    Flags: i32,
    Pos: ImVec2,
    Size: ImVec2,
    FramebufferScale: ImVec2,
    WorkPos: ImVec2,
    WorkSize: ImVec2,
    PlatformHandle: *void,
    PlatformHandleRaw: *void,
    comptime {
        if (@sizeOf(@This()) != 64 or @alignOf(@This()) != 8) {
            @compileLog(@import("std").fmt.comptimePrint("Expected type 'ImGuiViewport' to be 64 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                @sizeOf(@This()),
                @alignOf(@This()),
            }));

            const this: @This() = undefined;

            const T_ID = @TypeOf(this.ID);
            if (@sizeOf(T_ID) != 4 or @alignOf(T_ID) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ID' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ID),
                    @alignOf(T_ID),
                }));
            }
            const T_Flags = @TypeOf(this.Flags);
            if (@sizeOf(T_Flags) != 4 or @alignOf(T_Flags) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Flags' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Flags),
                    @alignOf(T_Flags),
                }));
            }
            const T_Pos = @TypeOf(this.Pos);
            if (@sizeOf(T_Pos) != 8 or @alignOf(T_Pos) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Pos' to be 8 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Pos),
                    @alignOf(T_Pos),
                }));
            }
            const T_Size = @TypeOf(this.Size);
            if (@sizeOf(T_Size) != 8 or @alignOf(T_Size) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Size' to be 8 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Size),
                    @alignOf(T_Size),
                }));
            }
            const T_FramebufferScale = @TypeOf(this.FramebufferScale);
            if (@sizeOf(T_FramebufferScale) != 8 or @alignOf(T_FramebufferScale) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'FramebufferScale' to be 8 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_FramebufferScale),
                    @alignOf(T_FramebufferScale),
                }));
            }
            const T_WorkPos = @TypeOf(this.WorkPos);
            if (@sizeOf(T_WorkPos) != 8 or @alignOf(T_WorkPos) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'WorkPos' to be 8 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_WorkPos),
                    @alignOf(T_WorkPos),
                }));
            }
            const T_WorkSize = @TypeOf(this.WorkSize);
            if (@sizeOf(T_WorkSize) != 8 or @alignOf(T_WorkSize) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'WorkSize' to be 8 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_WorkSize),
                    @alignOf(T_WorkSize),
                }));
            }
            const T_PlatformHandle = @TypeOf(this.PlatformHandle);
            if (@sizeOf(T_PlatformHandle) != 8 or @alignOf(T_PlatformHandle) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'PlatformHandle' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_PlatformHandle),
                    @alignOf(T_PlatformHandle),
                }));
            }
            const T_PlatformHandleRaw = @TypeOf(this.PlatformHandleRaw);
            if (@sizeOf(T_PlatformHandleRaw) != 8 or @alignOf(T_PlatformHandleRaw) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'PlatformHandleRaw' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_PlatformHandleRaw),
                    @alignOf(T_PlatformHandleRaw),
                }));
            }
        }
    }
};

pub const ImGuiPlatformIO = extern struct {
    Platform_GetClipboardTextFn: [*c]*const fn ([*c]ImGuiContext) callconv(.c) [*c]const i8,
    Platform_SetClipboardTextFn: [*c]*const fn ([*c]ImGuiContext, [*c]const i8) callconv(.c) void,
    Platform_ClipboardUserData: *void,
    Platform_OpenInShellFn: [*c]*const fn ([*c]ImGuiContext, [*c]const i8) callconv(.c) bool,
    Platform_OpenInShellUserData: *void,
    Platform_SetImeDataFn: [*c]*const fn ([*c]ImGuiContext, [*c]ImGuiViewport, [*c]ImGuiPlatformImeData) callconv(.c) void,
    Platform_ImeUserData: *void,
    Platform_LocaleDecimalPoint: u16,
    Renderer_TextureMaxWidth: i32,
    Renderer_TextureMaxHeight: i32,
    Renderer_RenderState: *void,
    Textures: [16]u8 align(8),
    comptime {
        if (@sizeOf(@This()) != 96 or @alignOf(@This()) != 8) {
            @compileLog(@import("std").fmt.comptimePrint("Expected type 'ImGuiPlatformIO' to be 96 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                @sizeOf(@This()),
                @alignOf(@This()),
            }));

            const this: @This() = undefined;

            const T_Platform_GetClipboardTextFn = @TypeOf(this.Platform_GetClipboardTextFn);
            if (@sizeOf(T_Platform_GetClipboardTextFn) != 8 or @alignOf(T_Platform_GetClipboardTextFn) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Platform_GetClipboardTextFn' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Platform_GetClipboardTextFn),
                    @alignOf(T_Platform_GetClipboardTextFn),
                }));
            }
            const T_Platform_SetClipboardTextFn = @TypeOf(this.Platform_SetClipboardTextFn);
            if (@sizeOf(T_Platform_SetClipboardTextFn) != 8 or @alignOf(T_Platform_SetClipboardTextFn) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Platform_SetClipboardTextFn' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Platform_SetClipboardTextFn),
                    @alignOf(T_Platform_SetClipboardTextFn),
                }));
            }
            const T_Platform_ClipboardUserData = @TypeOf(this.Platform_ClipboardUserData);
            if (@sizeOf(T_Platform_ClipboardUserData) != 8 or @alignOf(T_Platform_ClipboardUserData) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Platform_ClipboardUserData' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Platform_ClipboardUserData),
                    @alignOf(T_Platform_ClipboardUserData),
                }));
            }
            const T_Platform_OpenInShellFn = @TypeOf(this.Platform_OpenInShellFn);
            if (@sizeOf(T_Platform_OpenInShellFn) != 8 or @alignOf(T_Platform_OpenInShellFn) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Platform_OpenInShellFn' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Platform_OpenInShellFn),
                    @alignOf(T_Platform_OpenInShellFn),
                }));
            }
            const T_Platform_OpenInShellUserData = @TypeOf(this.Platform_OpenInShellUserData);
            if (@sizeOf(T_Platform_OpenInShellUserData) != 8 or @alignOf(T_Platform_OpenInShellUserData) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Platform_OpenInShellUserData' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Platform_OpenInShellUserData),
                    @alignOf(T_Platform_OpenInShellUserData),
                }));
            }
            const T_Platform_SetImeDataFn = @TypeOf(this.Platform_SetImeDataFn);
            if (@sizeOf(T_Platform_SetImeDataFn) != 8 or @alignOf(T_Platform_SetImeDataFn) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Platform_SetImeDataFn' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Platform_SetImeDataFn),
                    @alignOf(T_Platform_SetImeDataFn),
                }));
            }
            const T_Platform_ImeUserData = @TypeOf(this.Platform_ImeUserData);
            if (@sizeOf(T_Platform_ImeUserData) != 8 or @alignOf(T_Platform_ImeUserData) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Platform_ImeUserData' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Platform_ImeUserData),
                    @alignOf(T_Platform_ImeUserData),
                }));
            }
            const T_Platform_LocaleDecimalPoint = @TypeOf(this.Platform_LocaleDecimalPoint);
            if (@sizeOf(T_Platform_LocaleDecimalPoint) != 2 or @alignOf(T_Platform_LocaleDecimalPoint) != 2) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Platform_LocaleDecimalPoint' to be 2 bytes with 2 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Platform_LocaleDecimalPoint),
                    @alignOf(T_Platform_LocaleDecimalPoint),
                }));
            }
            const T_Renderer_TextureMaxWidth = @TypeOf(this.Renderer_TextureMaxWidth);
            if (@sizeOf(T_Renderer_TextureMaxWidth) != 4 or @alignOf(T_Renderer_TextureMaxWidth) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Renderer_TextureMaxWidth' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Renderer_TextureMaxWidth),
                    @alignOf(T_Renderer_TextureMaxWidth),
                }));
            }
            const T_Renderer_TextureMaxHeight = @TypeOf(this.Renderer_TextureMaxHeight);
            if (@sizeOf(T_Renderer_TextureMaxHeight) != 4 or @alignOf(T_Renderer_TextureMaxHeight) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Renderer_TextureMaxHeight' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Renderer_TextureMaxHeight),
                    @alignOf(T_Renderer_TextureMaxHeight),
                }));
            }
            const T_Renderer_RenderState = @TypeOf(this.Renderer_RenderState);
            if (@sizeOf(T_Renderer_RenderState) != 8 or @alignOf(T_Renderer_RenderState) != 8) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'Renderer_RenderState' to be 8 bytes with 8 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_Renderer_RenderState),
                    @alignOf(T_Renderer_RenderState),
                }));
            }
        }
    }
};

pub const ImGuiPlatformImeData = extern struct {
    WantVisible: bool,
    WantTextInput: bool,
    InputPos: ImVec2,
    InputLineHeight: f32,
    ViewportId: u32,
    comptime {
        if (@sizeOf(@This()) != 20 or @alignOf(@This()) != 4) {
            @compileLog(@import("std").fmt.comptimePrint("Expected type 'ImGuiPlatformImeData' to be 20 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                @sizeOf(@This()),
                @alignOf(@This()),
            }));

            const this: @This() = undefined;

            const T_WantVisible = @TypeOf(this.WantVisible);
            if (@sizeOf(T_WantVisible) != 1 or @alignOf(T_WantVisible) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'WantVisible' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_WantVisible),
                    @alignOf(T_WantVisible),
                }));
            }
            const T_WantTextInput = @TypeOf(this.WantTextInput);
            if (@sizeOf(T_WantTextInput) != 1 or @alignOf(T_WantTextInput) != 1) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'WantTextInput' to be 1 bytes with 1 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_WantTextInput),
                    @alignOf(T_WantTextInput),
                }));
            }
            const T_InputPos = @TypeOf(this.InputPos);
            if (@sizeOf(T_InputPos) != 8 or @alignOf(T_InputPos) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'InputPos' to be 8 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_InputPos),
                    @alignOf(T_InputPos),
                }));
            }
            const T_InputLineHeight = @TypeOf(this.InputLineHeight);
            if (@sizeOf(T_InputLineHeight) != 4 or @alignOf(T_InputLineHeight) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'InputLineHeight' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_InputLineHeight),
                    @alignOf(T_InputLineHeight),
                }));
            }
            const T_ViewportId = @TypeOf(this.ViewportId);
            if (@sizeOf(T_ViewportId) != 4 or @alignOf(T_ViewportId) != 4) {
                @compileLog(@import("std").fmt.comptimePrint("Expected field 'ViewportId' to be 4 bytes with 4 byte alignment, but was {} bytes with {} byte alignment instead!", .{
                    @sizeOf(T_ViewportId),
                    @alignOf(T_ViewportId),
                }));
            }
        }
    }
};

pub const ImGuiContext = ?*anyopaque;
pub const ImNewWrapper = ?*anyopaque;
pub const ImFontLoader = ?*anyopaque;
pub const ImDrawListSharedData = ?*anyopaque;
pub const ImFontAtlasBuilder = ?*anyopaque;

comptime {
    refAllDecls(@This());
}
