// This file was auto-generated by github:nukkeldev/zpp; I wouldn't recommend editing it.

#include <stdarg.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wformat-security"

#include "imgui.h"

extern "C" ImGuiContext* CreateContext__9c317cc3bbd69792(ImFontAtlas* shared_font_atlas) {
	return ImGui::CreateContext(shared_font_atlas);
}
extern "C" void DestroyContext__33355240a3c270a1(ImGuiContext* ctx) {
	ImGui::DestroyContext(ctx);
}
extern "C" ImGuiContext* GetCurrentContext__bfcbdecf32b4f9ee() {
	return ImGui::GetCurrentContext();
}
extern "C" void SetCurrentContext__cf8edc56a4c808a8(ImGuiContext* ctx) {
	ImGui::SetCurrentContext(ctx);
}
extern "C" ImGuiIO* GetIO__867c1837c428c2c0() {
	return &ImGui::GetIO();
}
extern "C" ImGuiPlatformIO* GetPlatformIO__2abb1642f8d692ff() {
	return &ImGui::GetPlatformIO();
}
extern "C" ImGuiStyle* GetStyle__ce2435ddf1d8bbdc() {
	return &ImGui::GetStyle();
}
extern "C" void NewFrame__c7eb4c9ef72f9a92() {
	ImGui::NewFrame();
}
extern "C" void EndFrame__85cb800eb2d049e1() {
	ImGui::EndFrame();
}
extern "C" void Render__d74f51afaad3bb45() {
	ImGui::Render();
}
extern "C" ImDrawData* GetDrawData__75b329a9337a4684() {
	return ImGui::GetDrawData();
}
extern "C" void ShowDemoWindow__bf3697c59b1e3f56(bool* p_open) {
	ImGui::ShowDemoWindow(p_open);
}
extern "C" void ShowMetricsWindow__1b1d940fa8fb0d3(bool* p_open) {
	ImGui::ShowMetricsWindow(p_open);
}
extern "C" void ShowDebugLogWindow__61c59fe9a4ee63dd(bool* p_open) {
	ImGui::ShowDebugLogWindow(p_open);
}
extern "C" void ShowIDStackToolWindow__3f55c4ebf0c26a3d(bool* p_open) {
	ImGui::ShowIDStackToolWindow(p_open);
}
extern "C" void ShowAboutWindow__8e94b4fe17f9480a(bool* p_open) {
	ImGui::ShowAboutWindow(p_open);
}
extern "C" void ShowStyleEditor__9295e9c397962dd9(ImGuiStyle* ref) {
	ImGui::ShowStyleEditor(ref);
}
extern "C" bool ShowStyleSelector__15aa917f33eeee46(const char* label) {
	return ImGui::ShowStyleSelector(label);
}
extern "C" void ShowFontSelector__7279f694874f3f6f(const char* label) {
	ImGui::ShowFontSelector(label);
}
extern "C" void ShowUserGuide__b7066157174a867a() {
	ImGui::ShowUserGuide();
}
extern "C" const char* GetVersion__6769da60bc608dcb() {
	return ImGui::GetVersion();
}
extern "C" void StyleColorsDark__f3026e652fa5a3d4(ImGuiStyle* dst) {
	ImGui::StyleColorsDark(dst);
}
extern "C" void StyleColorsLight__cbe762f272234e68(ImGuiStyle* dst) {
	ImGui::StyleColorsLight(dst);
}
extern "C" void StyleColorsClassic__ec37fdbb560abf49(ImGuiStyle* dst) {
	ImGui::StyleColorsClassic(dst);
}
extern "C" bool Begin__5ca733c608c9f722(const char* name, bool* p_open, int flags) {
	return ImGui::Begin(name, p_open, flags);
}
extern "C" void End__891dd9019e6ec9af() {
	ImGui::End();
}
extern "C" bool BeginChild__b62a89170c85f9f4(const char* str_id, const ImVec2* size, int child_flags, int window_flags) {
	return ImGui::BeginChild(str_id, *size, child_flags, window_flags);
}
extern "C" bool BeginChild__b62a89170c85f9f4_1(unsigned int id, const ImVec2* size, int child_flags, int window_flags) {
	return ImGui::BeginChild(id, *size, child_flags, window_flags);
}
extern "C" void EndChild__748a79294f8d079c() {
	ImGui::EndChild();
}
extern "C" bool IsWindowAppearing__d8ef0284b9adfaf3() {
	return ImGui::IsWindowAppearing();
}
extern "C" bool IsWindowCollapsed__70e65449d3ca41a3() {
	return ImGui::IsWindowCollapsed();
}
extern "C" bool IsWindowFocused__3f96fdfb44995054(int flags) {
	return ImGui::IsWindowFocused(flags);
}
extern "C" bool IsWindowHovered__9aa3442dcec331b0(int flags) {
	return ImGui::IsWindowHovered(flags);
}
extern "C" ImDrawList* GetWindowDrawList__d62b561ccc2f14a5() {
	return ImGui::GetWindowDrawList();
}
extern "C" void GetWindowPos__9c3da571577684d9(ImVec2 *zpp_out) {
	*zpp_out = ImGui::GetWindowPos();
}
extern "C" void GetWindowSize__d07ac5451ca160a6(ImVec2 *zpp_out) {
	*zpp_out = ImGui::GetWindowSize();
}
extern "C" float GetWindowWidth__1ec35a8c320310f() {
	return ImGui::GetWindowWidth();
}
extern "C" float GetWindowHeight__87734b279d1f95ed() {
	return ImGui::GetWindowHeight();
}
extern "C" void SetNextWindowPos__f0b25f79948ac461(const ImVec2* pos, int cond, const ImVec2* pivot) {
	ImGui::SetNextWindowPos(*pos, cond, *pivot);
}
extern "C" void SetNextWindowSize__793a40bb853049cc(const ImVec2* size, int cond) {
	ImGui::SetNextWindowSize(*size, cond);
}
extern "C" void SetNextWindowSizeConstraints__96ea5ee82c357b37(const ImVec2* size_min, const ImVec2* size_max, void (*custom_callback)(ImGuiSizeCallbackData*), void* custom_callback_data) {
	ImGui::SetNextWindowSizeConstraints(*size_min, *size_max, custom_callback, custom_callback_data);
}
extern "C" void SetNextWindowContentSize__8a51bfd3137dc3df(const ImVec2* size) {
	ImGui::SetNextWindowContentSize(*size);
}
extern "C" void SetNextWindowCollapsed__2761348ab0ff9f09(bool collapsed, int cond) {
	ImGui::SetNextWindowCollapsed(collapsed, cond);
}
extern "C" void SetNextWindowFocus__83b1465119475af() {
	ImGui::SetNextWindowFocus();
}
extern "C" void SetNextWindowScroll__bb3b6dc045ee5fcd(const ImVec2* scroll) {
	ImGui::SetNextWindowScroll(*scroll);
}
extern "C" void SetNextWindowBgAlpha__7c4214955c599924(float alpha) {
	ImGui::SetNextWindowBgAlpha(alpha);
}
extern "C" void SetWindowPos__ca231277021bb406(const ImVec2* pos, int cond) {
	ImGui::SetWindowPos(*pos, cond);
}
extern "C" void SetWindowSize__73f4884420006287(const ImVec2* size, int cond) {
	ImGui::SetWindowSize(*size, cond);
}
extern "C" void SetWindowCollapsed__f8b42d292820f5f5(bool collapsed, int cond) {
	ImGui::SetWindowCollapsed(collapsed, cond);
}
extern "C" void SetWindowFocus__e3dec7b29fcf4747() {
	ImGui::SetWindowFocus();
}
extern "C" void SetWindowPos__ca231277021bb406_1(const char* name, const ImVec2* pos, int cond) {
	ImGui::SetWindowPos(name, *pos, cond);
}
extern "C" void SetWindowSize__73f4884420006287_1(const char* name, const ImVec2* size, int cond) {
	ImGui::SetWindowSize(name, *size, cond);
}
extern "C" void SetWindowCollapsed__f8b42d292820f5f5_1(const char* name, bool collapsed, int cond) {
	ImGui::SetWindowCollapsed(name, collapsed, cond);
}
extern "C" void SetWindowFocus__e3dec7b29fcf4747_1(const char* name) {
	ImGui::SetWindowFocus(name);
}
extern "C" float GetScrollX__84968e0c6bdcd61b() {
	return ImGui::GetScrollX();
}
extern "C" float GetScrollY__d1cf11a9dca5eea5() {
	return ImGui::GetScrollY();
}
extern "C" void SetScrollX__5a55f048357054ad(float scroll_x) {
	ImGui::SetScrollX(scroll_x);
}
extern "C" void SetScrollY__6c7ff2b3c6eacd5b(float scroll_y) {
	ImGui::SetScrollY(scroll_y);
}
extern "C" float GetScrollMaxX__314d38c641ba3a5a() {
	return ImGui::GetScrollMaxX();
}
extern "C" float GetScrollMaxY__629cefd1030bceb9() {
	return ImGui::GetScrollMaxY();
}
extern "C" void SetScrollHereX__d18377632477bfc8(float center_x_ratio) {
	ImGui::SetScrollHereX(center_x_ratio);
}
extern "C" void SetScrollHereY__b0041332a8430e31(float center_y_ratio) {
	ImGui::SetScrollHereY(center_y_ratio);
}
extern "C" void SetScrollFromPosX__73b6c80d834f33b2(float local_x, float center_x_ratio) {
	ImGui::SetScrollFromPosX(local_x, center_x_ratio);
}
extern "C" void SetScrollFromPosY__ef44d3f321cca53a(float local_y, float center_y_ratio) {
	ImGui::SetScrollFromPosY(local_y, center_y_ratio);
}
extern "C" void PushFont__57a48dfb3f59b615(ImFont* font, float font_size_base_unscaled) {
	ImGui::PushFont(font, font_size_base_unscaled);
}
extern "C" void PopFont__e69ab332756a54c9() {
	ImGui::PopFont();
}
extern "C" ImFont* GetFont__c886c34a5d91fad9() {
	return ImGui::GetFont();
}
extern "C" float GetFontSize__b261006d1784e993() {
	return ImGui::GetFontSize();
}
extern "C" ImFontBaked* GetFontBaked__3f06989c0a78b9d3() {
	return ImGui::GetFontBaked();
}
extern "C" void PushStyleColor__87b647a88ff97a78(int idx, unsigned int col) {
	ImGui::PushStyleColor(idx, col);
}
extern "C" void PushStyleColor__87b647a88ff97a78_1(int idx, const ImVec4* col) {
	ImGui::PushStyleColor(idx, *col);
}
extern "C" void PopStyleColor__b8867429a4a3514e(int count) {
	ImGui::PopStyleColor(count);
}
extern "C" void PushStyleVar__3d7496da947837c5(int idx, float val) {
	ImGui::PushStyleVar(idx, val);
}
extern "C" void PushStyleVar__3d7496da947837c5_1(int idx, const ImVec2* val) {
	ImGui::PushStyleVar(idx, *val);
}
extern "C" void PushStyleVarX__e1edf590a5efc94d(int idx, float val_x) {
	ImGui::PushStyleVarX(idx, val_x);
}
extern "C" void PushStyleVarY__9a47e6fce2470943(int idx, float val_y) {
	ImGui::PushStyleVarY(idx, val_y);
}
extern "C" void PopStyleVar__133858151c313dfc(int count) {
	ImGui::PopStyleVar(count);
}
extern "C" void PushItemFlag__ac157aa2a70e24a5(int option, bool enabled) {
	ImGui::PushItemFlag(option, enabled);
}
extern "C" void PopItemFlag__2bd31c7dc71b28a9() {
	ImGui::PopItemFlag();
}
extern "C" void PushItemWidth__8a4b1e33423001bf(float item_width) {
	ImGui::PushItemWidth(item_width);
}
extern "C" void PopItemWidth__a460714259b22669() {
	ImGui::PopItemWidth();
}
extern "C" void SetNextItemWidth__dd36b3db0cbfbee8(float item_width) {
	ImGui::SetNextItemWidth(item_width);
}
extern "C" float CalcItemWidth__70ec92cb8051a755() {
	return ImGui::CalcItemWidth();
}
extern "C" void PushTextWrapPos__87f1f983d508839f(float wrap_local_pos_x) {
	ImGui::PushTextWrapPos(wrap_local_pos_x);
}
extern "C" void PopTextWrapPos__aab213687042221b() {
	ImGui::PopTextWrapPos();
}
extern "C" void GetFontTexUvWhitePixel__d4cfaebda0fb1871(ImVec2 *zpp_out) {
	*zpp_out = ImGui::GetFontTexUvWhitePixel();
}
extern "C" unsigned int GetColorU32__6c8565e89ac391a(int idx, float alpha_mul) {
	return ImGui::GetColorU32(idx, alpha_mul);
}
extern "C" unsigned int GetColorU32__6c8565e89ac391a_1(const ImVec4* col) {
	return ImGui::GetColorU32(*col);
}
extern "C" unsigned int GetColorU32__6c8565e89ac391a_2(unsigned int col, float alpha_mul) {
	return ImGui::GetColorU32(col, alpha_mul);
}
extern "C" const ImVec4* GetStyleColorVec4__5c8f7f462421a3ef(int idx) {
	return &ImGui::GetStyleColorVec4(idx);
}
extern "C" void GetCursorScreenPos__d51c49a91c35dfd8(ImVec2 *zpp_out) {
	*zpp_out = ImGui::GetCursorScreenPos();
}
extern "C" void SetCursorScreenPos__b9044e0998623734(const ImVec2* pos) {
	ImGui::SetCursorScreenPos(*pos);
}
extern "C" void GetContentRegionAvail__c0e1c737c8050afd(ImVec2 *zpp_out) {
	*zpp_out = ImGui::GetContentRegionAvail();
}
extern "C" void GetCursorPos__3f9edd37baa45304(ImVec2 *zpp_out) {
	*zpp_out = ImGui::GetCursorPos();
}
extern "C" float GetCursorPosX__b2a3841e1222fce1() {
	return ImGui::GetCursorPosX();
}
extern "C" float GetCursorPosY__2edbcf99dd193efe() {
	return ImGui::GetCursorPosY();
}
extern "C" void SetCursorPos__b128b896f245bd95(const ImVec2* local_pos) {
	ImGui::SetCursorPos(*local_pos);
}
extern "C" void SetCursorPosX__97ad7c67ea44b428(float local_x) {
	ImGui::SetCursorPosX(local_x);
}
extern "C" void SetCursorPosY__fa5a7e361476b9b8(float local_y) {
	ImGui::SetCursorPosY(local_y);
}
extern "C" void GetCursorStartPos__c7930fa4bf3886b(ImVec2 *zpp_out) {
	*zpp_out = ImGui::GetCursorStartPos();
}
extern "C" void Separator__ef50d635e9b2c5da() {
	ImGui::Separator();
}
extern "C" void SameLine__19388aad62c2dfcf(float offset_from_start_x, float spacing) {
	ImGui::SameLine(offset_from_start_x, spacing);
}
extern "C" void NewLine__d04a7caa9a9f89c8() {
	ImGui::NewLine();
}
extern "C" void Spacing__173d4916acba51a5() {
	ImGui::Spacing();
}
extern "C" void Dummy__25db99e558deb632(const ImVec2* size) {
	ImGui::Dummy(*size);
}
extern "C" void Indent__6247f93594279607(float indent_w) {
	ImGui::Indent(indent_w);
}
extern "C" void Unindent__42ea795e352a8ac4(float indent_w) {
	ImGui::Unindent(indent_w);
}
extern "C" void BeginGroup__2fdce6f84c57ba7() {
	ImGui::BeginGroup();
}
extern "C" void EndGroup__ab8c40173d0e8caf() {
	ImGui::EndGroup();
}
extern "C" void AlignTextToFramePadding__72c39acb262c8946() {
	ImGui::AlignTextToFramePadding();
}
extern "C" float GetTextLineHeight__1b5674cc51da2dda() {
	return ImGui::GetTextLineHeight();
}
extern "C" float GetTextLineHeightWithSpacing__18a388dc29f73481() {
	return ImGui::GetTextLineHeightWithSpacing();
}
extern "C" float GetFrameHeight__c1b4a6f8a6f600cf() {
	return ImGui::GetFrameHeight();
}
extern "C" float GetFrameHeightWithSpacing__2618fb3737ae118() {
	return ImGui::GetFrameHeightWithSpacing();
}
extern "C" void PushID__c1f47dc30561eb97(const char* str_id) {
	ImGui::PushID(str_id);
}
extern "C" void PushID__c1f47dc30561eb97_1(const char* str_id_begin, const char* str_id_end) {
	ImGui::PushID(str_id_begin, str_id_end);
}
extern "C" void PushID__c1f47dc30561eb97_2(const void* ptr_id) {
	ImGui::PushID(ptr_id);
}
extern "C" void PushID__c1f47dc30561eb97_3(int int_id) {
	ImGui::PushID(int_id);
}
extern "C" void PopID__f836dcff58c09f7a() {
	ImGui::PopID();
}
extern "C" unsigned int GetID__3c6145040d727c96(const char* str_id) {
	return ImGui::GetID(str_id);
}
extern "C" unsigned int GetID__3c6145040d727c96_1(const char* str_id_begin, const char* str_id_end) {
	return ImGui::GetID(str_id_begin, str_id_end);
}
extern "C" unsigned int GetID__3c6145040d727c96_2(const void* ptr_id) {
	return ImGui::GetID(ptr_id);
}
extern "C" unsigned int GetID__3c6145040d727c96_3(int int_id) {
	return ImGui::GetID(int_id);
}
extern "C" void TextUnformatted__a7b97b5a7ebce722(const char* text, const char* text_end) {
	ImGui::TextUnformatted(text, text_end);
}
extern "C" void Text__5e98d1ef5d3f41bd(const char* fmt, ...) {
	va_list __ZPP_args;
	va_start(__ZPP_args, fmt);
	ImGui::Text(fmt);
	va_end(__ZPP_args);
}
extern "C" void TextV__2c72c613835cffdf(const char* fmt, char* args) {
	ImGui::TextV(fmt, args);
}
extern "C" void TextColored__49b349d1af96e43e(const ImVec4* col, const char* fmt, ...) {
	va_list __ZPP_args;
	va_start(__ZPP_args, fmt);
	ImGui::TextColored(*col, fmt);
	va_end(__ZPP_args);
}
extern "C" void TextColoredV__5b9a62df7a068eb3(const ImVec4* col, const char* fmt, char* args) {
	ImGui::TextColoredV(*col, fmt, args);
}
extern "C" void TextDisabled__92ec324b4be7a6f2(const char* fmt, ...) {
	va_list __ZPP_args;
	va_start(__ZPP_args, fmt);
	ImGui::TextDisabled(fmt);
	va_end(__ZPP_args);
}
extern "C" void TextDisabledV__50d5260b03138928(const char* fmt, char* args) {
	ImGui::TextDisabledV(fmt, args);
}
extern "C" void TextWrapped__ed4a12dc9ab5f371(const char* fmt, ...) {
	va_list __ZPP_args;
	va_start(__ZPP_args, fmt);
	ImGui::TextWrapped(fmt);
	va_end(__ZPP_args);
}
extern "C" void TextWrappedV__d77e855d2ecbecb2(const char* fmt, char* args) {
	ImGui::TextWrappedV(fmt, args);
}
extern "C" void LabelText__1c776b0da8834f2a(const char* label, const char* fmt, ...) {
	va_list __ZPP_args;
	va_start(__ZPP_args, fmt);
	ImGui::LabelText(label, fmt);
	va_end(__ZPP_args);
}
extern "C" void LabelTextV__3d1b1739b4df6cf6(const char* label, const char* fmt, char* args) {
	ImGui::LabelTextV(label, fmt, args);
}
extern "C" void BulletText__ff1531d7aa2f61e4(const char* fmt, ...) {
	va_list __ZPP_args;
	va_start(__ZPP_args, fmt);
	ImGui::BulletText(fmt);
	va_end(__ZPP_args);
}
extern "C" void BulletTextV__aadf1dfd679856c6(const char* fmt, char* args) {
	ImGui::BulletTextV(fmt, args);
}
extern "C" void SeparatorText__73af9b61ffe008a9(const char* label) {
	ImGui::SeparatorText(label);
}
extern "C" bool Button__e28abe15ad2a7be8(const char* label, const ImVec2* size) {
	return ImGui::Button(label, *size);
}
extern "C" bool SmallButton__6812ee491c7f6878(const char* label) {
	return ImGui::SmallButton(label);
}
extern "C" bool InvisibleButton__7affb17028b1cc7(const char* str_id, const ImVec2* size, int flags) {
	return ImGui::InvisibleButton(str_id, *size, flags);
}
extern "C" bool ArrowButton__87f42cbc97fe4d85(const char* str_id, ImGuiDir dir) {
	return ImGui::ArrowButton(str_id, dir);
}
extern "C" bool Checkbox__3499a6c7b80278b8(const char* label, bool* v) {
	return ImGui::Checkbox(label, v);
}
extern "C" bool CheckboxFlags__42b093e3a3e5aa3(const char* label, int* flags, int flags_value) {
	return ImGui::CheckboxFlags(label, flags, flags_value);
}
extern "C" bool CheckboxFlags__42b093e3a3e5aa3_1(const char* label, unsigned int* flags, unsigned int flags_value) {
	return ImGui::CheckboxFlags(label, flags, flags_value);
}
extern "C" bool RadioButton__fee2fe660618d769(const char* label, bool active) {
	return ImGui::RadioButton(label, active);
}
extern "C" bool RadioButton__fee2fe660618d769_1(const char* label, int* v, int v_button) {
	return ImGui::RadioButton(label, v, v_button);
}
extern "C" void ProgressBar__3871449f79d4c768(float fraction, const ImVec2* size_arg, const char* overlay) {
	ImGui::ProgressBar(fraction, *size_arg, overlay);
}
extern "C" void Bullet__157dc592949a90fe() {
	ImGui::Bullet();
}
extern "C" bool TextLink__b7377a716215da2c(const char* label) {
	return ImGui::TextLink(label);
}
extern "C" bool TextLinkOpenURL__2d673e51a68188b8(const char* label, const char* url) {
	return ImGui::TextLinkOpenURL(label, url);
}
extern "C" void Image__342c5ebe2ac95d69(ImTextureRef tex_ref, const ImVec2* image_size, const ImVec2* uv0, const ImVec2* uv1) {
	ImGui::Image(tex_ref, *image_size, *uv0, *uv1);
}
extern "C" void ImageWithBg__b8052ea7f43c19e6(ImTextureRef tex_ref, const ImVec2* image_size, const ImVec2* uv0, const ImVec2* uv1, const ImVec4* bg_col, const ImVec4* tint_col) {
	ImGui::ImageWithBg(tex_ref, *image_size, *uv0, *uv1, *bg_col, *tint_col);
}
extern "C" bool ImageButton__603286a5b208ba3a(const char* str_id, ImTextureRef tex_ref, const ImVec2* image_size, const ImVec2* uv0, const ImVec2* uv1, const ImVec4* bg_col, const ImVec4* tint_col) {
	return ImGui::ImageButton(str_id, tex_ref, *image_size, *uv0, *uv1, *bg_col, *tint_col);
}
extern "C" bool BeginCombo__982eb6157ae00543(const char* label, const char* preview_value, int flags) {
	return ImGui::BeginCombo(label, preview_value, flags);
}
extern "C" void EndCombo__7b85c20ecad8113c() {
	ImGui::EndCombo();
}
extern "C" bool Combo__33b7a8c5bbd21f1c(const char* label, int* current_item, const const char* items[], int items_count, int popup_max_height_in_items) {
	return ImGui::Combo(label, current_item, items, items_count, popup_max_height_in_items);
}
extern "C" bool Combo__33b7a8c5bbd21f1c_1(const char* label, int* current_item, const char* items_separated_by_zeros, int popup_max_height_in_items) {
	return ImGui::Combo(label, current_item, items_separated_by_zeros, popup_max_height_in_items);
}
extern "C" bool Combo__33b7a8c5bbd21f1c_2(const char* label, int* current_item, const char* (*getter)(void*, int), void* user_data, int items_count, int popup_max_height_in_items) {
	return ImGui::Combo(label, current_item, getter, user_data, items_count, popup_max_height_in_items);
}
extern "C" bool DragFloat__2dc3ae63ba4838e5(const char* label, float* v, float v_speed, float v_min, float v_max, const char* format, int flags) {
	return ImGui::DragFloat(label, v, v_speed, v_min, v_max, format, flags);
}
extern "C" bool DragFloat2__8d9fe5eb1a30b1ed(const char* label, float v[2], float v_speed, float v_min, float v_max, const char* format, int flags) {
	return ImGui::DragFloat2(label, v, v_speed, v_min, v_max, format, flags);
}
extern "C" bool DragFloat3__50571b34758bde05(const char* label, float v[3], float v_speed, float v_min, float v_max, const char* format, int flags) {
	return ImGui::DragFloat3(label, v, v_speed, v_min, v_max, format, flags);
}
extern "C" bool DragFloat4__6b7a71b0474266f(const char* label, float v[4], float v_speed, float v_min, float v_max, const char* format, int flags) {
	return ImGui::DragFloat4(label, v, v_speed, v_min, v_max, format, flags);
}
extern "C" bool DragFloatRange2__dc5350ec4962166(const char* label, float* v_current_min, float* v_current_max, float v_speed, float v_min, float v_max, const char* format, const char* format_max, int flags) {
	return ImGui::DragFloatRange2(label, v_current_min, v_current_max, v_speed, v_min, v_max, format, format_max, flags);
}
extern "C" bool DragInt__48968c18374e6155(const char* label, int* v, float v_speed, int v_min, int v_max, const char* format, int flags) {
	return ImGui::DragInt(label, v, v_speed, v_min, v_max, format, flags);
}
extern "C" bool DragInt2__4a9cbfee33f542eb(const char* label, int v[2], float v_speed, int v_min, int v_max, const char* format, int flags) {
	return ImGui::DragInt2(label, v, v_speed, v_min, v_max, format, flags);
}
extern "C" bool DragInt3__acb39df9ce4ad4ee(const char* label, int v[3], float v_speed, int v_min, int v_max, const char* format, int flags) {
	return ImGui::DragInt3(label, v, v_speed, v_min, v_max, format, flags);
}
extern "C" bool DragInt4__2ce7c23c675dc127(const char* label, int v[4], float v_speed, int v_min, int v_max, const char* format, int flags) {
	return ImGui::DragInt4(label, v, v_speed, v_min, v_max, format, flags);
}
extern "C" bool DragIntRange2__4bd494b56354a8db(const char* label, int* v_current_min, int* v_current_max, float v_speed, int v_min, int v_max, const char* format, const char* format_max, int flags) {
	return ImGui::DragIntRange2(label, v_current_min, v_current_max, v_speed, v_min, v_max, format, format_max, flags);
}
extern "C" bool DragScalar__6f89f343e11e6509(const char* label, int data_type, void* p_data, float v_speed, const void* p_min, const void* p_max, const char* format, int flags) {
	return ImGui::DragScalar(label, data_type, p_data, v_speed, p_min, p_max, format, flags);
}
extern "C" bool DragScalarN__ed4b5a615065148d(const char* label, int data_type, void* p_data, int components, float v_speed, const void* p_min, const void* p_max, const char* format, int flags) {
	return ImGui::DragScalarN(label, data_type, p_data, components, v_speed, p_min, p_max, format, flags);
}
extern "C" bool SliderFloat__8399777afcd36ad4(const char* label, float* v, float v_min, float v_max, const char* format, int flags) {
	return ImGui::SliderFloat(label, v, v_min, v_max, format, flags);
}
extern "C" bool SliderFloat2__2919a8fede815d44(const char* label, float v[2], float v_min, float v_max, const char* format, int flags) {
	return ImGui::SliderFloat2(label, v, v_min, v_max, format, flags);
}
extern "C" bool SliderFloat3__29272244e3ee6130(const char* label, float v[3], float v_min, float v_max, const char* format, int flags) {
	return ImGui::SliderFloat3(label, v, v_min, v_max, format, flags);
}
extern "C" bool SliderFloat4__f8d7b5965b0e3d6c(const char* label, float v[4], float v_min, float v_max, const char* format, int flags) {
	return ImGui::SliderFloat4(label, v, v_min, v_max, format, flags);
}
extern "C" bool SliderAngle__e2ef2656c22a6e81(const char* label, float* v_rad, float v_degrees_min, float v_degrees_max, const char* format, int flags) {
	return ImGui::SliderAngle(label, v_rad, v_degrees_min, v_degrees_max, format, flags);
}
extern "C" bool SliderInt__b28ef1af6824a1e3(const char* label, int* v, int v_min, int v_max, const char* format, int flags) {
	return ImGui::SliderInt(label, v, v_min, v_max, format, flags);
}
extern "C" bool SliderInt2__271097e76dee05c6(const char* label, int v[2], int v_min, int v_max, const char* format, int flags) {
	return ImGui::SliderInt2(label, v, v_min, v_max, format, flags);
}
extern "C" bool SliderInt3__87cf89f9012a5f5a(const char* label, int v[3], int v_min, int v_max, const char* format, int flags) {
	return ImGui::SliderInt3(label, v, v_min, v_max, format, flags);
}
extern "C" bool SliderInt4__f1cc04f2b79d4aa0(const char* label, int v[4], int v_min, int v_max, const char* format, int flags) {
	return ImGui::SliderInt4(label, v, v_min, v_max, format, flags);
}
extern "C" bool SliderScalar__b382a45ea0a95840(const char* label, int data_type, void* p_data, const void* p_min, const void* p_max, const char* format, int flags) {
	return ImGui::SliderScalar(label, data_type, p_data, p_min, p_max, format, flags);
}
extern "C" bool SliderScalarN__11edf311ba51a3e4(const char* label, int data_type, void* p_data, int components, const void* p_min, const void* p_max, const char* format, int flags) {
	return ImGui::SliderScalarN(label, data_type, p_data, components, p_min, p_max, format, flags);
}
extern "C" bool VSliderFloat__a024399e5bb6641b(const char* label, const ImVec2* size, float* v, float v_min, float v_max, const char* format, int flags) {
	return ImGui::VSliderFloat(label, *size, v, v_min, v_max, format, flags);
}
extern "C" bool VSliderInt__a09b40107a01af8e(const char* label, const ImVec2* size, int* v, int v_min, int v_max, const char* format, int flags) {
	return ImGui::VSliderInt(label, *size, v, v_min, v_max, format, flags);
}
extern "C" bool VSliderScalar__bd3c9c10bbffc6d6(const char* label, const ImVec2* size, int data_type, void* p_data, const void* p_min, const void* p_max, const char* format, int flags) {
	return ImGui::VSliderScalar(label, *size, data_type, p_data, p_min, p_max, format, flags);
}
extern "C" bool InputText__fb724d96c0a5a49f(const char* label, char* buf, unsigned long long buf_size, int flags, int (*callback)(ImGuiInputTextCallbackData*), void* user_data) {
	return ImGui::InputText(label, buf, buf_size, flags, callback, user_data);
}
extern "C" bool InputTextMultiline__5c703f04cb39e5b7(const char* label, char* buf, unsigned long long buf_size, const ImVec2* size, int flags, int (*callback)(ImGuiInputTextCallbackData*), void* user_data) {
	return ImGui::InputTextMultiline(label, buf, buf_size, *size, flags, callback, user_data);
}
extern "C" bool InputTextWithHint__be7651508dbae4e5(const char* label, const char* hint, char* buf, unsigned long long buf_size, int flags, int (*callback)(ImGuiInputTextCallbackData*), void* user_data) {
	return ImGui::InputTextWithHint(label, hint, buf, buf_size, flags, callback, user_data);
}
extern "C" bool InputFloat__2f9ccf037b725ed1(const char* label, float* v, float step, float step_fast, const char* format, int flags) {
	return ImGui::InputFloat(label, v, step, step_fast, format, flags);
}
extern "C" bool InputFloat2__8ab44e1eae8baa7c(const char* label, float v[2], const char* format, int flags) {
	return ImGui::InputFloat2(label, v, format, flags);
}
extern "C" bool InputFloat3__4c27204fb850b1fa(const char* label, float v[3], const char* format, int flags) {
	return ImGui::InputFloat3(label, v, format, flags);
}
extern "C" bool InputFloat4__fe6d60c91b449b3(const char* label, float v[4], const char* format, int flags) {
	return ImGui::InputFloat4(label, v, format, flags);
}
extern "C" bool InputInt__97f2b8e96dff3897(const char* label, int* v, int step, int step_fast, int flags) {
	return ImGui::InputInt(label, v, step, step_fast, flags);
}
extern "C" bool InputInt2__6e8e822a289682b6(const char* label, int v[2], int flags) {
	return ImGui::InputInt2(label, v, flags);
}
extern "C" bool InputInt3__9f57243a13b3dac3(const char* label, int v[3], int flags) {
	return ImGui::InputInt3(label, v, flags);
}
extern "C" bool InputInt4__277bec0a8ee60136(const char* label, int v[4], int flags) {
	return ImGui::InputInt4(label, v, flags);
}
extern "C" bool InputDouble__8f499ad741e36516(const char* label, double* v, double step, double step_fast, const char* format, int flags) {
	return ImGui::InputDouble(label, v, step, step_fast, format, flags);
}
extern "C" bool InputScalar__7d1e21d8a7b17e92(const char* label, int data_type, void* p_data, const void* p_step, const void* p_step_fast, const char* format, int flags) {
	return ImGui::InputScalar(label, data_type, p_data, p_step, p_step_fast, format, flags);
}
extern "C" bool InputScalarN__6a41d1d3d997cf9b(const char* label, int data_type, void* p_data, int components, const void* p_step, const void* p_step_fast, const char* format, int flags) {
	return ImGui::InputScalarN(label, data_type, p_data, components, p_step, p_step_fast, format, flags);
}
extern "C" bool ColorEdit3__a241faa37c3a725c(const char* label, float col[3], int flags) {
	return ImGui::ColorEdit3(label, col, flags);
}
extern "C" bool ColorEdit4__37f67f5756b3920e(const char* label, float col[4], int flags) {
	return ImGui::ColorEdit4(label, col, flags);
}
extern "C" bool ColorPicker3__48ebd68e4816d1a6(const char* label, float col[3], int flags) {
	return ImGui::ColorPicker3(label, col, flags);
}
extern "C" bool ColorPicker4__26de24f880244bc2(const char* label, float col[4], int flags, const float* ref_col) {
	return ImGui::ColorPicker4(label, col, flags, ref_col);
}
extern "C" bool ColorButton__ba849f85186e6fcc(const char* desc_id, const ImVec4* col, int flags, const ImVec2* size) {
	return ImGui::ColorButton(desc_id, *col, flags, *size);
}
extern "C" void SetColorEditOptions__1e2d52cd718e6e29(int flags) {
	ImGui::SetColorEditOptions(flags);
}
extern "C" bool TreeNode__80a9c1696e07455c(const char* label) {
	return ImGui::TreeNode(label);
}
extern "C" bool TreeNode__80a9c1696e07455c_1(const char* str_id, const char* fmt, ...) {
	va_list __ZPP_args;
	va_start(__ZPP_args, fmt);
	bool __ZPP_result = ImGui::TreeNode(str_id, fmt);
	va_end(__ZPP_args);
	return __ZPP_result;
}
extern "C" bool TreeNode__80a9c1696e07455c_2(const void* ptr_id, const char* fmt, ...) {
	va_list __ZPP_args;
	va_start(__ZPP_args, fmt);
	bool __ZPP_result = ImGui::TreeNode(ptr_id, fmt);
	va_end(__ZPP_args);
	return __ZPP_result;
}
extern "C" bool TreeNodeV__3c21e2484267a68a(const char* str_id, const char* fmt, char* args) {
	return ImGui::TreeNodeV(str_id, fmt, args);
}
extern "C" bool TreeNodeV__3c21e2484267a68a_1(const void* ptr_id, const char* fmt, char* args) {
	return ImGui::TreeNodeV(ptr_id, fmt, args);
}
extern "C" bool TreeNodeEx__42a1e2acbf282485(const char* label, int flags) {
	return ImGui::TreeNodeEx(label, flags);
}
extern "C" bool TreeNodeEx__42a1e2acbf282485_1(const char* str_id, int flags, const char* fmt, ...) {
	va_list __ZPP_args;
	va_start(__ZPP_args, fmt);
	bool __ZPP_result = ImGui::TreeNodeEx(str_id, flags, fmt);
	va_end(__ZPP_args);
	return __ZPP_result;
}
extern "C" bool TreeNodeEx__42a1e2acbf282485_2(const void* ptr_id, int flags, const char* fmt, ...) {
	va_list __ZPP_args;
	va_start(__ZPP_args, fmt);
	bool __ZPP_result = ImGui::TreeNodeEx(ptr_id, flags, fmt);
	va_end(__ZPP_args);
	return __ZPP_result;
}
extern "C" bool TreeNodeExV__ffd3bf7a0e94717d(const char* str_id, int flags, const char* fmt, char* args) {
	return ImGui::TreeNodeExV(str_id, flags, fmt, args);
}
extern "C" bool TreeNodeExV__ffd3bf7a0e94717d_1(const void* ptr_id, int flags, const char* fmt, char* args) {
	return ImGui::TreeNodeExV(ptr_id, flags, fmt, args);
}
extern "C" void TreePush__dea7774114d872d0(const char* str_id) {
	ImGui::TreePush(str_id);
}
extern "C" void TreePush__dea7774114d872d0_1(const void* ptr_id) {
	ImGui::TreePush(ptr_id);
}
extern "C" void TreePop__4e7b0e88a0b90cd9() {
	ImGui::TreePop();
}
extern "C" float GetTreeNodeToLabelSpacing__ce241a94d50dd4a4() {
	return ImGui::GetTreeNodeToLabelSpacing();
}
extern "C" bool CollapsingHeader__e8c045bc87177fd1(const char* label, int flags) {
	return ImGui::CollapsingHeader(label, flags);
}
extern "C" bool CollapsingHeader__e8c045bc87177fd1_1(const char* label, bool* p_visible, int flags) {
	return ImGui::CollapsingHeader(label, p_visible, flags);
}
extern "C" void SetNextItemOpen__418247d9e1902364(bool is_open, int cond) {
	ImGui::SetNextItemOpen(is_open, cond);
}
extern "C" void SetNextItemStorageID__f2ee1ba9a88e5f7e(unsigned int storage_id) {
	ImGui::SetNextItemStorageID(storage_id);
}
extern "C" bool Selectable__23766c4a0e015856(const char* label, bool selected, int flags, const ImVec2* size) {
	return ImGui::Selectable(label, selected, flags, *size);
}
extern "C" bool Selectable__23766c4a0e015856_1(const char* label, bool* p_selected, int flags, const ImVec2* size) {
	return ImGui::Selectable(label, p_selected, flags, *size);
}
extern "C" ImGuiMultiSelectIO* BeginMultiSelect__200a20f6d0e19c98(int flags, int selection_size, int items_count) {
	return ImGui::BeginMultiSelect(flags, selection_size, items_count);
}
extern "C" ImGuiMultiSelectIO* EndMultiSelect__9dc309364baed42f() {
	return ImGui::EndMultiSelect();
}
extern "C" void SetNextItemSelectionUserData__d280e461897b7eb0(long long selection_user_data) {
	ImGui::SetNextItemSelectionUserData(selection_user_data);
}
extern "C" bool IsItemToggledSelection__63c4439a14e13650() {
	return ImGui::IsItemToggledSelection();
}
extern "C" bool BeginListBox__7e6694cd16075fa5(const char* label, const ImVec2* size) {
	return ImGui::BeginListBox(label, *size);
}
extern "C" void EndListBox__b7ccb453c404411c() {
	ImGui::EndListBox();
}
extern "C" bool ListBox__1fb0d4c51b313761(const char* label, int* current_item, const const char* items[], int items_count, int height_in_items) {
	return ImGui::ListBox(label, current_item, items, items_count, height_in_items);
}
extern "C" bool ListBox__1fb0d4c51b313761_1(const char* label, int* current_item, const char* (*getter)(void*, int), void* user_data, int items_count, int height_in_items) {
	return ImGui::ListBox(label, current_item, getter, user_data, items_count, height_in_items);
}
extern "C" void PlotLines__40060fba323f9778(const char* label, const float* values, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size, int stride) {
	ImGui::PlotLines(label, values, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size, stride);
}
extern "C" void PlotLines__40060fba323f9778_1(const char* label, float (*values_getter)(void*, int), void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size) {
	ImGui::PlotLines(label, values_getter, data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);
}
extern "C" void PlotHistogram__83ffde114549bbf(const char* label, const float* values, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size, int stride) {
	ImGui::PlotHistogram(label, values, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size, stride);
}
extern "C" void PlotHistogram__83ffde114549bbf_1(const char* label, float (*values_getter)(void*, int), void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size) {
	ImGui::PlotHistogram(label, values_getter, data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);
}
extern "C" void Value__410e34259fd7958d(const char* prefix, bool b) {
	ImGui::Value(prefix, b);
}
extern "C" void Value__410e34259fd7958d_1(const char* prefix, int v) {
	ImGui::Value(prefix, v);
}
extern "C" void Value__410e34259fd7958d_2(const char* prefix, unsigned int v) {
	ImGui::Value(prefix, v);
}
extern "C" void Value__410e34259fd7958d_3(const char* prefix, float v, const char* float_format) {
	ImGui::Value(prefix, v, float_format);
}
extern "C" bool BeginMenuBar__68eeb36db997f2aa() {
	return ImGui::BeginMenuBar();
}
extern "C" void EndMenuBar__2190bd3f73ed4e5() {
	ImGui::EndMenuBar();
}
extern "C" bool BeginMainMenuBar__451d9c3f72982fe6() {
	return ImGui::BeginMainMenuBar();
}
extern "C" void EndMainMenuBar__90fb7d8bf9e94f56() {
	ImGui::EndMainMenuBar();
}
extern "C" bool BeginMenu__e8b6450765271e0f(const char* label, bool enabled) {
	return ImGui::BeginMenu(label, enabled);
}
extern "C" void EndMenu__842571ebafc35d29() {
	ImGui::EndMenu();
}
extern "C" bool MenuItem__26da1c3957b55a90(const char* label, const char* shortcut, bool selected, bool enabled) {
	return ImGui::MenuItem(label, shortcut, selected, enabled);
}
extern "C" bool MenuItem__26da1c3957b55a90_1(const char* label, const char* shortcut, bool* p_selected, bool enabled) {
	return ImGui::MenuItem(label, shortcut, p_selected, enabled);
}
extern "C" bool BeginTooltip__edd44921c3ee49eb() {
	return ImGui::BeginTooltip();
}
extern "C" void EndTooltip__70cac3b751c22e07() {
	ImGui::EndTooltip();
}
extern "C" void SetTooltip__d2ed7ef13a15aae0(const char* fmt, ...) {
	va_list __ZPP_args;
	va_start(__ZPP_args, fmt);
	ImGui::SetTooltip(fmt);
	va_end(__ZPP_args);
}
extern "C" void SetTooltipV__a0f2a64e0e655680(const char* fmt, char* args) {
	ImGui::SetTooltipV(fmt, args);
}
extern "C" bool BeginItemTooltip__531fce1ba6d5b8f3() {
	return ImGui::BeginItemTooltip();
}
extern "C" void SetItemTooltip__7cdd6c788467f187(const char* fmt, ...) {
	va_list __ZPP_args;
	va_start(__ZPP_args, fmt);
	ImGui::SetItemTooltip(fmt);
	va_end(__ZPP_args);
}
extern "C" void SetItemTooltipV__e748cd91d869d2a1(const char* fmt, char* args) {
	ImGui::SetItemTooltipV(fmt, args);
}
extern "C" bool BeginPopup__af7decd105d1b4c6(const char* str_id, int flags) {
	return ImGui::BeginPopup(str_id, flags);
}
extern "C" bool BeginPopupModal__c39277cb1c014458(const char* name, bool* p_open, int flags) {
	return ImGui::BeginPopupModal(name, p_open, flags);
}
extern "C" void EndPopup__64bfeaf471d1644e() {
	ImGui::EndPopup();
}
extern "C" void OpenPopup__620aad0c8e1a1f4a(const char* str_id, int popup_flags) {
	ImGui::OpenPopup(str_id, popup_flags);
}
extern "C" void OpenPopup__620aad0c8e1a1f4a_1(unsigned int id, int popup_flags) {
	ImGui::OpenPopup(id, popup_flags);
}
extern "C" void OpenPopupOnItemClick__e2d226632f22c20(const char* str_id, int popup_flags) {
	ImGui::OpenPopupOnItemClick(str_id, popup_flags);
}
extern "C" void CloseCurrentPopup__9e57b10955023e7a() {
	ImGui::CloseCurrentPopup();
}
extern "C" bool BeginPopupContextItem__780d058c91b31ff8(const char* str_id, int popup_flags) {
	return ImGui::BeginPopupContextItem(str_id, popup_flags);
}
extern "C" bool BeginPopupContextWindow__f71efb0fc1cbb3f9(const char* str_id, int popup_flags) {
	return ImGui::BeginPopupContextWindow(str_id, popup_flags);
}
extern "C" bool BeginPopupContextVoid__e84a1cab0911c654(const char* str_id, int popup_flags) {
	return ImGui::BeginPopupContextVoid(str_id, popup_flags);
}
extern "C" bool IsPopupOpen__24a7cc6afaeb53cf(const char* str_id, int flags) {
	return ImGui::IsPopupOpen(str_id, flags);
}
extern "C" bool BeginTable__7c86f34a38366f03(const char* str_id, int columns, int flags, const ImVec2* outer_size, float inner_width) {
	return ImGui::BeginTable(str_id, columns, flags, *outer_size, inner_width);
}
extern "C" void EndTable__36da284655b62d61() {
	ImGui::EndTable();
}
extern "C" void TableNextRow__44dde2910f4eef96(int row_flags, float min_row_height) {
	ImGui::TableNextRow(row_flags, min_row_height);
}
extern "C" bool TableNextColumn__9116ca99147d2990() {
	return ImGui::TableNextColumn();
}
extern "C" bool TableSetColumnIndex__8eb2c94e78a9d32d(int column_n) {
	return ImGui::TableSetColumnIndex(column_n);
}
extern "C" void TableSetupColumn__395380f03ff7ab03(const char* label, int flags, float init_width_or_weight, unsigned int user_id) {
	ImGui::TableSetupColumn(label, flags, init_width_or_weight, user_id);
}
extern "C" void TableSetupScrollFreeze__4d12d0f92856d348(int cols, int rows) {
	ImGui::TableSetupScrollFreeze(cols, rows);
}
extern "C" void TableHeader__798a00acf3a5128b(const char* label) {
	ImGui::TableHeader(label);
}
extern "C" void TableHeadersRow__5fceeaeb416d187d() {
	ImGui::TableHeadersRow();
}
extern "C" void TableAngledHeadersRow__9fb41a9800d49aff() {
	ImGui::TableAngledHeadersRow();
}
extern "C" ImGuiTableSortSpecs* TableGetSortSpecs__5df8fd79c76dac0e() {
	return ImGui::TableGetSortSpecs();
}
extern "C" int TableGetColumnCount__6e99a71548595f29() {
	return ImGui::TableGetColumnCount();
}
extern "C" int TableGetColumnIndex__cec05d99739117() {
	return ImGui::TableGetColumnIndex();
}
extern "C" int TableGetRowIndex__788b594343a799cd() {
	return ImGui::TableGetRowIndex();
}
extern "C" const char* TableGetColumnName__563a353bb3fef88a(int column_n) {
	return ImGui::TableGetColumnName(column_n);
}
extern "C" int TableGetColumnFlags__5588304353ee148c(int column_n) {
	return ImGui::TableGetColumnFlags(column_n);
}
extern "C" void TableSetColumnEnabled__9c875c490131a00f(int column_n, bool v) {
	ImGui::TableSetColumnEnabled(column_n, v);
}
extern "C" int TableGetHoveredColumn__12a5030c0ab12766() {
	return ImGui::TableGetHoveredColumn();
}
extern "C" void TableSetBgColor__9ee278dc9fe53c2c(int target, unsigned int color, int column_n) {
	ImGui::TableSetBgColor(target, color, column_n);
}
extern "C" void Columns__86ffd29113234f80(int count, const char* id, bool borders) {
	ImGui::Columns(count, id, borders);
}
extern "C" void NextColumn__ac54ba9c02fa72bf() {
	ImGui::NextColumn();
}
extern "C" int GetColumnIndex__5589da84cf2639cb() {
	return ImGui::GetColumnIndex();
}
extern "C" float GetColumnWidth__33268bb08c5466bb(int column_index) {
	return ImGui::GetColumnWidth(column_index);
}
extern "C" void SetColumnWidth__8c0f202be8be631b(int column_index, float width) {
	ImGui::SetColumnWidth(column_index, width);
}
extern "C" float GetColumnOffset__d3e88ef928c47817(int column_index) {
	return ImGui::GetColumnOffset(column_index);
}
extern "C" void SetColumnOffset__570bd80395952315(int column_index, float offset_x) {
	ImGui::SetColumnOffset(column_index, offset_x);
}
extern "C" int GetColumnsCount__21f24495a856c35e() {
	return ImGui::GetColumnsCount();
}
extern "C" bool BeginTabBar__d1b00e36d8e2d417(const char* str_id, int flags) {
	return ImGui::BeginTabBar(str_id, flags);
}
extern "C" void EndTabBar__52290b9a2e2db384() {
	ImGui::EndTabBar();
}
extern "C" bool BeginTabItem__477a46f595e13(const char* label, bool* p_open, int flags) {
	return ImGui::BeginTabItem(label, p_open, flags);
}
extern "C" void EndTabItem__e0179ccd7fc1b587() {
	ImGui::EndTabItem();
}
extern "C" bool TabItemButton__84300e4af41a6ac3(const char* label, int flags) {
	return ImGui::TabItemButton(label, flags);
}
extern "C" void SetTabItemClosed__208f691541a5f6d1(const char* tab_or_docked_window_label) {
	ImGui::SetTabItemClosed(tab_or_docked_window_label);
}
extern "C" void LogToTTY__d65c762233b9da76(int auto_open_depth) {
	ImGui::LogToTTY(auto_open_depth);
}
extern "C" void LogToFile__49c03e8156b09a50(int auto_open_depth, const char* filename) {
	ImGui::LogToFile(auto_open_depth, filename);
}
extern "C" void LogToClipboard__feafb6f86af54579(int auto_open_depth) {
	ImGui::LogToClipboard(auto_open_depth);
}
extern "C" void LogFinish__adf6df9d3cc4a7f() {
	ImGui::LogFinish();
}
extern "C" void LogButtons__e5feb74bdecea776() {
	ImGui::LogButtons();
}
extern "C" void LogText__7232fc82144aa652(const char* fmt, ...) {
	va_list __ZPP_args;
	va_start(__ZPP_args, fmt);
	ImGui::LogText(fmt);
	va_end(__ZPP_args);
}
extern "C" void LogTextV__402bdaca43d29749(const char* fmt, char* args) {
	ImGui::LogTextV(fmt, args);
}
extern "C" bool BeginDragDropSource__361a5fddfc48e5d5(int flags) {
	return ImGui::BeginDragDropSource(flags);
}
extern "C" bool SetDragDropPayload__ab9655c620dc5c99(const char* type, const void* data, unsigned long long sz, int cond) {
	return ImGui::SetDragDropPayload(type, data, sz, cond);
}
extern "C" void EndDragDropSource__216a2f7392882be3() {
	ImGui::EndDragDropSource();
}
extern "C" bool BeginDragDropTarget__e919928f901fff24() {
	return ImGui::BeginDragDropTarget();
}
extern "C" const ImGuiPayload* AcceptDragDropPayload__b7abd83aad61c449(const char* type, int flags) {
	return ImGui::AcceptDragDropPayload(type, flags);
}
extern "C" void EndDragDropTarget__9d6f80e5c9874ac2() {
	ImGui::EndDragDropTarget();
}
extern "C" const ImGuiPayload* GetDragDropPayload__5f488e5ff613926f() {
	return ImGui::GetDragDropPayload();
}
extern "C" void BeginDisabled__8288de5373e22196(bool disabled) {
	ImGui::BeginDisabled(disabled);
}
extern "C" void EndDisabled__a4706f935bac625f() {
	ImGui::EndDisabled();
}
extern "C" void PushClipRect__f943809f83598e77(const ImVec2* clip_rect_min, const ImVec2* clip_rect_max, bool intersect_with_current_clip_rect) {
	ImGui::PushClipRect(*clip_rect_min, *clip_rect_max, intersect_with_current_clip_rect);
}
extern "C" void PopClipRect__6f450f6b6bf04dd1() {
	ImGui::PopClipRect();
}
extern "C" void SetItemDefaultFocus__fbe3b895f4400076() {
	ImGui::SetItemDefaultFocus();
}
extern "C" void SetKeyboardFocusHere__b34c6bd9bad33d9a(int offset) {
	ImGui::SetKeyboardFocusHere(offset);
}
extern "C" void SetNavCursorVisible__b3f184ecf1508dd8(bool visible) {
	ImGui::SetNavCursorVisible(visible);
}
extern "C" void SetNextItemAllowOverlap__c1a9a50f396cc296() {
	ImGui::SetNextItemAllowOverlap();
}
extern "C" bool IsItemHovered__eb5480eb24eeed52(int flags) {
	return ImGui::IsItemHovered(flags);
}
extern "C" bool IsItemActive__6e30d4a06b1c360f() {
	return ImGui::IsItemActive();
}
extern "C" bool IsItemFocused__7af1b3e02820ea5() {
	return ImGui::IsItemFocused();
}
extern "C" bool IsItemClicked__255d1c5c846b4a2b(int mouse_button) {
	return ImGui::IsItemClicked(mouse_button);
}
extern "C" bool IsItemVisible__a25c43a322017e0b() {
	return ImGui::IsItemVisible();
}
extern "C" bool IsItemEdited__8d67c94241730fb3() {
	return ImGui::IsItemEdited();
}
extern "C" bool IsItemActivated__99ffe7530405ae6() {
	return ImGui::IsItemActivated();
}
extern "C" bool IsItemDeactivated__5b2fcb6aa7986a9f() {
	return ImGui::IsItemDeactivated();
}
extern "C" bool IsItemDeactivatedAfterEdit__e2593bc0cd3c5aed() {
	return ImGui::IsItemDeactivatedAfterEdit();
}
extern "C" bool IsItemToggledOpen__fe74bd795b12b1bb() {
	return ImGui::IsItemToggledOpen();
}
extern "C" bool IsAnyItemHovered__c987e5d9fecde969() {
	return ImGui::IsAnyItemHovered();
}
extern "C" bool IsAnyItemActive__2eb1e2d1ddd7590d() {
	return ImGui::IsAnyItemActive();
}
extern "C" bool IsAnyItemFocused__aa94a74ae0320549() {
	return ImGui::IsAnyItemFocused();
}
extern "C" unsigned int GetItemID__3d6eb69f935786c3() {
	return ImGui::GetItemID();
}
extern "C" void GetItemRectMin__53e9b36d84881940(ImVec2 *zpp_out) {
	*zpp_out = ImGui::GetItemRectMin();
}
extern "C" void GetItemRectMax__69272018b89d5a81(ImVec2 *zpp_out) {
	*zpp_out = ImGui::GetItemRectMax();
}
extern "C" void GetItemRectSize__ba63216f70e1c7ce(ImVec2 *zpp_out) {
	*zpp_out = ImGui::GetItemRectSize();
}
extern "C" ImGuiViewport* GetMainViewport__30a61b76a0b573b() {
	return ImGui::GetMainViewport();
}
extern "C" ImDrawList* GetBackgroundDrawList__184b3ebaa6ef2784() {
	return ImGui::GetBackgroundDrawList();
}
extern "C" ImDrawList* GetForegroundDrawList__2394c759322fc18b() {
	return ImGui::GetForegroundDrawList();
}
extern "C" bool IsRectVisible__91a83cc8546633(const ImVec2* size) {
	return ImGui::IsRectVisible(*size);
}
extern "C" bool IsRectVisible__91a83cc8546633_1(const ImVec2* rect_min, const ImVec2* rect_max) {
	return ImGui::IsRectVisible(*rect_min, *rect_max);
}
extern "C" double GetTime__3a02c90ce1962f73() {
	return ImGui::GetTime();
}
extern "C" int GetFrameCount__2a9a12740765dae4() {
	return ImGui::GetFrameCount();
}
extern "C" ImDrawListSharedData* GetDrawListSharedData__8649620304273bea() {
	return ImGui::GetDrawListSharedData();
}
extern "C" const char* GetStyleColorName__104002e8be53bb1f(int idx) {
	return ImGui::GetStyleColorName(idx);
}
extern "C" void SetStateStorage__f892d22f19fe6f4c(ImGuiStorage* storage) {
	ImGui::SetStateStorage(storage);
}
extern "C" ImGuiStorage* GetStateStorage__12e314f172810ac1() {
	return ImGui::GetStateStorage();
}
extern "C" void CalcTextSize__af665100d52149fb(const char* text, const char* text_end, bool hide_text_after_double_hash, float wrap_width, ImVec2 *zpp_out) {
	*zpp_out = ImGui::CalcTextSize(text, text_end, hide_text_after_double_hash, wrap_width);
}
extern "C" void ColorConvertU32ToFloat4__1efff13b5f16d7a9(unsigned int in, ImVec4 *zpp_out) {
	*zpp_out = ImGui::ColorConvertU32ToFloat4(in);
}
extern "C" unsigned int ColorConvertFloat4ToU32__6810bb20e24b8eed(const ImVec4* in) {
	return ImGui::ColorConvertFloat4ToU32(*in);
}
extern "C" void ColorConvertRGBtoHSV__75383368abe59de9(float r, float g, float b, float* out_h, float* out_s, float* out_v) {
	ImGui::ColorConvertRGBtoHSV(r, g, b, *out_h, *out_s, *out_v);
}
extern "C" void ColorConvertHSVtoRGB__59b2228f5d43f593(float h, float s, float v, float* out_r, float* out_g, float* out_b) {
	ImGui::ColorConvertHSVtoRGB(h, s, v, *out_r, *out_g, *out_b);
}
extern "C" bool IsKeyDown__b9a94fc762d525ee(ImGuiKey key) {
	return ImGui::IsKeyDown(key);
}
extern "C" bool IsKeyPressed__f63fedd58cd1075f(ImGuiKey key, bool repeat) {
	return ImGui::IsKeyPressed(key, repeat);
}
extern "C" bool IsKeyReleased__f3473022f21d87(ImGuiKey key) {
	return ImGui::IsKeyReleased(key);
}
extern "C" bool IsKeyChordPressed__87d59ff29f98d6a(int key_chord) {
	return ImGui::IsKeyChordPressed(key_chord);
}
extern "C" int GetKeyPressedAmount__4ec84b88cac4e7d1(ImGuiKey key, float repeat_delay, float rate) {
	return ImGui::GetKeyPressedAmount(key, repeat_delay, rate);
}
extern "C" const char* GetKeyName__f931db20e063f68(ImGuiKey key) {
	return ImGui::GetKeyName(key);
}
extern "C" void SetNextFrameWantCaptureKeyboard__e7119297f6d0dc6c(bool want_capture_keyboard) {
	ImGui::SetNextFrameWantCaptureKeyboard(want_capture_keyboard);
}
extern "C" bool Shortcut__c18f776eab5c1f97(int key_chord, int flags) {
	return ImGui::Shortcut(key_chord, flags);
}
extern "C" void SetNextItemShortcut__167042793c7fe154(int key_chord, int flags) {
	ImGui::SetNextItemShortcut(key_chord, flags);
}
extern "C" void SetItemKeyOwner__e3570bea464564bd(ImGuiKey key) {
	ImGui::SetItemKeyOwner(key);
}
extern "C" bool IsMouseDown__ab95df654cbfaf3f(int button) {
	return ImGui::IsMouseDown(button);
}
extern "C" bool IsMouseClicked__7892138fc77299ed(int button, bool repeat) {
	return ImGui::IsMouseClicked(button, repeat);
}
extern "C" bool IsMouseReleased__37d71e7c3a1ed07a(int button) {
	return ImGui::IsMouseReleased(button);
}
extern "C" bool IsMouseDoubleClicked__3802e12256e4a053(int button) {
	return ImGui::IsMouseDoubleClicked(button);
}
extern "C" bool IsMouseReleasedWithDelay__a4c8398ac8355d96(int button, float delay) {
	return ImGui::IsMouseReleasedWithDelay(button, delay);
}
extern "C" int GetMouseClickedCount__5915b1cb9e70e40f(int button) {
	return ImGui::GetMouseClickedCount(button);
}
extern "C" bool IsMouseHoveringRect__ac123f27bb570f80(const ImVec2* r_min, const ImVec2* r_max, bool clip) {
	return ImGui::IsMouseHoveringRect(*r_min, *r_max, clip);
}
extern "C" bool IsMousePosValid__e9023d707064bd25(const ImVec2* mouse_pos) {
	return ImGui::IsMousePosValid(mouse_pos);
}
extern "C" bool IsAnyMouseDown__beea21f057b8ba42() {
	return ImGui::IsAnyMouseDown();
}
extern "C" void GetMousePos__3f408d58028204e5(ImVec2 *zpp_out) {
	*zpp_out = ImGui::GetMousePos();
}
extern "C" void GetMousePosOnOpeningCurrentPopup__784cba92ff9a85a2(ImVec2 *zpp_out) {
	*zpp_out = ImGui::GetMousePosOnOpeningCurrentPopup();
}
extern "C" bool IsMouseDragging__35b0fc6cb18f47d5(int button, float lock_threshold) {
	return ImGui::IsMouseDragging(button, lock_threshold);
}
extern "C" void GetMouseDragDelta__5a10a78dfa1cd650(int button, float lock_threshold, ImVec2 *zpp_out) {
	*zpp_out = ImGui::GetMouseDragDelta(button, lock_threshold);
}
extern "C" void ResetMouseDragDelta__f48b69ff21393016(int button) {
	ImGui::ResetMouseDragDelta(button);
}
extern "C" int GetMouseCursor__23459e67748e9019() {
	return ImGui::GetMouseCursor();
}
extern "C" void SetMouseCursor__a38ad0a7fc886bb7(int cursor_type) {
	ImGui::SetMouseCursor(cursor_type);
}
extern "C" void SetNextFrameWantCaptureMouse__57f2e59c9da505f0(bool want_capture_mouse) {
	ImGui::SetNextFrameWantCaptureMouse(want_capture_mouse);
}
extern "C" const char* GetClipboardText__b0acf6b7ce5aeae6() {
	return ImGui::GetClipboardText();
}
extern "C" void SetClipboardText__26f65c0f131689ec(const char* text) {
	ImGui::SetClipboardText(text);
}
extern "C" void LoadIniSettingsFromDisk__38cda985091c2405(const char* ini_filename) {
	ImGui::LoadIniSettingsFromDisk(ini_filename);
}
extern "C" void LoadIniSettingsFromMemory__55d39b45163f01c5(const char* ini_data, unsigned long long ini_size) {
	ImGui::LoadIniSettingsFromMemory(ini_data, ini_size);
}
extern "C" void SaveIniSettingsToDisk__4308fa59e6d23842(const char* ini_filename) {
	ImGui::SaveIniSettingsToDisk(ini_filename);
}
extern "C" const char* SaveIniSettingsToMemory__8308ea65108965b5(unsigned long long* out_ini_size) {
	return ImGui::SaveIniSettingsToMemory(out_ini_size);
}
extern "C" void DebugTextEncoding__88b855dfeda6c297(const char* text) {
	ImGui::DebugTextEncoding(text);
}
extern "C" void DebugFlashStyleColor__be2b30778c97f0ba(int idx) {
	ImGui::DebugFlashStyleColor(idx);
}
extern "C" void DebugStartItemPicker__c959107c78594aeb() {
	ImGui::DebugStartItemPicker();
}
extern "C" bool DebugCheckVersionAndDataLayout__d8eb31902979c556(const char* version_str, unsigned long long sz_io, unsigned long long sz_style, unsigned long long sz_vec2, unsigned long long sz_vec4, unsigned long long sz_drawvert, unsigned long long sz_drawidx) {
	return ImGui::DebugCheckVersionAndDataLayout(version_str, sz_io, sz_style, sz_vec2, sz_vec4, sz_drawvert, sz_drawidx);
}
extern "C" void DebugLog__7f5d6c7f09c89a1(const char* fmt, ...) {
	va_list __ZPP_args;
	va_start(__ZPP_args, fmt);
	ImGui::DebugLog(fmt);
	va_end(__ZPP_args);
}
extern "C" void DebugLogV__5278711653f9ba1a(const char* fmt, char* args) {
	ImGui::DebugLogV(fmt, args);
}
extern "C" void SetAllocatorFunctions__54c5400d9fef432e(void* (*alloc_func)(unsigned long long, void*), void (*free_func)(void*, void*), void* user_data) {
	ImGui::SetAllocatorFunctions(alloc_func, free_func, user_data);
}
extern "C" void GetAllocatorFunctions__8dea9f4e68db4acc(void* (**p_alloc_func)(unsigned long long, void*), void (**p_free_func)(void*, void*), void** p_user_data) {
	ImGui::GetAllocatorFunctions(p_alloc_func, p_free_func, p_user_data);
}
extern "C" void* MemAlloc__e60dc2713666b50d(unsigned long long size) {
	return ImGui::MemAlloc(size);
}
extern "C" void MemFree__30e36caf65239a1d(void* ptr) {
	ImGui::MemFree(ptr);
}
extern "C" void PushFont__57a48dfb3f59b615_1(ImFont* font) {
	ImGui::PushFont(font);
}
extern "C" void SetWindowFontScale__251e322a2613dd77(float scale) {
	ImGui::SetWindowFontScale(scale);
}
extern "C" void Image__342c5ebe2ac95d69_1(ImTextureRef tex_ref, const ImVec2* image_size, const ImVec2* uv0, const ImVec2* uv1, const ImVec4* tint_col, const ImVec4* border_col) {
	ImGui::Image(tex_ref, *image_size, *uv0, *uv1, *tint_col, *border_col);
}
extern "C" void PushButtonRepeat__ef4515f341d3ee86(bool repeat) {
	ImGui::PushButtonRepeat(repeat);
}
extern "C" void PopButtonRepeat__4b428aee82902eb3() {
	ImGui::PopButtonRepeat();
}
extern "C" void PushTabStop__a1012eece897cc22(bool tab_stop) {
	ImGui::PushTabStop(tab_stop);
}
extern "C" void PopTabStop__b231eb0015e48140() {
	ImGui::PopTabStop();
}
extern "C" void GetContentRegionMax__d1d45c226c418d4e(ImVec2 *zpp_out) {
	*zpp_out = ImGui::GetContentRegionMax();
}
extern "C" void GetWindowContentRegionMin__84b7e4c3963e2e83(ImVec2 *zpp_out) {
	*zpp_out = ImGui::GetWindowContentRegionMin();
}
extern "C" void GetWindowContentRegionMax__573b515ed142bfc5(ImVec2 *zpp_out) {
	*zpp_out = ImGui::GetWindowContentRegionMax();
}
extern "C" bool BeginChildFrame__71165973d18f6615(unsigned int id, const ImVec2* size, int window_flags) {
	return ImGui::BeginChildFrame(id, *size, window_flags);
}
extern "C" void EndChildFrame__272850244b954c1f() {
	ImGui::EndChildFrame();
}
extern "C" void ShowStackToolWindow__a0b24c05261d8cc1(bool* p_open) {
	ImGui::ShowStackToolWindow(p_open);
}
extern "C" bool Combo__33b7a8c5bbd21f1c_3(const char* label, int* current_item, bool (*old_callback)(void*, int, const char**), void* user_data, int items_count, int popup_max_height_in_items) {
	return ImGui::Combo(label, current_item, old_callback, user_data, items_count, popup_max_height_in_items);
}
extern "C" bool ListBox__1fb0d4c51b313761_2(const char* label, int* current_item, bool (*old_callback)(void*, int, const char**), void* user_data, int items_count, int height_in_items) {
	return ImGui::ListBox(label, current_item, old_callback, user_data, items_count, height_in_items);
}
extern "C" void SetItemAllowOverlap__32090b34a719f510() {
	ImGui::SetItemAllowOverlap();
}
#pragma clang diagnostic pop