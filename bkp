//! Generates a Zig bindings via a C wrapper for C++ headers.
//!
//! TODO: Bring comments over.
//!
//! Element Mapping (C++ -> C -> Zig):
//! - `namespace` -> Prefixed elements -> `struct` containing `extern fn`s
//! - `struct` / `class`
//!   - C-compatible -> `struct` -> `extern struct`
//!   - Not C-compatible -> `void*` -> `?*anyopaque`
//! - `typedef` -> `typedef` -> `pub const`
//! - C/C++ types

// ---

const std = @import("std");
const ast = @import("ast.zig");

pub const c = @cImport({
    @cInclude("clang-c/Index.h");
});

// ---

var allocator: std.mem.Allocator = undefined;

// ---

pub fn main() !void {
    var arena = std.heap.ArenaAllocator.init(std.heap.smp_allocator);
    defer arena.deinit();

    const ns = ast.parseFile(
        arena.allocator(),
        "imgui/imgui.h",
        &.{
            "-xc++", // Force it to parse C++, otherwise it hates namespaces.
            "-Iimgui/",
            "-DIMGUI_DISABLE_OBSOLETE_FUNCTIONS",
        },
    );

    std.debug.print("Program:\n", .{});
    std.debug.print("{f}\n", .{ns});
}
