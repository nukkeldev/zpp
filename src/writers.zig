// -- Imports -- //

const std = @import("std");
const IR = @import("ir/IR.zig");

const cpp_util = @import("writers/cpp_util.zig");

// -- Writers -- //

pub const IRWriter = struct {
    formatFilename: *const fn (std.mem.Allocator, []const u8) std.mem.Allocator.Error![:0]const u8,
    formatFile: *const fn (IR, *std.Io.Writer) std.Io.Writer.Error!void,
    checkFile: *const fn (std.mem.Allocator, [:0]const u8, anytype) std.mem.Allocator.Error!bool,
};

pub const CppWrapper: IRWriter = .{
    .formatFilename = @import("writers/cpp_wrapper.zig").formatFilename,
    .formatFile = @import("writers/cpp_wrapper.zig").formatFile,
    .checkFile = cpp_util.checkFile,
};

// -- Helpers -- //

pub const PREAMBLE = "// This file was auto-generated by github:nukkeldev/zpp; I wouldn't recommend editing it.";

pub fn writeToFile(
    allocator: std.mem.Allocator,
    ir: IR,
    ir_writer: IRWriter,
    filename: []const u8,
) !void {
    const formatted_filename = try ir_writer.formatFilename(allocator, filename);

    var file = try std.fs.cwd().createFile(formatted_filename, .{});
    defer file.close();

    var io_writer = file.writer(&.{});
    try ir_writer.formatFile(ir, &io_writer.interface);

    std.log.info("Wrote '{s}'!", .{formatted_filename});
}

pub fn checkFile(
    allocator: std.mem.Allocator,
    ir_writer: IRWriter,
    filename: []const u8,
    args: anytype,
) !void {
    const formatted_filename = try ir_writer.formatFilename(allocator, filename);

    const good = try ir_writer.checkFile(
        allocator,
        formatted_filename,
        args,
    );

    if (good) {
        std.log.info("'{s}' passed checks!", .{formatted_filename});
    } else {
        std.log.err("'{s}' failed checks!", .{formatted_filename});
    }
}
